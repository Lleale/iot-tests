{
	"info": {
		"_postman_id": "ac7927b3-a699-42bd-becf-a1c683ed6866",
		"name": "Проверка работы платформы через интерфейс Администратора",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36207140"
	},
	"item": [
		{
			"name": "Абоненты",
			"item": [
				{
					"name": "Добавление пользователей",
					"item": [
						{
							"name": "Admin_auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have access_token in body\", function(){",
											"    pm.response.to.not.be.error;",
											"    pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{admin_username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{admin_password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have id in response\", function(){",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id_ab_test_1\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"username\": \"ab_test_1\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"Smith\",\n    \"name\": \"Alex\",\n    \"patronymic\": \"Joe\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check adding user1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have id in response\", function(){",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id_ab_test_1}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id_ab_test_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have id in response\", function(){",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id_ab_test_2\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"username\": \"ab_test_2\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": null,\n    \"name\": null,\n    \"patronymic\": null,\n    \"email\": \"ab_test_2@mail\",\n    \"phone\": \"89537602255\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"321\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check adding user2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have id in response\", function(){",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id_ab_test_2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id_ab_test_2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка фильтров",
					"item": [
						{
							"name": "users without filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have data in response, total equal real count of data elements\", () => {",
											"    pm.expect(pm.response.json()).to.have.property(\"total\");",
											"    pm.expect(pm.response.json()).to.have.property(\"data\");",
											"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
											"});",
											"",
											"pm.test(\"Correct admin id\", () => {",
											"    for (let i in pm.response.json().data){",
											"        if ( pm.response.json().data[i].username == \"admin\"){",
											"            pm.expect(pm.response.json().data[i].id).to.eql(\"3\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"let valid = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"roleId\",",
											"                    \"roleName\",",
											"                    \"username\",",
											"                    \"access\",",
											"                    \"accessMap\",",
											"                    \"houseIds\",",
											"                    \"houseIdsWithRefuser\",",
											"                    \"emailConfirm\",",
											"                    \"phoneConfirm\",",
											"                    \"password\",",
											"                    \"name\",",
											"                    \"surname\",",
											"                    \"patronymic\",",
											"                    \"email\",",
											"                    \"phone\",",
											"                    \"role\",",
											"                    \"status\",",
											"                    \"admin\",",
											"                    \"additionalAccounts\",",
											"                    \"language\",",
											"                    \"externalUrl\",",
											"                    \"videoParameters\",",
											"                    \"permissions\",",
											"                    \"roleSettings\",",
											"                    \"enabled\",",
											"                    \"ownedHouseIds\",",
											"                    \"testModeEnabled\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleId\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"username\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"access\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"accessMap\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"houseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"houseIdsWithRefuser\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"emailConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"phoneConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"password\": {",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"name\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"surname\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"patronymic\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"email\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"phone\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"role\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"status\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"admin\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"additionalAccounts\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"language\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"externalUrl\": {",
											"                        \"type\": [",
											"                            \"string\",",
											"                            \"null\"",
											"                        ]",
											"                    },",
											"                    \"videoParameters\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"object\"",
											"                        ],",
											"                        \"required\": [",
											"                            \"platforms\",",
											"                            \"canAddAgentCamera\",",
											"                            \"enabled\",",
											"                            \"cameraLimits\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"platforms\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            },",
											"                            \"canAddAgentCamera\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"enabled\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"cameraLimits\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"ELTEX\",",
											"                                    \"FLUSSONIC\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"ELTEX\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    },",
											"                                    \"FLUSSONIC\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    \"permissions\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"roleSettings\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"defaultPage\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"defaultPage\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"enabled\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"ownedHouseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"testModeEnabled\": {",
											"                        \"type\": \"boolean\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validation of response json\", function(){",
											"    pm.response.to.have.jsonSchema(valid);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users?excludeRoles=&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "excludeRoles",
											"value": ""
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "users with login filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have data in response, total equal real count of data elements\", () => {",
											"    pm.expect(pm.response.json()).to.have.property(\"total\");",
											"    pm.expect(pm.response.json()).to.have.property(\"data\");",
											"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
											"});",
											"",
											"pm.test(\"Filter by users login\", () => {",
											"    const reg = new RegExp (`.*${pm.request.url.query.toObject().nameOrLogin}.*`);",
											"    for (let i in pm.response.json().data){",
											"        pm.expect(pm.response.json().data[i].username).to.match(reg);",
											"    }",
											"});",
											"",
											"",
											"let valid = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"roleId\",",
											"                    \"roleName\",",
											"                    \"username\",",
											"                    \"access\",",
											"                    \"accessMap\",",
											"                    \"houseIds\",",
											"                    \"houseIdsWithRefuser\",",
											"                    \"emailConfirm\",",
											"                    \"phoneConfirm\",",
											"                    \"password\",",
											"                    \"name\",",
											"                    \"surname\",",
											"                    \"patronymic\",",
											"                    \"email\",",
											"                    \"phone\",",
											"                    \"role\",",
											"                    \"status\",",
											"                    \"admin\",",
											"                    \"additionalAccounts\",",
											"                    \"language\",",
											"                    \"externalUrl\",",
											"                    \"videoParameters\",",
											"                    \"permissions\",",
											"                    \"roleSettings\",",
											"                    \"enabled\",",
											"                    \"ownedHouseIds\",",
											"                    \"testModeEnabled\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleId\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"username\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"access\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"accessMap\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"houseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"houseIdsWithRefuser\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"emailConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"phoneConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"password\": {",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"name\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"surname\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"patronymic\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"email\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"phone\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"role\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"status\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"admin\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"additionalAccounts\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"language\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"externalUrl\": {",
											"                        \"type\": [",
											"                            \"string\",",
											"                            \"null\"",
											"                        ]",
											"                    },",
											"                    \"videoParameters\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"object\"",
											"                        ],",
											"                        \"required\": [",
											"                            \"platforms\",",
											"                            \"canAddAgentCamera\",",
											"                            \"enabled\",",
											"                            \"cameraLimits\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"platforms\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            },",
											"                            \"canAddAgentCamera\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"enabled\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"cameraLimits\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"ELTEX\",",
											"                                    \"FLUSSONIC\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"ELTEX\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    },",
											"                                    \"FLUSSONIC\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    \"permissions\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"roleSettings\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"defaultPage\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"defaultPage\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"enabled\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"ownedHouseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"testModeEnabled\": {",
											"                        \"type\": \"boolean\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validation of response json\", function(){",
											"    pm.response.to.have.jsonSchema(valid);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users?nameOrLogin=ab_t&excludeRoles=&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "nameOrLogin",
											"value": "ab_t"
										},
										{
											"key": "excludeRoles",
											"value": ""
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "users with name filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have data in response, total equal real count of data elements\", () => {",
											"    pm.expect(pm.response.json()).to.have.property(\"total\");",
											"    pm.expect(pm.response.json()).to.have.property(\"data\");",
											"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
											"});",
											"",
											"pm.test(\"Filter by users name\", () => {",
											"    const reg = new RegExp (`.*${pm.request.url.query.toObject().nameOrLogin}.*`);",
											"    for (let i in pm.response.json().data){",
											"        pm.expect(pm.response.json().data[i].name).to.match(reg);",
											"    }",
											"});",
											"",
											"",
											"let valid = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"roleId\",",
											"                    \"roleName\",",
											"                    \"username\",",
											"                    \"access\",",
											"                    \"accessMap\",",
											"                    \"houseIds\",",
											"                    \"houseIdsWithRefuser\",",
											"                    \"emailConfirm\",",
											"                    \"phoneConfirm\",",
											"                    \"password\",",
											"                    \"name\",",
											"                    \"surname\",",
											"                    \"patronymic\",",
											"                    \"email\",",
											"                    \"phone\",",
											"                    \"role\",",
											"                    \"status\",",
											"                    \"admin\",",
											"                    \"additionalAccounts\",",
											"                    \"language\",",
											"                    \"externalUrl\",",
											"                    \"videoParameters\",",
											"                    \"permissions\",",
											"                    \"roleSettings\",",
											"                    \"enabled\",",
											"                    \"ownedHouseIds\",",
											"                    \"testModeEnabled\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleId\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"username\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"access\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"accessMap\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"houseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"houseIdsWithRefuser\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"emailConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"phoneConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"password\": {",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"name\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"surname\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"patronymic\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"email\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"phone\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"role\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"status\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"admin\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"additionalAccounts\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"language\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"externalUrl\": {",
											"                        \"type\": [",
											"                            \"string\",",
											"                            \"null\"",
											"                        ]",
											"                    },",
											"                    \"videoParameters\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"object\"",
											"                        ],",
											"                        \"required\": [",
											"                            \"platforms\",",
											"                            \"canAddAgentCamera\",",
											"                            \"enabled\",",
											"                            \"cameraLimits\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"platforms\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            },",
											"                            \"canAddAgentCamera\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"enabled\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"cameraLimits\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"ELTEX\",",
											"                                    \"FLUSSONIC\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"ELTEX\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    },",
											"                                    \"FLUSSONIC\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    \"permissions\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"roleSettings\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"defaultPage\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"defaultPage\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"enabled\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"ownedHouseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"testModeEnabled\": {",
											"                        \"type\": \"boolean\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validation of response json\", function(){",
											"    pm.response.to.have.jsonSchema(valid);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users?nameOrLogin=Al&excludeRoles=&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "nameOrLogin",
											"value": "Al"
										},
										{
											"key": "excludeRoles",
											"value": ""
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "users with phone filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have data in response, total equal real count of data elements\", () => {",
											"    pm.expect(pm.response.json()).to.have.property(\"total\");",
											"    pm.expect(pm.response.json()).to.have.property(\"data\");",
											"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
											"});",
											"",
											"pm.test(\"Filter by users phone\", () => {",
											"    const regex = new RegExp (`.*${pm.request.url.query.toObject().phone}.*`);",
											"    for (let i in pm.response.json().data){",
											"        pm.expect(pm.response.json().data[i].phone).to.match(regex);",
											"    }",
											"});",
											"",
											"",
											"let valid = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"roleId\",",
											"                    \"roleName\",",
											"                    \"username\",",
											"                    \"access\",",
											"                    \"accessMap\",",
											"                    \"houseIds\",",
											"                    \"houseIdsWithRefuser\",",
											"                    \"emailConfirm\",",
											"                    \"phoneConfirm\",",
											"                    \"password\",",
											"                    \"name\",",
											"                    \"surname\",",
											"                    \"patronymic\",",
											"                    \"email\",",
											"                    \"phone\",",
											"                    \"role\",",
											"                    \"status\",",
											"                    \"admin\",",
											"                    \"additionalAccounts\",",
											"                    \"language\",",
											"                    \"externalUrl\",",
											"                    \"videoParameters\",",
											"                    \"permissions\",",
											"                    \"roleSettings\",",
											"                    \"enabled\",",
											"                    \"ownedHouseIds\",",
											"                    \"testModeEnabled\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleId\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"username\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"access\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"accessMap\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"houseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"houseIdsWithRefuser\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"emailConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"phoneConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"password\": {",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"name\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"surname\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"patronymic\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"email\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"phone\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"role\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"status\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"admin\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"additionalAccounts\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"language\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"externalUrl\": {",
											"                        \"type\": [",
											"                            \"string\",",
											"                            \"null\"",
											"                        ]",
											"                    },",
											"                    \"videoParameters\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"object\"",
											"                        ],",
											"                        \"required\": [",
											"                            \"platforms\",",
											"                            \"canAddAgentCamera\",",
											"                            \"enabled\",",
											"                            \"cameraLimits\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"platforms\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            },",
											"                            \"canAddAgentCamera\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"enabled\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"cameraLimits\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"ELTEX\",",
											"                                    \"FLUSSONIC\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"ELTEX\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    },",
											"                                    \"FLUSSONIC\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    \"permissions\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"roleSettings\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"defaultPage\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"defaultPage\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"enabled\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"ownedHouseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"testModeEnabled\": {",
											"                        \"type\": \"boolean\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validation of response json\", function(){",
											"    pm.response.to.have.jsonSchema(valid);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users?phone=9537&excludeRoles=&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "phone",
											"value": "9537"
										},
										{
											"key": "excludeRoles",
											"value": ""
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "users with role filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have data in response, total equal real count of data elements\", () => {",
											"    pm.expect(pm.response.json()).to.have.property(\"total\");",
											"    pm.expect(pm.response.json()).to.have.property(\"data\");",
											"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
											"});",
											"",
											"pm.test(\"Filter by users role\", () => {",
											"    const reg = new RegExp (`.*${pm.request.url.query.toObject().roleId}.*`);",
											"    for (let i in pm.response.json().data){",
											"        pm.expect(pm.response.json().data[i].roleId).to.match(reg);",
											"    }",
											"});",
											"",
											"",
											"let valid = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"roleId\",",
											"                    \"roleName\",",
											"                    \"username\",",
											"                    \"access\",",
											"                    \"accessMap\",",
											"                    \"houseIds\",",
											"                    \"houseIdsWithRefuser\",",
											"                    \"emailConfirm\",",
											"                    \"phoneConfirm\",",
											"                    \"password\",",
											"                    \"name\",",
											"                    \"surname\",",
											"                    \"patronymic\",",
											"                    \"email\",",
											"                    \"phone\",",
											"                    \"role\",",
											"                    \"status\",",
											"                    \"admin\",",
											"                    \"additionalAccounts\",",
											"                    \"language\",",
											"                    \"externalUrl\",",
											"                    \"videoParameters\",",
											"                    \"permissions\",",
											"                    \"roleSettings\",",
											"                    \"enabled\",",
											"                    \"ownedHouseIds\",",
											"                    \"testModeEnabled\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleId\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"roleName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"username\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"access\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"accessMap\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"houseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"houseIdsWithRefuser\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"emailConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"phoneConfirm\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"password\": {",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"name\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"surname\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"patronymic\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"email\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"phone\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"role\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"status\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"admin\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"additionalAccounts\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"language\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"externalUrl\": {",
											"                        \"type\": [",
											"                            \"string\",",
											"                            \"null\"",
											"                        ]",
											"                    },",
											"                    \"videoParameters\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"object\"",
											"                        ],",
											"                        \"required\": [",
											"                            \"platforms\",",
											"                            \"canAddAgentCamera\",",
											"                            \"enabled\",",
											"                            \"cameraLimits\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"platforms\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            },",
											"                            \"canAddAgentCamera\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"enabled\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"cameraLimits\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"ELTEX\",",
											"                                    \"FLUSSONIC\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"ELTEX\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    },",
											"                                    \"FLUSSONIC\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [",
											"                                            \"canAddCamera\",",
											"                                            \"cameraLimit\",",
											"                                            \"cameraCount\"",
											"                                        ],",
											"                                        \"properties\": {",
											"                                            \"canAddCamera\": {",
											"                                                \"type\": \"boolean\"",
											"                                            },",
											"                                            \"cameraLimit\": {",
											"                                                \"type\": \"integer\"",
											"                                            },",
											"                                            \"cameraCount\": {",
											"                                                \"type\": \"integer\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    \"permissions\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"roleSettings\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"defaultPage\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"defaultPage\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"enabled\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"ownedHouseIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    },",
											"                    \"testModeEnabled\": {",
											"                        \"type\": \"boolean\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validation of response json\", function(){",
											"    pm.response.to.have.jsonSchema(valid);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users?roleId=admin&excludeRoles=&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "roleId",
											"value": "admin"
										},
										{
											"key": "excludeRoles",
											"value": ""
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление пользователей",
					"item": [
						{
							"name": "ab_test_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь удален (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id_ab_test_1}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id_ab_test_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ab_test_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь удален (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id_ab_test_2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id_ab_test_2}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Журнал",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log with current time",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"time\", Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response in JSON format\", function(){",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Have data in response, total equal real count of data elements\", function(){",
									"    pm.expect(pm.response.json()).to.have.property(\"total\");",
									"    pm.expect(pm.response.json()).to.have.property(\"data\");",
									"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
									"});",
									"",
									"pm.environment.set(\"logs_count\", pm.response.json().total);",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"type\",",
									"        \"total\",",
									"        \"data\",",
									"        \"next_time_millis\",",
									"        \"next_offset\",",
									"        \"last_read_event_time_millis\"",
									"    ],",
									"    \"properties\": {",
									"        \"type\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"total\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"data\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"message\",",
									"                    \"level\",",
									"                    \"type\",",
									"                    \"icon_name\",",
									"                    \"origin_id\",",
									"                    \"origin_type\",",
									"                    \"created_at_millis\",",
									"                    \"house_id\",",
									"                    \"user_id\",",
									"                    \"links\",",
									"                    \"color\",",
									"                    \"section_type\",",
									"                    \"section_id\"",
									"                ],",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"type\": \"null\"",
									"                    },",
									"                    \"message\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"level\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"icon_name\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"origin_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"origin_type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"created_at_millis\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"house_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"user_id\": {",
									"                        \"type\": \"null\"",
									"                    },",
									"                    \"links\": {",
									"                        \"type\": \"null\"",
									"                    },",
									"                    \"color\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"section_type\": {",
									"                        \"type\": \"null\"",
									"                    },",
									"                    \"section_id\": {",
									"                        \"type\": \"null\"",
									"                    }",
									"                }",
									"            }",
									"        },",
									"        \"next_time_millis\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"next_offset\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"last_read_event_time_millis\": {",
									"            \"type\": \"integer\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/administration/events/endless?limit=50&offset=0&language=ru&originType=USER&originIds=3&fromMillis={{time}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"administration",
								"events",
								"endless"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "language",
									"value": "ru"
								},
								{
									"key": "originType",
									"value": "USER"
								},
								{
									"key": "originIds",
									"value": "3"
								},
								{
									"key": "fromMillis",
									"value": "{{time}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Log 1 hour ago",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"time\", Date.now()-(3600*1000));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response in JSON format\", function(){",
									"pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Have data in response, total equal real count of data elements\", function(){",
									"    pm.expect(pm.response.text()).to.include(\"data\");",
									"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
									"});",
									"",
									"pm.test(\"Count of logs 1 hour ago is less or equal than current\", function(){",
									"    pm.response.json().total <= pm.environment.get(\"logs_count\");",
									"});",
									"",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"type\",",
									"        \"total\",",
									"        \"data\",",
									"        \"next_time_millis\",",
									"        \"next_offset\",",
									"        \"last_read_event_time_millis\"",
									"    ],",
									"    \"properties\": {",
									"        \"type\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"total\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"data\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"message\",",
									"                    \"level\",",
									"                    \"type\",",
									"                    \"icon_name\",",
									"                    \"origin_id\",",
									"                    \"origin_type\",",
									"                    \"created_at_millis\",",
									"                    \"house_id\",",
									"                    \"user_id\",",
									"                    \"links\",",
									"                    \"color\",",
									"                    \"section_type\",",
									"                    \"section_id\"",
									"                ],",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"type\": \"null\"",
									"                    },",
									"                    \"message\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"level\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"icon_name\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"origin_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"origin_type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"created_at_millis\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"house_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"user_id\": {",
									"                        \"type\": \"null\"",
									"                    },",
									"                    \"links\": {",
									"                        \"type\": \"null\"",
									"                    },",
									"                    \"color\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"section_type\": {",
									"                        \"type\": \"null\"",
									"                    },",
									"                    \"section_id\": {",
									"                        \"type\": \"null\"",
									"                    }",
									"                }",
									"            }",
									"        },",
									"        \"next_time_millis\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"next_offset\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"last_read_event_time_millis\": {",
									"            \"type\": \"integer\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/administration/events/endless?limit=50&offset=0&language=ru&originType=USER&originIds=3&fromMillis={{time}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"administration",
								"events",
								"endless"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "language",
									"value": "ru"
								},
								{
									"key": "originType",
									"value": "USER"
								},
								{
									"key": "originIds",
									"value": "3"
								},
								{
									"key": "fromMillis",
									"value": "{{time}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Хабы",
			"item": [
				{
					"name": "Добавление контроллера",
					"item": [
						{
							"name": "Admin_auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"access_token\", pm.response.json().access_token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have access_token in body\", function(){",
											"    pm.response.to.not.be.error;",
											"    pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{admin_username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{admin_password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Have id in response\", function(){",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id_ab_test_1\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"username\": \"ab_test_1\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"Smith\",\n    \"name\": \"Alex\",\n    \"patronymic\": \"Joe\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add house",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that response is json object\", () => {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let valid = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"variables\",",
											"        \"dashboardItems\",",
											"        \"houseGroups\",",
											"        \"guards\",",
											"        \"title\",",
											"        \"ownerId\",",
											"        \"address\",",
											"        \"apartment\",",
											"        \"timeZone\",",
											"        \"type\",",
											"        \"startTime\",",
											"        \"guardStatus\",",
											"        \"underGuard\",",
											"        \"controllers\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"variables\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        },",
											"        \"dashboardItems\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        },",
											"        \"houseGroups\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        },",
											"        \"guards\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"ownerId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"apartment\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"timeZone\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"startTime\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"guardStatus\": {",
											"            \"type\": [\"null\", \"string\"]",
											"        },",
											"        \"underGuard\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"controllers\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validate response json\", () => {",
											"    pm.response.to.have.jsonSchema(valid);",
											"})",
											"",
											"pm.environment.set(\"house_id\", pm.response.json().id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"test_home\",\n    \"ownerId\": \"{{id_ab_test_1}}\",\n    \"type\": \"HOUSE\",\n    \"address\": \"test_street\",\n    \"apartment\": \"100\",\n    \"timeZone\": \"Asia/Novosibirsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hub config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Settings confirmed\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"connected\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/info",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Platform info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var sdk = require('postman-collection');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
											"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/info",
									"host": [
										"{{host}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add sz_wlk sensor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Adding sensor\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 9\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Connect hub",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"// Чтобы платформа успела принять подключение контроллера",
											"setTimeout(function(){}, [200]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"o7\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/connect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"connect"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка добавления контроллера через websocket",
					"item": [
						{
							"name": "Connect to WebSocket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [5000]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"connect"
									],
									"query": [
										{
											"key": "host",
											"value": "{{host_ws}}/event_ws"
										},
										{
											"key": "token",
											"value": "{{access_token}}"
										},
										{
											"key": "subprotocol",
											"value": "SmartHome"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add controller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function(){}, [2500]); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());",
											"console.log(Date.now())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									]
								}
							},
							"response": []
						},
						{
							"name": "Waiting for the add device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&timeout=180000&C_newStatus=ONLINE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_controllerId",
											"value": "{{ctl_id}}"
										},
										{
											"key": "C_type",
											"value": "DEVICE_STATUS_CHANGE"
										},
										{
											"key": "C_deviceInfo.nodeId",
											"value": "ZWAVE_ELTEX_7",
											"disabled": true
										},
										{
											"key": "timeout",
											"value": "180000"
										},
										{
											"key": "C_newStatus",
											"value": "ONLINE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disconnect WebSocket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/disconnect",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"disconnect"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка фильтров",
					"item": [
						{
							"name": "Filter by MAC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response in JSON format\", function(){",
											"pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Have data in response, total equal real count of data elements\", function(){",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
											"});",
											"",
											"pm.test(\"Count of logs 1 hour ago is less or equal than current\", function(){",
											"    pm.response.json().total <= pm.environment.get(\"logs_count\");",
											"});",
											"",
											"pm.test(\"Response have only choosen MAC\", () => {",
											"    pm.expect(pm.response.json().data.all(value => value.additionalInfo.mac.toUpperCase() === pm.globals.get(\"zway_simulate_mac\").toUpperCase())).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl?mac={{zway_simulate_mac}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									],
									"query": [
										{
											"key": "mac",
											"value": "{{zway_simulate_mac}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response in JSON format\", function(){",
											"pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Have data in response, total equal real count of data elements\", function(){",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
											"});",
											"",
											"pm.test(\"Count of logs 1 hour ago is less or equal than current\", function(){",
											"    pm.response.json().total <= pm.environment.get(\"logs_count\");",
											"});",
											"",
											"pm.test(\"Response have only choosen MAC\", () => {",
											"    pm.expect(pm.response.json().data.all(value => value.status === \"CONNECTED\")).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl?status=CONNECTED&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									],
									"query": [
										{
											"key": "status",
											"value": "CONNECTED"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by hub name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response in JSON format\", function(){",
											"pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Have data in response, total equal real count of data elements\", function(){",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
											"});",
											"",
											"pm.test(\"Count of logs 1 hour ago is less or equal than current\", function(){",
											"    pm.response.json().total <= pm.environment.get(\"logs_count\");",
											"});",
											"",
											"pm.test(\"Response have only choosen MAC\", () => {",
											"    pm.response.json().data.all(value => pm.expect(value.title).to.include(\"_sim\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl?title=_sim&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									],
									"query": [
										{
											"key": "title",
											"value": "_sim"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove sz_wlk device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/devices/9",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "ab_test_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь удален (код 204)\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{id_ab_test_1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_ab_test_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка отвязки/ удаления хабов",
			"item": [
				{
					"name": "Подключение хаба",
					"item": [
						{
							"name": "Hub config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Settings confirmed\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"connected\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/info",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Platform info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var sdk = require('postman-collection');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
											"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/info",
									"host": [
										"{{host}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Connect hub",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"// Чтобы платформа успела принять подключение контроллера",
											"setTimeout(function(){}, [200]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"o7\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/connect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"connect"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление хаба с платформы",
					"item": [
						{
							"name": "Отключение контроллера от платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"o7\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/disconnect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"disconnect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get controller id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that response is json object\", () => {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let valid = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"houseId\",",
											"                    \"typeController\",",
											"                    \"virtual\",",
											"                    \"status\",",
											"                    \"title\",",
											"                    \"ipAddress\",",
											"                    \"lastActivity\",",
											"                    \"additionalInfo\",",
											"                    \"settings\",",
											"                    \"houseAddress\",",
											"                    \"houseApartment\",",
											"                    \"devices\",",
											"                    \"nodeIds\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"houseId\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"typeController\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"virtual\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"status\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"title\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"ipAddress\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"lastActivity\": {",
											"                        \"type\": \"number\"",
											"                    },",
											"                    \"additionalInfo\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"zwaveSubModule\",",
											"                            \"model\",",
											"                            \"softwareVersion\",",
											"                            \"vendor\",",
											"                            \"mac\",",
											"                            \"serial\",",
											"                            \"controllerModel\",",
											"                            \"zWaveSubModule\",",
											"                            \"sdkSubVersion\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"zwaveSubModule\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"model\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"softwareVersion\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"vendor\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"mac\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"serial\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"controllerModel\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"zWaveSubModule\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"sdkSubVersion\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"settings\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"homeId\",",
											"                            \"capabilities\",",
											"                            \"provisioningList\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"homeId\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"capabilities\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            },",
											"                            \"provisioningList\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            }",
											"                        }",
											"                    },",
											"                    \"houseAddress\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"houseApartment\": {",
											"                        \"type\": [",
											"                            \"null\",",
											"                            \"string\"",
											"                        ]",
											"                    },",
											"                    \"devices\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [],",
											"                        \"properties\": {}",
											"                    },",
											"                    \"nodeIds\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {}",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validate response json\", () => {",
											"    pm.response.to.have.jsonSchema(valid);",
											"});",
											"",
											"",
											"pm.test(\"Correct not empty rsponse\", () => {",
											"    pm.expect(pm.response.json()).to.have.property(\"total\");",
											"    pm.expect(pm.response.json()).to.have.property(\"data\");",
											"    pm.expect(pm.response.json().total).to.eql(pm.response.json().data.length);",
											"});",
											"",
											"if (pm.response.json().total > 0){",
											"    pm.environment.set(\"ctl_id\", pm.response.json().data[0].id);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl?limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									],
									"query": [
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove controller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь удален (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{ctl_id}}/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{ctl_id}}",
										"remove"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Шаблоны сценариев",
			"item": [
				{
					"name": "Add pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable (\"id_pattern\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Ушел на ночь\",\n    \"state\": \"Я не дома и на улице ночь\",\n    \"then\": \"Включить устройства\",\n    \"rules\": [\n        {\n            \"conditions\": [\n                {\n                    \"sourceType\": \"HOUSE_VARIABLE\",\n                    \"observableValue\": \"houseMode\",\n                    \"comparison\": \"EQ\",\n                    \"targetValue\": \"notAtHome\"\n                },\n                {\n                    \"sourceType\": \"TIME\",\n                    \"observableValue\": \"TIME_OF_DAY\",\n                    \"comparison\": \"EQ\",\n                    \"targetValue\": \"2200~0800\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"SET_DEVICE_PROPERTY\",\n            \"data\": {\n                \"propertyKind\": \"ON_OFF\",\n                \"newValue\": {\n                    \"value\": \"true\"\n                }\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/patterns",
							"host": [
								"{{host}}"
							],
							"path": [
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check adding pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"scriptPattern\",",
									"        \"title\",",
									"        \"state\",",
									"        \"then\",",
									"        \"language\",",
									"        \"propertyKindList\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"scriptPattern\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"state\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"then\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"language\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"propertyKindList\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Ушел на ночь\",\n    \"state\": \"Я не дома и на улице ночь\",\n    \"then\": \"Включить устройства\",\n    \"rules\": [\n        {\n            \"conditions\": [\n                {\n                    \"sourceType\": \"HOUSE_VARIABLE\",\n                    \"observableValue\": \"houseMode\",\n                    \"comparison\": \"EQ\",\n                    \"targetValue\": \"notAtHome\"\n                },\n                {\n                    \"sourceType\": \"TIME\",\n                    \"observableValue\": \"TIME_OF_DAY\",\n                    \"comparison\": \"EQ\",\n                    \"targetValue\": \"2200~0800\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"SET_DEVICE_PROPERTY\",\n            \"data\": {\n                \"propertyKind\": \"ON_OFF\",\n                \"newValue\": {\n                    \"value\": \"true\"\n                }\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/patterns/{{id_pattern}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"patterns",
								"{{id_pattern}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/patterns/{{id_pattern}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"patterns",
								"{{id_pattern}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Настройки Сервера",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add beginner story",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable (\"id_Bstory\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": null,\n    \"title\": \"Test beginner story\",\n    \"preview\": \"{{host}}/files/download/66827f5475ce59445631d509/jpg.jpg\",\n    \"preset\": \"beginner\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Testing the add of beginner story\",\n            \"comment\": \"\",\n            \"body\": \"Some text\",\n            \"image\": \"{{host}}/files/download/66827f5c75ce59445631d50c/q.png\",\n            \"buttons\": []\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/stories",
							"host": [
								"{{host}}"
							],
							"path": [
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check adding beginner story",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"title\",",
									"        \"preview\",",
									"        \"preset\",",
									"        \"pages\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"preview\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"preset\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"pages\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"type\",",
									"                    \"title\",",
									"                    \"image\",",
									"                    \"body\",",
									"                    \"comment\",",
									"                    \"buttons\"",
									"                ],",
									"                \"properties\": {",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"title\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"image\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"body\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"comment\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"buttons\": {",
									"                        \"type\": \"array\",",
									"                        \"items\": {}",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": null,\n    \"title\": \"Test beginner story\",\n    \"preview\": \"{{host}}/files/download/66827f5475ce59445631d509/jpg.jpg\",\n    \"preset\": \"beginner\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Testing the add of beginner story\",\n            \"comment\": \"\",\n            \"body\": \"Some text\",\n            \"image\": \"{{host}}/files/download/66827f5c75ce59445631d50c/q.png\",\n            \"buttons\": []\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/stories/{{id_Bstory}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"stories",
								"{{id_Bstory}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add advanced story",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable (\"id_Astory\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": null,\n    \"title\": \"Test advanced story\",\n    \"preview\": \"{{host}}/files/download/668281d875ce59445631d515/jpg.jpg\",\n    \"preset\": \"advanced\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Testing the advanced story\",\n            \"comment\": \"\",\n            \"body\": \"Some text\",\n            \"image\": \"{{host}}/files/download/668281db75ce59445631d518/q.png\",\n            \"buttons\": []\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/stories",
							"host": [
								"{{host}}"
							],
							"path": [
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check adding advanced story",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"title\",",
									"        \"preview\",",
									"        \"preset\",",
									"        \"pages\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"preview\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"preset\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"pages\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"type\",",
									"                    \"title\",",
									"                    \"image\",",
									"                    \"body\",",
									"                    \"comment\",",
									"                    \"buttons\"",
									"                ],",
									"                \"properties\": {",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"title\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"image\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"body\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"comment\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"buttons\": {",
									"                        \"type\": \"array\",",
									"                        \"items\": {}",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": null,\n    \"title\": \"Test beginner story\",\n    \"preview\": \"{{host}}/files/download/66827f5475ce59445631d509/jpg.jpg\",\n    \"preset\": \"beginner\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Testing the add of beginner story\",\n            \"comment\": \"\",\n            \"body\": \"Some text\",\n            \"image\": \"{{host}}/files/download/66827f5c75ce59445631d50c/q.png\",\n            \"buttons\": []\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/stories/{{id_Astory}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"stories",
								"{{id_Astory}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "beginner story",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь удален (код 204)\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/stories/{{id_Bstory}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"stories",
								"{{id_Bstory}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "advanced story",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь удален (код 204)\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/stories/{{id_Astory}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"stories",
								"{{id_Astory}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Изменение уровня логирования",
			"item": [
				{
					"name": "Set log level",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Setting ERROR log level\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"ERROR\");",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/logger/set/ROOT/ERROR",
							"host": [
								"{{host}}"
							],
							"path": [
								"logger",
								"set",
								"ROOT",
								"ERROR"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set log level DEBUG",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Setting ERROR log level\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"DEBUG\");",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/logger/set/ROOT/DEBUG",
							"host": [
								"{{host}}"
							],
							"path": [
								"logger",
								"set",
								"ROOT",
								"DEBUG"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка уровня логирования",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that log level is DEBUG\", () => {",
									"    pm.expect(pm.response.json().ROOT).to.eql(\"DEBUG\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/logger/get",
							"host": [
								"{{host}}"
							],
							"path": [
								"logger",
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Организации",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"description\",",
									"        \"houseId\",",
									"        \"panels\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"houseId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"panels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {}",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"})",
									"",
									"pm.environment.set(\"org_id\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"org_test\",\n    \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/guard/organizations",
							"host": [
								"{{host}}"
							],
							"path": [
								"guard",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_org_name\", \"org_test_new\");",
									"pm.variables.set(\"new_name\", pm.environment.get(\"new_org_name\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{new_name}}\",\n    \"description\": \"Some description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/guard/organizations/{{org_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"guard",
								"organizations",
								"{{org_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/guard/organizations/{{org_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"guard",
								"organizations",
								"{{org_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка добавления/ редактирования/ удаления пульта",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"description\",",
									"        \"houseId\",",
									"        \"panels\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"houseId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"panels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {}",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"})",
									"",
									"pm.environment.set(\"org_id\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"org_test\",\n    \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/guard/organizations",
							"host": [
								"{{host}}"
							],
							"path": [
								"guard",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add panel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"title\",",
									"        \"protocolType\",",
									"        \"ip\",",
									"        \"port\",",
									"        \"removable\",",
									"        \"username\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"protocolType\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"ip\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"port\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"removable\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"username\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"})",
									"",
									"pm.environment.set(\"panel_id\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": null,\n    \"title\": \"ctrl\",\n    \"protocolType\": \"SURGARD\",\n    \"ip\": \"190.133.1.2\",\n    \"port\": 8888,\n    \"removable\": true,\n    \"status\": null,\n    \"username\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/guard/organizations/{{org_id}}/panels",
							"host": [
								"{{host}}"
							],
							"path": [
								"guard",
								"organizations",
								"{{org_id}}",
								"panels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit panel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"title\",",
									"        \"protocolType\",",
									"        \"ip\",",
									"        \"port\",",
									"        \"removable\",",
									"        \"username\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"protocolType\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"ip\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"port\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"removable\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"username\": {",
									"            \"type\": \"null\"",
									"        },",
									"        \"status\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{panel_id}}\",\n    \"title\": \"panel\",\n    \"protocolType\": \"SURGARD\",\n    \"ip\": \"190.133.1.2\",\n    \"port\": 8888,\n    \"removable\": true,\n    \"username\": \"\",\n    \"status\": false\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/guard/organizations/{{org_id}}/panels/{{panel_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"guard",
								"organizations",
								"{{org_id}}",
								"panels",
								"{{panel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE panel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/guard/organizations/{{org_id}}/panels/{{panel_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"guard",
								"organizations",
								"{{org_id}}",
								"panels",
								"{{panel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/guard/organizations/{{org_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"guard",
								"organizations",
								"{{org_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Настройки",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.environment.set(\"user_settings\", JSON.stringify(pm.response.json()));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/usersettings",
							"host": [
								"{{host}}"
							],
							"path": [
								"usersettings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit user settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"additionalSettings\": {\n        \"byHouseVariable\": false,\n        \"valuesHouseVariable\": [\n            \"atHome\",\n            \"notAtHome\",\n            \"onHoliday\"\n        ],\n        \"mutedEmergencyPushCategories\": null,\n        \"byTime\": false,\n        \"startTime\": null,\n        \"endTime\": null,\n        \"timeZone\": null\n    },\n    \"baseSettings\": {\n        \"email\": {\n            \"loginUser\": true,\n            \"managementControllers\": true,\n            \"houseVariableChange\": true,\n            \"statusOfDevices\": true,\n            \"workOfDevices\": true,\n            \"workOfScript\": true,\n            \"criticalDevice\": true,\n            \"criticalControllers\": true,\n            \"infoGuardPanel\": true,\n            \"criticalGuards\": true,\n            \"detailGuardEvents\": true,\n            \"guardEvents\": true,\n            \"eventsByCameras\": true,\n            \"alarmChangedState\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"sms\": {\n            \"loginUser\": true,\n            \"managementControllers\": true,\n            \"houseVariableChange\": true,\n            \"statusOfDevices\": true,\n            \"workOfDevices\": true,\n            \"workOfScript\": true,\n            \"criticalDevice\": true,\n            \"criticalControllers\": true,\n            \"infoGuardPanel\": true,\n            \"criticalGuards\": true,\n            \"detailGuardEvents\": true,\n            \"guardEvents\": true,\n            \"eventsByCameras\": true,\n            \"alarmChangedState\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"push\": {\n            \"loginUser\": true,\n            \"managementControllers\": true,\n            \"houseVariableChange\": true,\n            \"statusOfDevices\": true,\n            \"workOfDevices\": true,\n            \"workOfScript\": true,\n            \"criticalDevice\": true,\n            \"criticalControllers\": true,\n            \"infoGuardPanel\": true,\n            \"criticalGuards\": true,\n            \"detailGuardEvents\": true,\n            \"guardEvents\": true,\n            \"eventsByCameras\": true,\n            \"alarmChangedState\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"events\": {\n            \"managementDevices\": true,\n            \"loginUser\": true,\n            \"managementUsers\": true,\n            \"managementUserAccess\": true,\n            \"managementHouses\": true,\n            \"managementControllers\": true,\n            \"houseVariableChange\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"workOfDevices\": true,\n            \"workOfScript\": true,\n            \"criticalDevice\": true,\n            \"criticalControllers\": true,\n            \"infoGuardPanel\": true,\n            \"criticalGuards\": true,\n            \"detailGuardEvents\": true,\n            \"guardEvents\": true,\n            \"eventsByCameras\": true,\n            \"statusesByCameras\": true,\n            \"subscription\": true\n        }\n    },\n    \"byPush\": false,\n    \"bySms\": true,\n    \"byEmail\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usersettings",
							"host": [
								"{{host}}"
							],
							"path": [
								"usersettings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset user settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that current settings equal defalt\", () => {",
									"    pm.expect(pm.response.text()).to.equal(pm.environment.get(\"user_settings\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/usersettings/admin",
							"host": [
								"{{host}}"
							],
							"path": [
								"usersettings",
								"admin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка смены пароля",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have id in response\", function(){",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable (\"id_ab_test_1\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"username\": \"ab_test_1\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"Smith\",\n    \"name\": \"Alex\",\n    \"patronymic\": \"Joe\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "ab_test_1_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"user_access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "ab_test_1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"roleId\",",
									"        \"roleName\",",
									"        \"username\",",
									"        \"access\",",
									"        \"accessMap\",",
									"        \"houseIds\",",
									"        \"houseIdsWithRefuser\",",
									"        \"emailConfirm\",",
									"        \"phoneConfirm\",",
									"        \"password\",",
									"        \"name\",",
									"        \"surname\",",
									"        \"patronymic\",",
									"        \"email\",",
									"        \"phone\",",
									"        \"role\",",
									"        \"status\",",
									"        \"admin\",",
									"        \"additionalAccounts\",",
									"        \"language\",",
									"        \"externalUrl\",",
									"        \"videoParameters\",",
									"        \"permissions\",",
									"        \"roleSettings\",",
									"        \"enabled\",",
									"        \"ownedHouseIds\",",
									"        \"testModeEnabled\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"roleId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"roleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"username\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"access\": {",
									"            \"type\": \"object\",",
									"            \"required\": [],",
									"            \"properties\": {}",
									"        },",
									"        \"accessMap\": {",
									"            \"type\": \"object\",",
									"            \"required\": [],",
									"            \"properties\": {}",
									"        },",
									"        \"houseIds\": {",
									"            \"type\": \"array\",",
									"            \"items\": {}",
									"        },",
									"        \"houseIdsWithRefuser\": {",
									"            \"type\": \"array\",",
									"            \"items\": {}",
									"        },",
									"        \"emailConfirm\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"phoneConfirm\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"password\": {",
									"            \"type\": \"null\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"surname\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"patronymic\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"phone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"role\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"admin\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"additionalAccounts\": {",
									"            \"type\": \"object\",",
									"            \"required\": [],",
									"            \"properties\": {}",
									"        },",
									"        \"language\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"externalUrl\": {",
									"            \"type\": \"null\"",
									"        },",
									"        \"videoParameters\": {",
									"            \"type\": \"object\",",
									"            \"required\": [",
									"                \"platforms\",",
									"                \"canAddAgentCamera\",",
									"                \"enabled\",",
									"                \"cameraLimits\"",
									"            ],",
									"            \"properties\": {",
									"                \"platforms\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": {}",
									"                },",
									"                \"canAddAgentCamera\": {",
									"                    \"type\": \"boolean\"",
									"                },",
									"                \"enabled\": {",
									"                    \"type\": \"boolean\"",
									"                },",
									"                \"cameraLimits\": {",
									"                    \"type\": \"object\",",
									"                    \"required\": [",
									"                        \"ELTEX\",",
									"                        \"FLUSSONIC\"",
									"                    ],",
									"                    \"properties\": {",
									"                        \"ELTEX\": {",
									"                            \"type\": \"object\",",
									"                            \"required\": [",
									"                                \"canAddCamera\",",
									"                                \"cameraLimit\",",
									"                                \"cameraCount\"",
									"                            ],",
									"                            \"properties\": {",
									"                                \"canAddCamera\": {",
									"                                    \"type\": \"boolean\"",
									"                                },",
									"                                \"cameraLimit\": {",
									"                                    \"type\": \"integer\"",
									"                                },",
									"                                \"cameraCount\": {",
									"                                    \"type\": \"integer\"",
									"                                }",
									"                            }",
									"                        },",
									"                        \"FLUSSONIC\": {",
									"                            \"type\": \"object\",",
									"                            \"required\": [",
									"                                \"canAddCamera\",",
									"                                \"cameraLimit\",",
									"                                \"cameraCount\"",
									"                            ],",
									"                            \"properties\": {",
									"                                \"canAddCamera\": {",
									"                                    \"type\": \"boolean\"",
									"                                },",
									"                                \"cameraLimit\": {",
									"                                    \"type\": \"integer\"",
									"                                },",
									"                                \"cameraCount\": {",
									"                                    \"type\": \"integer\"",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        },",
									"        \"permissions\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"string\"",
									"            }",
									"        },",
									"        \"roleSettings\": {",
									"            \"type\": \"object\",",
									"            \"required\": [",
									"                \"defaultPage\"",
									"            ],",
									"            \"properties\": {",
									"                \"defaultPage\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            }",
									"        },",
									"        \"enabled\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"ownedHouseIds\": {",
									"            \"type\": \"array\",",
									"            \"items\": {}",
									"        },",
									"        \"testModeEnabled\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{id_ab_test_1}}\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"username\": \"ab_test_1\",\n    \"password\": \"Ab_test_1\",\n    \"name\": \"Alex\",\n    \"surname\": \"Smith\",\n    \"patronymic\": \"Joe\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"\",\n    \"role\": \"user\",\n    \"status\": \"DEFAULT\",\n    \"admin\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/{{id_ab_test_1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_ab_test_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ab_test_1 auth new password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"user_access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "ab_test_1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Ab_test_1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "ab_test_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь удален (код 204)\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{id_ab_test_1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_ab_test_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка завершения всех сеансов",
			"item": [
				{
					"name": "Admin_auth session 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin_auth session 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have data in response, total equal real count of data elements\", () => {",
									"    pm.expect(pm.response.json()).to.have.property(\"total\");",
									"    pm.expect(pm.response.json()).to.have.property(\"data\");",
									"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
									"});",
									"",
									"pm.environment.set(\"count_sessions\", pm.response.json().total);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/login/info/current/user?clientIds=web-client,android-client,ios-client,android-counters,ios-counters,api-client&loggedIn=true&limit=50&offset=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"login",
								"info",
								"current",
								"user"
							],
							"query": [
								{
									"key": "clientIds",
									"value": "web-client,android-client,ios-client,android-counters,ios-counters,api-client"
								},
								{
									"key": "loggedIn",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke all sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/oauth2/token/revoke/all?clientIds=",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token",
								"revoke",
								"all"
							],
							"query": [
								{
									"key": "clientIds",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have data in response, total equal real count of data elements\", () => {",
									"    pm.expect(pm.response.json()).to.have.property(\"total\");",
									"    pm.expect(pm.response.json()).to.have.property(\"data\");",
									"    pm.expect(pm.response.json().data.length).to.equal(pm.response.json().total);",
									"});",
									"",
									"pm.test(\"Extra sessions is revoked\", () => {",
									"    pm.expect(pm.response.json().total).to.lt(pm.environment.get(\"count_sessions\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/login/info/current/user?clientIds=web-client,android-client,ios-client,android-counters,ios-counters,api-client&loggedIn=true&limit=50&offset=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"login",
								"info",
								"current",
								"user"
							],
							"query": [
								{
									"key": "clientIds",
									"value": "web-client,android-client,ios-client,android-counters,ios-counters,api-client"
								},
								{
									"key": "loggedIn",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Управление ролями",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have id in response\", function(){",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable (\"id_ab_test_1\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"username\": \"ab_test_1\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"Smith\",\n    \"name\": \"Alex\",\n    \"patronymic\": \"Joe\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"description\",",
									"        \"permissions\",",
									"        \"settings\",",
									"        \"system\",",
									"        \"startTime\",",
									"        \"isUsed\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"permissions\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"string\"",
									"            }",
									"        },",
									"        \"settings\": {",
									"            \"type\": \"object\",",
									"            \"required\": [",
									"                \"defaultPage\"",
									"            ],",
									"            \"properties\": {",
									"                \"defaultPage\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            }",
									"        },",
									"        \"system\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"startTime\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"isUsed\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validation of response json\", function(){",
									"    pm.response.to.have.jsonSchema(valid);",
									"});",
									"",
									"pm.environment.set(\"role_id\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test_role\",\n    \"description\": \"\",\n    \"isUsed\": false,\n    \"system\": false,\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.plans\",\n        \"view.events\",\n        \"view.devices\",\n        \"view.settings\",\n        \"needHouseUsers\",\n        \"needHouseEvents\",\n        \"needNewHousePage\",\n        \"needHouseLimits\",\n        \"needHousePage\",\n        \"needHouseVariablesPage\",\n        \"needHouseControllersPage\",\n        \"needDevicePage\",\n        \"needHouseGroupsPage\",\n        \"canDeleteZWayDevicesForcibly\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"user_profile_w\",\n        \"device_w\",\n        \"controller_w\",\n        \"house_w\",\n        \"camera_w\"\n    ],\n    \"settings\": {\n        \"defaultPage\": \"view.dashboard\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/security/roles",
							"host": [
								"{{host}}"
							],
							"path": [
								"security",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change user role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have id in response\", function(){",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"ff01c97a-3ee1-41cc-891c-2f122e70f691\",\n    \"roleId\": \"{{role_id}}\",\n    \"roleName\": \"Абонент\",\n    \"username\": \"ab_test_1\",\n    \"access\": {},\n    \"accessMap\": {},\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"password\": null,\n    \"name\": \"Alex\",\n    \"surname\": \"Smith\",\n    \"patronymic\": \"Joe\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"\",\n    \"role\": \"user\",\n    \"status\": \"DEFAULT\",\n    \"admin\": false,\n    \"additionalAccounts\": {},\n    \"language\": \"ru\",\n    \"externalUrl\": null,\n    \"videoParameters\": {\n        \"platforms\": [],\n        \"canAddAgentCamera\": false,\n        \"enabled\": false,\n        \"cameraLimits\": {\n            \"ELTEX\": {\n                \"canAddCamera\": true,\n                \"cameraLimit\": 0,\n                \"cameraCount\": 0\n            },\n            \"FLUSSONIC\": {\n                \"canAddCamera\": false,\n                \"cameraLimit\": 0,\n                \"cameraCount\": 0\n            }\n        }\n    },\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"view.issues\",\n        \"view.guard\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needHouseUsers\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"needDeviceAnalytics\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"enabled\": true,\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/{{id_ab_test_1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_ab_test_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check role update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have id in response\", function(){",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Check new role is set\", () => {",
									"    pm.expect(pm.response.json().roleId).to.eql(pm.environment.get(\"role_id\"));",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{id_ab_test_1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_ab_test_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ab_test_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь удален (код 204)\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{id_ab_test_1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_ab_test_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь удален (код 204)\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/security/roles/{{role_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"security",
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка сброса системной роли к исходным настройкам",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get default role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.environment.set(\"role_settings\", JSON.stringify(pm.response.json()));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/security/roles/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"security",
								"roles",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit system role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Have id in response\", function(){",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"user\",\n    \"name\": \"Абонент\",\n    \"description\": null,\n    \"permissions\": [\n        \"view.dashboard\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needHouseUsers\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"needDeviceAnalytics\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\",\n        \"view.devices\",\n        \"view.houses\",\n        \"view.settings\"\n    ],\n    \"settings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"system\": true,\n    \"startTime\": 1719814647,\n    \"isUsed\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/security/roles/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"security",
								"roles",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset system role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check new role is set\", () => {",
									"    pm.expect(pm.response.text()).to.eql(pm.environment.get(\"role_settings\"));",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/security/roles/reset/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"security",
								"roles",
								"reset",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Статистика (не работает)",
			"item": [
				{
					"name": "Admin_auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"access_token\", pm.response.json().access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Have access_token in body\", function(){",
									"    pm.response.to.not.be.error;",
									"    pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all statistic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.environment.set(\"stat_cnt\", pm.response.json().usersTotal);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"time_from\", Date.now());",
									"pm.environment.set(\"time_to\", Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/login/info/statistic?from={{time_from}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"login",
								"info",
								"statistic"
							],
							"query": [
								{
									"key": "from",
									"value": "{{time_from}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get statistics by date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Have usersTotal in response\", function(){",
									"    pm.expect(pm.response.json()).to.have.property(\"usersTotal\");",
									"});",
									"",
									"// pm.test(\"Count of users is less than been 5 hours ago\", function(){",
									"//     pm.expect(pm.response.json().usersTotal).to.lt(pm.environment.get(\"stat_cnt\"));",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"time_from\", Date.now()-(3600*1000*5));",
									"pm.environment.set(\"time_to\", Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/login/info/statistic?from={{time_from}}&to={{time_to}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"login",
								"info",
								"statistic"
							],
							"query": [
								{
									"key": "from",
									"value": "{{time_from}}"
								},
								{
									"key": "to",
									"value": "{{time_to}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean environment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Clear environment\", () => {",
							"    pm.environment.clear();",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "{{host}}/info",
					"host": [
						"{{host}}"
					],
					"path": [
						"info"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}