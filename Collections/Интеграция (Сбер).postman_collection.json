{
	"info": {
		"_postman_id": "435553b3-19a3-4c42-b91c-4bd05b997863",
		"name": "Интеграция (Сбер)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21716455"
	},
	"item": [
		{
			"name": "Авторизация",
			"item": [
				{
					"name": "Автоматическое обновление токенов",
					"item": [
						{
							"name": "Проверка токенов",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let iotToken = pm.variables.get(\"sber_iot_access_token\");",
											"let accessToken = pm.variables.get(\"sber_access_token\");",
											"let refreshToken = pm.variables.get(\"sber_refresh_token\");",
											"",
											"let iotTokenBody = null;",
											"let accessTokenBody = null;",
											"",
											"if (iotToken) {",
											"    iotTokenBody = JSON.parse(CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse(iotToken.split('.')[1])));",
											"    console.log(\"IoT token remaining life: \"+Math.round(iotTokenBody.exp - Date.now()/1000) + \" seconds\");",
											"} else",
											"    console.log(\"IoT token: Unavailable\");",
											"",
											"if (accessToken) {",
											"    accessTokenBody = JSON.parse(CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse(accessToken.split('.')[1])));",
											"    console.log(\"Access token remaining life: \"+Math.round(accessTokenBody.exp - Date.now()/1000) + \" seconds\");",
											"} else",
											"    console.log(\"Access token: Unavailable\");",
											"",
											"console.log(\"Refresh token: \"+(refreshToken ? \"Available\" : \"Unavailable\"));",
											"",
											"if (iotTokenBody && iotTokenBody.exp > (Date.now() / 1000 + (60 * 60))) {",
											"    console.log(\"IoT token is fresh enough, not requesting new one\");",
											"    pm.test(\"Есть IoT токен, он действителен еще \"+(Math.floor((iotTokenBody.exp - Date.now() / 1000) / 60))+\" минут\", () => {});",
											"    postman.setNextRequest(\"Получение информации о платформе\");",
											"} else {",
											"    console.log(\"IoT token is about to expire, requesting new one\");",
											"",
											"    if (accessTokenBody && accessTokenBody.exp > (Date.now() / 1000 + (14 * 24 * 60 * 60))) {",
											"        console.log(\"Access token is fresh enough, not requesting new one\");",
											"        pm.test(\"Есть Access токен для получения IoT токена, он действителен еще \"+(Math.floor((accessTokenBody.exp - Date.now() / 1000) / 60 / 60))+\" часов\", () => {});",
											"        postman.setNextRequest(\"Получение токена для умного дома (при помощи access токена)\");",
											"    } else {",
											"        console.log(\"Access token is about to expire, requesting new one\");",
											"",
											"        if (refreshToken) {",
											"            pm.test(\"Есть Refresh токен для обновления остальных токенов\", () => {});",
											"            postman.setNextRequest(\"Обновление access токена (при помощи refresh токена)\");",
											"        } else {",
											"            pm.test(\"Проверка токенов\", () => pm.expect.fail(\"Все токены отсутствуют. Невозможно обновить токен автоматически, необходимо провести ручную авторизацию\"));",
											"            postman.setNextRequest(null);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://google.com/generate_204",
									"protocol": "http",
									"host": [
										"google",
										"com"
									],
									"path": [
										"generate_204"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление access токена (при помощи refresh токена)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    postman.setNextRequest(null);",
											"    pm.response.to.have.status(200);",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.test(\"Токены получены\", function () {",
											"    postman.setNextRequest(null);",
											"    pm.response.to.be.json;",
											"    pm.expect(pm.response.json().access_token).to.be.a(\"string\");",
											"    pm.expect(pm.response.json().refresh_token).to.be.a(\"string\");",
											"",
											"    pm.environment.set(\"sber_access_token\", pm.response.json().access_token);",
											"    pm.environment.set(\"sber_refresh_token\", pm.response.json().refresh_token);",
											"    console.log(`New refresh token: ${pm.response.json().refresh_token}`);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Sd-Uid",
										"value": "006e90fd-18ec-47ab-9f32-4755251f9152",
										"type": "text"
									},
									{
										"key": "Rquid",
										"value": "c0e0c571-01f4-4b06-aef4-8949d5d3a1ea",
										"type": "text"
									},
									{
										"key": "User-Agent",
										"value": "Salute+prod/23.06.1.12771+(Android+30;+Xiaomi+Redmi+Note+8+Pro)",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{sber_refresh_token}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://online.sberbank.ru:4431/CSAFront/api/service/oidc/v3/token",
									"protocol": "https",
									"host": [
										"online",
										"sberbank",
										"ru"
									],
									"port": "4431",
									"path": [
										"CSAFront",
										"api",
										"service",
										"oidc",
										"v3",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение токена для умного дома (при помощи access токена)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    postman.setNextRequest(null);",
											"    pm.response.to.have.status(200);",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.test(\"Токены получены\", function () {",
											"    postman.setNextRequest(null);",
											"    pm.response.to.be.json;",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");",
											"",
											"    pm.environment.set(\"sber_iot_access_token\", pm.response.json().token);",
											"    postman.setNextRequest(\"Получение информации о платформе\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sber_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://companionapp.online.sberbank.ru/v1/smarthome/token",
									"protocol": "https",
									"host": [
										"companionapp",
										"online",
										"sberbank",
										"ru"
									],
									"path": [
										"v1",
										"smarthome",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ручная авторизация (если не сработало автообновление токенов)",
					"item": [
						{
							"name": "Запрос СМС-кода",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Токены корректны\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(pm.response.json().ouid).to.be.a(\"string\");",
											"",
											"    pm.environment.set(\"sber_auth_ouid\", pm.response.json().ouid);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(strLength, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {",
											"    let randomStringOut = \"\";",
											"    for (let i = 0; i < strLength; i++)",
											"        randomStringOut += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
											"    return randomStringOut;",
											"}",
											"",
											"let code_verifier = randomString(64);",
											"pm.environment.set(\"sber_code_verifier\", code_verifier);",
											"let code_challenge =  CryptoJS.enc.Base64.stringify(CryptoJS.SHA256(code_verifier)).slice(0, -1).replaceAll('+', '-').replaceAll('/', '_');",
											"pm.environment.set(\"sber_code_challenge\", code_challenge);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Referer",
										"value": "https://online.sberbank.ru/CSAFront/oidc/authorize.do?client_id=b1f0f0c6-fcb0-4ece-8374-6b614ebe3d42&response_type=code&state=authFlowSalute20&nonce=5NYNAbBYkXj9gi831mN_aXqavg--qZjseZkMd_as_EblKXO2FjwyUaV9Qr8h-UFH&scope=openid+initial&redirect_uri=companionapp%3A%2F%2Fhost&code_challenge=vgWK3MdfBEB-C58zChGrz18GGVxDE5D7BmJaUDHzETc&code_challenge_method=S256&authApp=sbol&app_redirect_uri=companionapp%3A%2F%2FjustBackToApplication&partner_name=%D0%A1%D0%B0%D0%BB%D1%8E%D1%82%21+%D0%A3%D0%BC%D0%BD%D1%8B%D0%B9+%D0%B4%D0%BE%D0%BC",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\": {\n        \"type\": \"phone\",\n        \"data\": {\n            \"value\": \"79014528482\"\n        }\n    },\n    \"authenticator\": {\n        \"type\": \"sms_otp\",\n        \"data\": {}\n    },\n    \"channel\": {\n        \"type\": \"web\",\n        \"user_type\": \"private\",\n        \"data\": {\n            \"rsa_data\": {\n                \"dom_elements\": \"\",\n                \"htmlinjection\": \"\",\n                \"manvsmachinedetection\": \"\",\n                \"js_events\": \"\",\n                \"deviceprint\": \"version=1.7.3\"\n            },\n            \"oidc\": {\n                \"scope\": \"openid initial\",\n                \"response_type\": \"code\",\n                \"app_redirect_uri\": \"companionapp://justBackToApplication\",\n                \"redirect_uri\": \"companionapp://host\",\n                \"state\": \"WqTCfx4tJeZ6zHFaoNKlcGPHhPIlh60m\",\n                \"code_challenge_method\": \"S256\",\n                \"nonce\": \"QdPyHPZAPSPJSdSdL6ZV7Smrt3Ncv0mXQ8Uf90_4md_lmAHMsyGT6pJQ57qvCYDX\",\n                \"client_id\": \"b1f0f0c6-fcb0-4ece-8374-6b614ebe3d42\",\n                \"code_challenge\": \"LRTrTZC-bLgrbotu6LXxPThXkBCGMwDQ6ewjm6DuF7E\",\n                \"referer_uri\": \"android-app://com.salute.smarthome.prod/\"\n            },\n            \"browser\": \"Chrome\",\n            \"os\": \"Android 10\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://online.sberbank.ru/CSAFront/uapi/v2/authenticate",
									"protocol": "https",
									"host": [
										"online",
										"sberbank",
										"ru"
									],
									"path": [
										"CSAFront",
										"uapi",
										"v2",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отправка СМС-кода",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Токены корректны\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(pm.response.json().response_data.authcode).to.be.a(\"string\");",
											"",
											"    pm.environment.set(\"sber_auth_code\", pm.response.json().response_data.authcode);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Referer",
										"value": "https://online.sberbank.ru/CSAFront/oidc/authorize.do?client_id=b1f0f0c6-fcb0-4ece-8374-6b614ebe3d42&response_type=code&state=WqTCfx4tJeZ6zHFaoNKlcGPHhPIlh60m&nonce=QdPyHPZAPSPJSdSdL6ZV7Smrt3Ncv0mXQ8Uf90_4md_lmAHMsyGT6pJQ57qvCYDX&scope=openid+initial&redirect_uri=companionapp%3A%2F%2Fhost&code_challenge=ypWfufuBYby4UQX0QwjKAmq7lgdR6ldh4VZKnAeB1oY&code_challenge_method=S256&authApp=sbol&app_redirect_uri=companionapp%3A%2F%2FjustBackToApplication&partner_name=%D0%A1%D0%B0%D0%BB%D1%8E%D1%82%21+%D0%A3%D0%BC%D0%BD%D1%8B%D0%B9+%D0%B4%D0%BE%D0%BC",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\": {\n        \"type\": \"ouid\",\n        \"data\": {\n            \"value\": \"{{sber_auth_ouid}}\"\n        }\n    },\n    \"authenticator\": {\n        \"type\": \"sms_otp\",\n        \"data\": {\n            \"value\": \"44127\"\n        }\n    },\n    \"channel\": {\n        \"type\": \"web\",\n        \"data\": {\n            \"rsa_data\": {\n                \"dom_elements\": \"\",\n                \"htmlinjection\": \"\",\n                \"manvsmachinedetection\": \"\",\n                \"js_events\": \"\",\n                \"deviceprint\": \"version=1.7.3&pm_br=Chrome&pm_brmjv=115&iframed=0&intip=&pm_expt=&pm_fpacn=Mozilla&pm_fpan=Netscape&pm_fpasw=&pm_fpco=1&pm_fpjv=0&pm_fpln=lang=ru|syslang=|userlang=&pm_fpol=true&pm_fposp=&pm_fpsaw=393&pm_fpsbd=&pm_fpsc=24|393|851|851&pm_fpsdx=&pm_fpsdy=&pm_fpslx=&pm_fpsly=&pm_fpspd=24&pm_fpsui=&pm_fpsw=&pm_fptz=7&pm_fpua=mozilla/5.0 (linux; android 10; k) applewebkit/537.36 (khtml, like gecko) chrome/115.0.0.0 mobile safari/537.36|5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Mobile Safari/537.36|Linux armv81&pm_fpup=&pm_inpt=&pm_os=Android&adsblock=0=false|1=false|2=false|3=false|4=false&audio=baseLatency=0.005333333333333333|outputLatency=0|sampleRate=48000|state=suspended|maxChannelCount=2|numberOfInputs=1|numberOfOutputs=1|channelCount=2|channelCountMode=max|channelInterpretation=speakers|fftSize=2048|frequencyBinCount=1024|minDecibels=-100|maxDecibels=-30|smoothingTimeConstant=0.8&pm_fpsfse=true&webgl=ver=webgl2|vendor=ARM|render=Mali-G76 MC4\"\n            },\n            \"oidc\": {\n                \"scope\": \"openid initial\",\n                \"response_type\": \"code\",\n                \"app_redirect_uri\": \"companionapp://justBackToApplication\",\n                \"redirect_uri\": \"companionapp://host\",\n                \"state\": \"WqTCfx4tJeZ6zHFaoNKlcGPHhPIlh60m\",\n                \"code_challenge_method\": \"S256\",\n                \"nonce\": \"QdPyHPZAPSPJSdSdL6ZV7Smrt3Ncv0mXQ8Uf90_4md_lmAHMsyGT6pJQ57qvCYDX\",\n                \"client_id\": \"b1f0f0c6-fcb0-4ece-8374-6b614ebe3d42\",\n                \"code_challenge\": \"LRTrTZC-bLgrbotu6LXxPThXkBCGMwDQ6ewjm6DuF7E\",\n                \"referer_uri\": \"android-app://com.salute.smarthome.prod/\"\n            },\n            \"browser\": \"Chrome\",\n            \"os\": \"Android 10\",\n            \"set_cookie\": true\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://online.sberbank.ru/CSAFront/uapi/v2/verify",
									"protocol": "https",
									"host": [
										"online",
										"sberbank",
										"ru"
									],
									"path": [
										"CSAFront",
										"uapi",
										"v2",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение токена",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Токены корректны\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(pm.response.json().access_token).to.be.a(\"string\");",
											"    pm.expect(pm.response.json().refresh_token).to.be.a(\"string\");",
											"",
											"    pm.environment.set(\"sber_access_token\", pm.response.json().access_token);",
											"    pm.environment.set(\"sber_refresh_token\", pm.response.json().refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Sd-Uid",
										"value": "006e90fd-18ec-47ab-9f32-4755251f9152",
										"type": "text"
									},
									{
										"key": "Rquid",
										"value": "c0e0c571-01f4-4b06-aef4-8949d5d3a1ea",
										"type": "text"
									},
									{
										"key": "User-Agent",
										"value": "Salute+prod/23.06.1.12771+(Android+30;+Xiaomi+Redmi+Note+8+Pro)",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{sber_auth_code}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "ypWfufuBYby4UQX0QwjKAmq7lgdR6ldh4VZKnAeB1oY",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "b1f0f0c6-fcb0-4ece-8374-6b614ebe3d42",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "companionapp://host",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://online.sberbank.ru:4431/CSAFront/api/service/oidc/v3/token",
									"protocol": "https",
									"host": [
										"online",
										"sberbank",
										"ru"
									],
									"port": "4431",
									"path": [
										"CSAFront",
										"api",
										"service",
										"oidc",
										"v3",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение токена для умного дома",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Токены корректны\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");",
											"",
											"    pm.environment.set(\"sber_iot_access_token\", pm.response.json().token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sber_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://companionapp.online.sberbank.ru/v1/smarthome/token",
									"protocol": "https",
									"host": [
										"companionapp",
										"online",
										"sberbank",
										"ru"
									],
									"path": [
										"v1",
										"smarthome",
										"token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Подготовка контроллера",
			"item": [
				{
					"name": "Проверка настроек контроллера",
					"item": [
						{
							"name": "Получение информации о платформе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var sdk = require('postman-collection');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"ctl_port\", pm.response.json().ctlGatePort)",
											"pm.environment.set(\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/info",
									"host": [
										"{{host}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Создание MQTT устройств",
					"item": [
						{
							"name": "Создание реле RLY01",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{mqtt_sim_host}}/add_node/{{rly01_nodeId}}?brokerLogin={{rly01_nodeId}}&brokerPassword={{rly01_password}}&brokerURL={{ctl_host}}:8883",
									"host": [
										"{{mqtt_sim_host}}"
									],
									"path": [
										"add_node",
										"{{rly01_nodeId}}"
									],
									"query": [
										{
											"key": "brokerLogin",
											"value": "{{rly01_nodeId}}"
										},
										{
											"key": "brokerPassword",
											"value": "{{rly01_password}}"
										},
										{
											"key": "brokerURL",
											"value": "{{ctl_host}}:8883"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Выключение канала 1 на реле",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/0/position/0",
									"host": [
										"{{mqtt_sim_host}}"
									],
									"path": [
										"node",
										"{{rly01_nodeId}}",
										"channel",
										"0",
										"position",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Выключение канала 2 на реле",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/1/position/0",
									"host": [
										"{{mqtt_sim_host}}"
									],
									"path": [
										"node",
										"{{rly01_nodeId}}",
										"channel",
										"1",
										"position",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Создание датчиков",
					"item": [
						{
							"name": "Создание датчика открытия двери",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if (pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_mct\",\n    \"nodeId\": 6\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика движения и освещенности (Rev C)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if (pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_pir_rev_c\",\n    \"nodeId\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика протечки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if (pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 8\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика климата",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if (pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_air_htq01\",\n    \"nodeId\": 9\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика дыма",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if (pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_smk\",\n    \"nodeId\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика движения (Rev B)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if (pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_pir\",\n    \"nodeId\": 11\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Подключение контроллера",
					"item": [
						{
							"name": "Настройка виртуального контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Настройки применены\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if (pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"connected\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mac\": \"aa:bb:cc:dd:ee:ff\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/info",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Подключение виртуального контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function () { }, 15000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"o7\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/connect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"connect"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Проверка отслеживаемых устройств",
			"item": [
				{
					"name": "Получение списка групп",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Есть группа устройств\", function () {",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().result).to.be.a(\"array\");",
									"    pm.expect(pm.response.json().result.length).to.be.gte(1);",
									"    pm.expect(pm.response.json().result[0].id).to.be.a(\"string\");",
									"",
									"    pm.environment.set(\"sber_group_id\", pm.response.json().result[0].id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/device_groups",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"device_groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка устройств",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const referenceProperties = {",
									"    \"WLK rev A\": [\"online\", \"battery_percentage\", \"water_leak_state\"],",
									"    \"WLK rev B\": [\"online\", \"battery_percentage\", \"water_leak_state\"],",
									"    \"MCT rev A\": [\"online\", \"battery_percentage\", \"doorcontact_state\", \"temper_alarm\"],",
									"    \"MCT rev B\": [\"online\", \"battery_percentage\", \"doorcontact_state\", \"temper_alarm\"],",
									"    \"MCT rev C\": [\"online\", \"battery_percentage\", \"doorcontact_state\", \"temper_alarm\"],",
									"    \"PIR rev A\": [\"online\", \"battery_percentage\", \"pir\"],",
									"    \"PIR rev B\": [\"online\", \"battery_percentage\", \"pir\"],",
									"    \"PIR rev C\": [\"online\", \"battery_percentage\", \"pir\"],",
									"    \"PLG 01\": [\"online\", \"on_off\", \"cur_power\", \"cur_current\", \"cur_voltage\"],",
									"};",
									"",
									"const referenceCapabilities = {",
									"    \"PLG 01\": [\"on_off\"],",
									"};",
									"",
									"const trackedDevicesNames = {",
									"    \"sber_interact_mct_id\": \"Virtual MCT\",",
									"    \"sber_interact_pir_id\": \"Virtual PIR\",",
									"    \"sber_interact_pir_rev_b_id\": \"Virtual PIR Rev B\",",
									"    \"sber_interact_wlk_id\": \"Virtual WLK\",",
									"    \"sber_interact_air_id\": \"Virtual AIR\",",
									"    \"sber_interact_rly01_1_id\": \"Virtual RLY 01 Туалет\",",
									"    \"sber_interact_rly01_2_id\": \"Virtual RLY 01 Ванная\",",
									"}",
									"",
									"let house = null;",
									"let trackedDevices = [];",
									"let interactDevices = [];",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Есть комнаты для теста интеграций\", function () {",
									"    trackedDevices = pm.response.json().result.devices.filter(x => x.bridge_meta.external_home == \"Отслеживаемые\");",
									"    pm.expect(trackedDevices.length).to.be.gte(1, \"Нет отслеживаемых устройств\");",
									"",
									"    interactDevices = pm.response.json().result.devices.filter(x => x.bridge_meta.external_home == \"Манипулируемые\");",
									"    pm.expect(interactDevices.length).to.be.gte(1, \"Нет манипулируемых устройств\");",
									"",
									"    for(varName in trackedDevicesNames) {",
									"        let device = interactDevices.find(x => x.bridge_meta.external_name == trackedDevicesNames[varName]);",
									"        pm.expect(device).to.be.a(\"object\", \"Устройство \\\"\"+trackedDevicesNames[varName]+\"\\\" не найдено\");",
									"        pm.environment.set(varName, device.id)",
									"        pm.environment.set(\"sber_integration_id\", device.device_info.partner)",
									"    }",
									"});",
									"",
									"pm.test(\"В доме есть устройства\", function () {",
									"    pm.expect(trackedDevices).to.have.length.greaterThan(0, \"Нет отслеживаемых устройств\");",
									"    pm.expect(interactDevices).to.have.length.greaterThan(0, \"Нет манипулируемых устройств\");",
									"});",
									"",
									"",
									"pm.test(\"У всех отслеживаемых устройств есть требуемые свойства и умения\", function () {",
									"    pm.expect(trackedDevices).to.have.length.greaterThan(0, \"Нет отслеживаемых устройств\");",
									"    for (let deviceName of Object.keys(referenceProperties)) {",
									"        let refProps = referenceProperties[deviceName];",
									"        let device = trackedDevices.find(x => x.bridge_meta.external_name == deviceName)",
									"",
									"        pm.expect(device).to.not.eq(undefined, \"Устройство \\\"\" + deviceName + \"\\\" не найдено\");",
									"        for (let propName of refProps)",
									"            pm.expect(device.attributes.any(x => x.key == propName)).to.eq(true, \"На устройстве \\\"\" + deviceName + \"\\\" не найдено свойство \\\"\" + propName + \"\\\"\");",
									"    }",
									"    for (let deviceName of Object.keys(referenceCapabilities)) {",
									"        let refCaps = referenceCapabilities[deviceName];",
									"        let device = trackedDevices.find(x => x.bridge_meta.external_name == deviceName)",
									"",
									"        pm.expect(device).to.not.eq(undefined, \"Устройство \\\"\" + deviceName + \"\\\" не найдено\");",
									"        for (let capName of refCaps)",
									"            pm.expect(device.commands.any(x => x.key == capName)).to.eq(true, \"На устройстве \\\"\" + deviceName + \"\\\" не найдено умение \\\"\" + capName + \"\\\"\");",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Свойства всех отслеживаемых устройств обновлялись в последние сутки\", function () {",
									"    pm.expect(trackedDevices).to.have.length.greaterThan(0, \"Нет отслеживаемых устройств\");",
									"    for (let device of trackedDevices) {",
									"        pm.expect(Date.parse(device.sync_info.last_sync)).to.be.gte(Date.now() - (24 * 60 * 60 * 1000),",
									"                \"Устройства \\\"\" + device.bridge_meta.external_name + \"\\\" не обновлялось в течении суток\")",
									"",
									"        for (let prop of device.reported_state)",
									"            pm.expect(Date.parse(prop.last_sync)).to.be.gte(Date.now() - (24 * 60 * 60 * 1000),",
									"                \"Свойство \\\"\" + prop.key + \"\\\" устройства \\\"\" + device.bridge_meta.external_name + \"\\\" не обновлялось в течении суток\");",
									"    }",
									"});",
									"",
									"pm.test(\"Заряд батареи всех отслеживаемых устройств больше нуля\", function () {",
									"    pm.expect(trackedDevices).to.have.length.greaterThan(0, \"Нет отслеживаемых устройств\");",
									"    for (let device of trackedDevices) {",
									"        //Проверям, что у устройства действительно должен быть уровень заряда",
									"        if (referenceProperties[device.bridge_meta.external_name] == undefined || !referenceProperties[device.bridge_meta.external_name].includes(\"battery_percentage\"))",
									"            continue;",
									"",
									"        let batteryProp = device.reported_state.find(x => x.key == \"battery_percentage\");",
									"        pm.expect(batteryProp).to.not.eq(undefined, \"У устройства \\\"\" + device.name + \"\\\" отсутствуею уровень заряда батареи\");",
									"        pm.expect(parseInt(batteryProp.integer_value)).to.be.a(\"number\");",
									"        pm.expect(parseInt(batteryProp.integer_value)).to.be.greaterThan(0, \"Уровень заряда батареи устройства \\\"\" + device.bridge_meta.external_name + \"\\\" равен нулю\");",
									"    }",
									"});",
									"",
									"pm.test(\"Все отслеживаемые устройства в сети\", function () {",
									"    pm.expect(trackedDevices).to.have.length.greaterThan(0, \"Нет отслеживаемых устройств\");",
									"    for (let device of trackedDevices) {",
									"        let onlineProp = device.reported_state.find(x => x.key == \"online\");",
									"        pm.expect(onlineProp).to.not.eq(undefined, \"У устройства \\\"\" + device.name + \"\\\" отсутствует состояние\");",
									"        pm.expect(onlineProp.bool_value).to.be.a(\"boolean\");",
									"        pm.expect(onlineProp.bool_value).to.be.eq(true, \"Устройство \\\"\" + device.bridge_meta.external_name + \"\\\" не в сети\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/device_groups/tree?id={{sber_group_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"device_groups",
								"tree"
							],
							"query": [
								{
									"key": "id",
									"value": "{{sber_group_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка интеграции",
			"item": [
				{
					"name": "Запрос информации об интеграции",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://alcanvas.iot.sberdevices.ru/gateway/v1/synchronize/status?partner_id={{sber_integration_id}}",
							"protocol": "https",
							"host": [
								"alcanvas",
								"iot",
								"sberdevices",
								"ru"
							],
							"path": [
								"gateway",
								"v1",
								"synchronize",
								"status"
							],
							"query": [
								{
									"key": "partner_id",
									"value": "{{sber_integration_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка уровня заряда батареи",
			"item": [
				{
					"name": "Изменение уровня заряда батареи датчика открытия до 10% Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"batteryVoltage\": 2300\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всей информации об устройстве",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { \"battery_percentage\": '10', 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck))",
									"    {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_mct_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_mct_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение уровня заряда батареи датчика открытия до 100% Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"batteryVoltage\": 3200\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всей информации об устройстве Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { \"battery_percentage\": '100', 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck))",
									"    {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_mct_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_mct_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка состояния устройства",
			"item": [
				{
					"name": "Выключение питания устройства Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 1000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/11/power",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"11",
								"power"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка недоступности устройства",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'online': false };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_pir_rev_b_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_pir_rev_b_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Включание питания устройства Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 1000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/11/power",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"11",
								"power"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка доступности устройства",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_pir_rev_b_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_pir_rev_b_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение контроллера Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 1000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"o7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/disconnect",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"disconnect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка недоступности устройства",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'online': false };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_pir_rev_b_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_pir_rev_b_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подключение контроллера Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"o7\",\n    \"allowMultiple\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/connect",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"connect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка доступности устройства",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_pir_rev_b_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_pir_rev_b_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка датчика открытия",
			"item": [
				{
					"name": "Нормализация датчика открытия (после подключения контроллера)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"off\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6/prop/0/openClose",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6",
								"prop",
								"0",
								"openClose"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сработка датчика открытия Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"on\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6/prop/0/openClose",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6",
								"prop",
								"0",
								"openClose"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка сработки датчика открытия после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'doorcontact_state': true, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck))",
									"    {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_mct_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_mct_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Нормализация датчика открытия Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"off\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6/prop/0/openClose",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6",
								"prop",
								"0",
								"openClose"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка нормализации датчика открытия после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'doorcontact_state': false, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck))",
									"    {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_mct_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_mct_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка датчика движения",
			"item": [
				{
					"name": "Сработка датчика движения Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"on\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/7/prop/0/motion",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"7",
								"prop",
								"0",
								"motion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка сработки датчика движения после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'pir': 'pir', 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck))",
									"    {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_pir_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_pir_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Нормализация датчика движения Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"off\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/7/prop/0/motion",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"7",
								"prop",
								"0",
								"motion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка нормализации датчика движения после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'pir': 'pir' };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Проперти НЕ обновилось в течении прошлых 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck))",
									"    {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        console.log(`Проперти обновилось за ${currentTime - propertyUpdateTime } мс`);",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime - 1000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_pir_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_pir_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка датчика протечки",
			"item": [
				{
					"name": "Сработка датчика протечки Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"on\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/8/prop/0/waterLeak",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"8",
								"prop",
								"0",
								"waterLeak"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка сработки датчика протечки после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'water_leak_state': true, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck))",
									"    {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_wlk_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_wlk_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Нормализация датчика протечки Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"off\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/8/prop/0/waterLeak",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"8",
								"prop",
								"0",
								"waterLeak"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка нормализации датчика протечки после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'water_leak_state': false, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase()+\"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\"+property+\"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck))",
									"    {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\"+property+\"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_wlk_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_wlk_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка датчика климата",
			"item": [
				{
					"name": "Изменение уровня влажности до 100%",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/9/prop/1/humidity",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"9",
								"prop",
								"1",
								"humidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение температуры до 40 °C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 8000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": 40\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/9/prop/1/temperature",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"9",
								"prop",
								"1",
								"temperature"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка параметров датчика климата после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'temperature': 40, 'humidity': 100, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_air_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_air_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение уровня влажности до 40%",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": 40\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/9/prop/1/humidity",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"9",
								"prop",
								"1",
								"humidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение температуры до 26 °C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 8000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": 26\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/9/prop/1/temperature",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"9",
								"prop",
								"1",
								"temperature"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка параметров датчика климата после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'temperature': 26, 'humidity': 40, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_air_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_air_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка реле",
			"item": [
				{
					"name": "Включение канала 1 на реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/0/position/1",
							"host": [
								"{{mqtt_sim_host}}"
							],
							"path": [
								"node",
								"{{rly01_nodeId}}",
								"channel",
								"0",
								"position",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка включения канала 1 на реле после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'on_off': true, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_1_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Выключение канала 1 на реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/0/position/0",
							"host": [
								"{{mqtt_sim_host}}"
							],
							"path": [
								"node",
								"{{rly01_nodeId}}",
								"channel",
								"0",
								"position",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка выключения канала 1 на реле после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'on_off': false, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_1_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Включение канала 2 на реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/1/position/1",
							"host": [
								"{{mqtt_sim_host}}"
							],
							"path": [
								"node",
								"{{rly01_nodeId}}",
								"channel",
								"1",
								"position",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка включения канала 2 на реле после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'on_off': true, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_2_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Выключение канала 2 на реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/1/position/0",
							"host": [
								"{{mqtt_sim_host}}"
							],
							"path": [
								"node",
								"{{rly01_nodeId}}",
								"channel",
								"1",
								"position",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка выключения канала 2 на реле после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'on_off': false, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_2_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос на включение канала 1 на реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"desired_state\": [\n        {\n            \"bool_value\": true,\n            \"key\": \"on_off\",\n            \"type\": \"BOOL\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_1_id}}/state",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_1_id}}",
								"state"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка включения канала 1 на реле после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'on_off': true, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_1_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка включения канала 1 со стороны реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let expectedState = \"1\";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Канал реле имеет ожидаемое состояние\", function () {",
									"    pm.expect(pm.response.text()).to.eq(expectedState);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/0/state",
							"host": [
								"{{mqtt_sim_host}}"
							],
							"path": [
								"node",
								"{{rly01_nodeId}}",
								"channel",
								"0",
								"state"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос на выключение канала 1 на реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"desired_state\": [\n        {\n            \"bool_value\": false,\n            \"key\": \"on_off\",\n            \"type\": \"BOOL\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_1_id}}/state",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_1_id}}",
								"state"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка выключения канала 1 на реле после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'on_off': false, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_1_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка выключения канала 1 со стороны реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let expectedState = \"0\";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Канал реле имеет ожидаемое состояние\", function () {",
									"    pm.expect(pm.response.text()).to.eq(expectedState);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/0/state",
							"host": [
								"{{mqtt_sim_host}}"
							],
							"path": [
								"node",
								"{{rly01_nodeId}}",
								"channel",
								"0",
								"state"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос на включение канала 2 на реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"desired_state\": [\n        {\n            \"bool_value\": true,\n            \"key\": \"on_off\",\n            \"type\": \"BOOL\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_2_id}}/state",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_2_id}}",
								"state"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка включения канала 2 на реле после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'on_off': true, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_2_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка включения канала 2 со стороны реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let expectedState = \"1\";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Канал реле имеет ожидаемое состояние\", function () {",
									"    pm.expect(pm.response.text()).to.eq(expectedState);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/1/state",
							"host": [
								"{{mqtt_sim_host}}"
							],
							"path": [
								"node",
								"{{rly01_nodeId}}",
								"channel",
								"1",
								"state"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос на выключение канала 2 на реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function () { }, 5000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"desired_state\": [\n        {\n            \"bool_value\": false,\n            \"key\": \"on_off\",\n            \"type\": \"BOOL\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_2_id}}/state",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_2_id}}",
								"state"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка выключения канала 2 на реле после обновления состояния",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertiesCheck = { 'on_off': false, 'online': true };",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Значение проперти совпадает с ожидаемым\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        pm.expect(stateItem[stateItem.type.toLowerCase() + \"_value\"]).to.be.eq(propertiesCheck[property], \"Значение проперти \\\"\" + property + \"\\\" не совпадает с ожидаемым\");",
									"    }",
									"});",
									"",
									"pm.test(\"Проперти обновилось в течении 3-х секунд\", function () {",
									"    for (let property of Object.keys(propertiesCheck)) {",
									"        let state = pm.response.json().result.reported_state;",
									"        let stateItem = state.find(x => x.key == property);",
									"        let propertyUpdateTime = Date.parse(stateItem.last_sync);",
									"        let currentTime = pm.environment.get(\"current_time\");",
									"        pm.expect(propertyUpdateTime).to.be.gte(currentTime - 1000, \"Платформа не сообщила УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        pm.expect(propertyUpdateTime).to.be.lte(currentTime + 3000, \"Платформа опоздала с сообщением УД Сбер об изменении проперти \\\"\" + property + \"\\\"\");",
									"        console.log(`Проперти обновилось за ${propertyUpdateTime - currentTime} мс`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sber_host}}/devices/{{sber_interact_rly01_2_id}}",
							"host": [
								"{{sber_host}}"
							],
							"path": [
								"devices",
								"{{sber_interact_rly01_2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка выключения канала 2 со стороны реле",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let expectedState = \"0\";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Канал реле имеет ожидаемое состояние\", function () {",
									"    pm.expect(pm.response.text()).to.eq(expectedState);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mqtt_sim_host}}/node/{{rly01_nodeId}}/channel/1/state",
							"host": [
								"{{mqtt_sim_host}}"
							],
							"path": [
								"node",
								"{{rly01_nodeId}}",
								"channel",
								"1",
								"state"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Завершение",
			"item": [
				{
					"name": "Отключение контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"o7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/disconnect",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"disconnect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика открытия двери",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if (pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика движения и освещенности (Rev C)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if (pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/devices/7",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Делете датчика протечки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if (pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/devices/8",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика климата",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if (pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/devices/9",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика дыма",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if (pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/devices/10",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика движения (Rev B)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if (pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/devices/11",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"11"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{sber_iot_access_token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-Auth-Jwt",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "sber_host",
			"value": "https://gateway.iot.sberdevices.ru/gateway/v1",
			"type": "string"
		},
		{
			"key": "rly01_nodeId",
			"value": "cf4950fa-dd45-4e5b-b723-41f39f371709",
			"type": "string"
		},
		{
			"key": "rly01_password",
			"value": "556qGC1483YlXHmEbkb53O2K21dj8B1q",
			"type": "string"
		}
	]
}