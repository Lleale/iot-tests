{
	"info": {
		"_postman_id": "b6fe9c01-2134-4f47-9688-64e784eef883",
		"name": "test_Саморегистрация и восстановление пароля",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16511326"
	},
	"item": [
		{
			"name": "Саморегистрация и восстановление пароля",
			"item": [
				{
					"name": "Саморегистрация",
					"item": [
						{
							"name": "1.Запрос_на_генерацию_капчи",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set(\"captcha_id\", pm.response.json().id);",
											"postman.setNextRequest(\"2.Расшифровать_капчу\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"media\": \"image/png\",\n    \"size\": \"270x40\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/captcha/generate",
									"host": [
										"{{host}}"
									],
									"path": [
										"captcha",
										"generate"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.Расшифровать_капчу",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let host = pm.globals.get(\"host\");",
											"// host = host.split(\"/\")[2].split(\":\")[0] + \":\" + pm.globals.get(\"https_port\");    ",
											"host = host.split(\"/\")[2].split(\":\")[0] ;    ",
											"pm.environment.set(\"host_cap\", host);",
											"console.log(host)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"answer\", pm.response.json().answer);",
											"postman.setNextRequest(\"3.registration\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":\"{{captcha_id}}\",\n    \"host\":\"{{host_cap}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tesseract_server}}/captcha",
									"host": [
										"{{tesseract_server}}"
									],
									"path": [
										"captcha"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 403){",
											"    postman.setNextRequest(\"1.Запрос_на_генерацию_капчи\");",
											"}",
											"else{",
											"    pm.test(\"Status code is 204\", function () {",
											"        pm.response.to.have.status(204);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"123string@mail\",\n    \"loginType\": \"EMAIL\",\n    \"password\": \"123A123a\",\n    \"language\": \"ru\",\n    \"captchaId\": \"{{captcha_id}}\",\n    \"captchaAnswer\": \"{{answer}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registration",
									"host": [
										"{{host}}"
									],
									"path": [
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос на postman-mongo-proxy (подлкючени к БД)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let host = pm.globals.get(\"host\");",
											"host = host.split(\"/\")[2].split(\":\")[0]",
											"pm.environment.set(\"host_db\", host);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\":\"{{host_db}}\",\n    \"port\":\"{{db_port}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mongo_proxy_host}}/url",
									"host": [
										"{{mongo_proxy_host}}"
									],
									"path": [
										"url"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос на postman-mongo-proxy вытаскиваем из DB confirmToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"id\", pm.response.json()[pm.response.json().length - 1].userId);",
											"pm.environment.set(\"confirmToken\", pm.response.json()[pm.response.json().length - 1].token);",
											"// var max_expiryDate = parseInt(pm.response.json()[0].expiryDate)",
											"// pm.environment.set(\"confirmToken\", pm.response.json()[0].token);",
											"// pm.environment.set(\"id\", pm.response.json()[0].userId);",
											"// for(let i in pm.response.json()){",
											"//     if (max_expiryDate < parseInt(pm.response.json()[i].expiryDate)){",
											"//         pm.environment.set(\"confirmToken\", pm.response.json()[i].token);",
											"//         pm.environment.set(\"id\", pm.response.json()[i].userId);",
											"//     }",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dbName\":\"iot-core\",\n    \"collection\":\"confirmTokens\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mongo_proxy_host}}/find_all",
									"host": [
										"{{mongo_proxy_host}}"
									],
									"path": [
										"find_all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Подтверждение нового аккаунта",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Проверка полей username, email и password\", function () {",
											"    pm.expect(pm.response.json().username).to.eql(\"123string@mail\");",
											"    pm.expect(pm.response.json().email).to.eql(\"123string@mail\");",
											"    pm.expect(pm.response.json().password).to.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{confirmToken}}\",\n    \"id\": \"{{id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registration/confirm",
									"host": [
										"{{host}}"
									],
									"path": [
										"registration",
										"confirm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Восстановление пароля",
					"item": [
						{
							"name": "1.Запрос_на_генерацию_капчи_для_смены_пароля",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set(\"captcha_id\", pm.response.json().id);",
											"postman.setNextRequest(\"2.Расшифровать_капчу_для_смены_пароля\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"media\": \"image/png\",\n    \"size\": \"270x40\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/captcha/generate",
									"host": [
										"{{host}}"
									],
									"path": [
										"captcha",
										"generate"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.Расшифровать_капчу_для_смены_пароля",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let host = pm.globals.get(\"host\");",
											"// host = host.split(\"/\")[2].split(\":\")[0] + \":\" + pm.globals.get(\"https_port\");    ",
											"host = host.split(\"/\")[2].split(\":\")[0] ;",
											"pm.environment.set(\"host_cap\", host);",
											"console.log(host)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"answer\", pm.response.json().answer);",
											"postman.setNextRequest(\"3.password_recovery\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":\"{{captcha_id}}\",\n    \"host\":\"{{host_cap}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tesseract_server}}/captcha",
									"host": [
										"{{tesseract_server}}"
									],
									"path": [
										"captcha"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.password_recovery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 403){",
											"    postman.setNextRequest(\"1.Запрос_на_генерацию_капчи_для_смены_пароля\");",
											"}",
											"else{",
											"    pm.test(\"Status code is 204\", function () {",
											"        pm.response.to.have.status(204);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"method\": \"email\",\n    \"identity\": \"123string@mail\",\n    \"platform\": \"web\",\n    \"captchaId\": \"{{captcha_id}}\",\n    \"captchaAnswer\": \"{{answer}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/password/recovery",
									"host": [
										"{{host}}"
									],
									"path": [
										"password",
										"recovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос на postman-mongo-proxy (подлкючени к БД)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let host = pm.globals.get(\"host\");",
											"host = host.split(\"/\")[2].split(\":\")[0]",
											"pm.environment.set(\"host_db\", host);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\":\"{{host_db}}\",\n    \"port\":\"{{db_port}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mongo_proxy_host}}/url",
									"host": [
										"{{mongo_proxy_host}}"
									],
									"path": [
										"url"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос на postman-mongo-proxy вытаскиваем из DB confirmToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"id\", pm.response.json()[pm.response.json().length - 1].userId);",
											"pm.environment.set(\"confirmToken\", pm.response.json()[pm.response.json().length - 1].token);",
											"// var max_expiryDate = parseInt(pm.response.json()[0].expiryDate)",
											"// pm.environment.set(\"confirmToken\", pm.response.json()[0].token);",
											"// pm.environment.set(\"id\", pm.response.json()[0].userId);",
											"// for(let i in pm.response.json()){",
											"//     if (max_expiryDate < parseInt(pm.response.json()[i].expiryDate)){",
											"//         pm.environment.set(\"confirmToken\", pm.response.json()[i].token);",
											"//         pm.environment.set(\"id\", pm.response.json()[i].userId);",
											"//     }",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dbName\":\"iot-core\",\n    \"collection\":\"confirmTokens\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mongo_proxy_host}}/find_all",
									"host": [
										"{{mongo_proxy_host}}"
									],
									"path": [
										"find_all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Установка нового пароля",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"123Aa777\",\n    \"token\": \"{{confirmToken}}\",\n    \"identityType\": \"id\",\n    \"identity\": \"{{id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/password/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"password",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверить смену пароля",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var admin_js = {",
											"\"required\": [",
											"        \"access_token\",",
											"        \"token_type\",",
											"        \"refresh_token\",",
											"        \"expires_in\",",
											"    ],",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\",",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123string@mail",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123Aa777",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/oauth2/token(admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"var scheme = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"access_token\",",
									"        \"refresh_token\",",
									"        \"token_type\",",
									"        \"expires_in\"",
									"    ],",
									"    \"additionalProperties\": true,",
									"    \"properties\": {",
									"        \"access_token\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"refresh_token\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"token_type\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"expires_in\": {",
									"            \"type\": \"integer\"",
									"        }",
									"    }",
									"};",
									"pm.test('JSON is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
									"});",
									"",
									"} ",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test18plat34Form",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth2/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "удалить пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь удален (код 204)\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}