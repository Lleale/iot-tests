{
	"info": {
		"_postman_id": "38c1bd30-d164-4393-9035-b814dc6a0e21",
		"name": "t_это_связано_с_Flussonic_или_устарело",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16511326"
	},
	"item": [
		{
			"name": "Контроллер для работы с камерами",
			"item": [
				{
					"name": "0. Создать пользователя и т.д.",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mailATc1a2m3era.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"ATc1a2m3era\",\n    \"password\": \"ATc1a2m3era\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"ATc1a2m3era\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "ATc1a2m3era",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ATc1a2m3era",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
											"",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"variables\",",
											"            \"dashboardItems\",",
											"            \"houseGroups\",",
											"            \"guards\",",
											"            \"title\",",
											"            \"ownerId\",",
											"            \"address\",",
											"            \"apartment\",",
											"            \"timeZone\",",
											"            \"type\",",
											"            \"startTime\",",
											"            \"guardStatus\",",
											"            \"underGuard\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"variables\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"dashboardItems\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"houseGroups\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"guards\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"ownerId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"address\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"apartment\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"timeZone\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"startTime\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"guardStatus\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"underGuard\": {",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    }",
											"",
											"",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful request (checking the code)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Контроллер для работы с камерами",
					"item": [
						{
							"name": "Отвязать от видеоплатформы ELTEX",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{id}}?platformType=ELTEX",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "ELTEX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding a user to the video platform.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "FLUSSONIC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Увеличить лимит камер пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newLimit\": 1,\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск камеры с прошивкой flussonic-agent.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 403\", function () {",
											"        pm.response.to.have.status(403);",
											"    });",
											"",
											"    pm.test(\"Проверка возвращаемого сообщения\",  () => {",
											"        pm.expect(pm.response.json().message).to.equal(\"Camera searching is not available for user\");",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/agent/agentId",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"agent",
										"agentId"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding a camera to the platform.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    // \"type\": \"null\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"motionDelay\": {",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка наличия полей id и token и их типа. Проверка значения поля rtspStream.\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string;",
											"    pm.expect(pm.response.json()).to.have.property('token');",
											"    pm.expect(pm.response.json().token).to.string;",
											"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting information from the camera.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"web\",",
											"                \"mobile\",",
											"                \"flussonicPreview\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"web\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"mobile\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"flussonicPreview\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    // \"type\": \"null\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"motionDelay\": {",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей id, rtspStream, houseId. Проверка наличия и типа полей streamUrl.web, streamUrl.mobile и token\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string;",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"cameraId\"));",
											"    ",
											"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseId\"));",
											"",
											"    pm.expect(pm.response.json().streamUrl).to.have.property('web');",
											"    pm.expect(pm.response.json().streamUrl.web).to.string;",
											"",
											"    pm.expect(pm.response.json().streamUrl).to.have.property('mobile');",
											"    pm.expect(pm.response.json().streamUrl.mobile).to.string;",
											"",
											"    pm.expect(pm.response.json().token).to.string;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/{{cameraId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"{{cameraId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request all cameras of the current user.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"additionalItems\": true,",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"title\",",
											"            \"houseId\",",
											"            \"rtspStream\",",
											"            \"platformType\",",
											"            \"videoOnly\",",
											"            \"ptz\",",
											"            \"streamUrl\",",
											"            \"status\",",
											"            \"deviceLocation\",",
											"            \"enabled\",",
											"            \"dvr\",",
											"            \"motionDetectorEnabled\",",
											"            \"agentId\",",
											"            \"token\",",
											"            \"motionDelay\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"houseId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"rtspStream\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"platformType\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"videoOnly\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"ptz\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"streamUrl\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"flussonicPreview\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"flussonicPreview\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"deviceLocation\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"dvr\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"dvrDepth\",",
											"                    \"dvrSpace\",",
											"                    \"dvrLockDays\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"dvrDepth\": {",
											"                        // \"type\": \"null\"",
											"                    },",
											"                    \"dvrSpace\": {",
											"                        // \"type\": \"null\"",
											"                    },",
											"                    \"dvrLockDays\": {",
											"                        // \"type\": \"null\"",
											"                    }",
											"                }",
											"            },",
											"            \"motionDetectorEnabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"agentId\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"motionDelay\": {",
											"            }",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting a stream for the web interface.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Проверка поля message\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"    pm.expect(pm.response.json().message).to.string;",
											"    // pm.expect(pm.response.json().message).to.equal(\"Unsupported getting stream from flussonic!\");",
											"    pm.expect(pm.response.json().message).to.equal(\"Unsupported getting stream in class: FlussonicService\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras/{{cameraId}}/stream",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"{{cameraId}}",
										"stream"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting an hls stream for a mobile application.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Проверка поля message\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"    pm.expect(pm.response.json().message).to.string;",
											"    pm.expect(pm.response.json().message).to.equal(\"Unsupported getting hls stream from flussonic!\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras/{{cameraId}}/hlsStream",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"{{cameraId}}",
										"hlsStream"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editing the camera on the platform.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    // \"type\": \"null\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"motionDelay\": {",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей id, title, houseId, platformType, rtspStream, ptz и типа поля token\",  () => {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"cameraId\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"2\");",
											"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseId\"));",
											"    pm.expect(pm.response.json().platformType).to.equal(\"FLUSSONIC\");",
											"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"    pm.expect(pm.response.json().ptz).to.equal(true);",
											"    pm.expect(pm.response.json().token).to.string;    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{cameraId}}\",\n    \"title\": \"2\",\n    \"houseId\": \"{{houseId}}\",\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"platformType\": \"FLUSSONIC\",\n    \"videoOnly\": false,\n    \"ptz\": true,\n    \"streamUrl\": null,\n    \"status\": \"OFFLINE\",\n    \"deviceLocation\": [],\n    \"enabled\": true,\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"agentId\": null,\n    \"token\": \"2.KLkipgRHAGcABf8_Eb1WmiaHiOQfZsAJEXGz85ZzqO8ImYqc\",\n    \"motionDelay\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/{{cameraId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"{{cameraId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a home (2           houseIdd)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable (\"houseIdd\", jsonData.id);",
											"",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"variables\",",
											"            \"dashboardItems\",",
											"            \"houseGroups\",",
											"            \"guards\",",
											"            \"title\",",
											"            \"ownerId\",",
											"            \"address\",",
											"            \"apartment\",",
											"            \"timeZone\",",
											"            \"type\",",
											"            \"startTime\",",
											"            \"guardStatus\",",
											"            \"underGuard\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"variables\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"dashboardItems\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"houseGroups\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"guards\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"ownerId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"address\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"apartment\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"timeZone\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"startTime\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"guardStatus\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"underGuard\": {",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"2\",\n    \"type\": \"HOUSE\",\n    \"address\": \"2\",\n    \"apartment\": \"2\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Moving the camera from one house to another.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    // \"type\": \"null\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"motionDelay\": {",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей id, title, houseId, platformType, rtspStream, ptz и типа поля token\",  () => {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"cameraId\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"2\");",
											"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseIdd\"));",
											"    pm.expect(pm.response.json().platformType).to.equal(\"FLUSSONIC\");",
											"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"    pm.expect(pm.response.json().ptz).to.equal(true);",
											"    pm.expect(pm.response.json().token).to.string;    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras/flussonic/move/{{cameraId}}?houseId={{houseIdd}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"flussonic",
										"move",
										"{{cameraId}}"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{houseIdd}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "changeLimit  2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 2,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request all cameras at home.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"The data is empty\",  () => {",
											"    pm.expect(pm.response.json().length).to.equal(0);  ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"right\": 60,\n    \"down\": 25\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/houses/{{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"houses",
										"{{houseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generating a QR code to add a flussonic camera.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка корректности QR кода\",  () => {",
											"var name_and_password = \"name\\npassword\" + pm.response.text().slice(pm.response.text().indexOf('\\n', 13));",
											"pm.environment.set(\"QR\", pm.response.text().slice(pm.response.text().indexOf('\\n', 13) + 1) );",
											"",
											"for(let key in pm.response.text()) {        ",
											"    pm.expect(pm.response.text()[key]).to.equal(name_and_password[key]);    ",
											"}",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"houseId\": \"{{houseId}}\",\n  \"title\": \"string\",\n  \"wifiName\": \"name\",\n  \"wifiPassword\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/flussonic/generateQr",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"flussonic",
										"generateQr"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generating a QR code to add a flussonic camera. (New QR code ?)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка корректности QR кода\",  () => {",
											"let name_and_password = \"name\\npassword\" + pm.response.text().slice(pm.response.text().indexOf('\\n', 13));",
											"for(let key in pm.response.text()) {        ",
											"    pm.expect(pm.response.text()[key]).to.equal(name_and_password[key]);    ",
											"}",
											"});",
											"",
											"pm.test(\"A new QR code? (сравниваем старый и новый QR\",  () => {",
											"pm.expect(pm.response.text().slice(pm.response.text().indexOf('\\n', 13) + 1)).to.not.equal(pm.environment.get(\"QR\"));  ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"houseId\": \"{{houseId}}\",\n  \"title\": \"string\",\n  \"wifiName\": \"name\",\n  \"wifiPassword\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/flussonic/generateQr",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"flussonic",
										"generateQr"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeLimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 1,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding a camera to the platform. Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"    pm.test(\"Status code is 402\", function () {",
											"        pm.response.to.have.status(402);",
											"    });",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"message\"",
											"    ],",
											"    \"properties\": {",
											"        \"message\": {",
											"            \"$id\": \"#/properties/message\",",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeLimit Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 2,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка лимита камер (должно быть 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"",
											"pm.test(\"Проверка лимита камер.\",  () => {",
											"    pm.expect(pm.response.json().videoParameters.cameraLimits.FLUSSONIC.cameraLimit).to.equal(2);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding a camera to the platform. Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    // \"type\": \"null\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"motionDelay\": {",
											"",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка наличия полей id и token и их типа. Проверка значения поля rtspStream.\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string;",
											"    pm.expect(pm.response.json()).to.have.property('token');",
											"    pm.expect(pm.response.json().token).to.string;",
											"    ",
											"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"    ",
											"",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request all cameras at home.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверка количества камер. Проверка наличия и типа полей id и token. Проверка полей title, rtspStream, houseId и streamUrl\",  () => {",
											"    pm.expect(pm.response.json().length).to.equal(1);",
											"",
											"    pm.expect(pm.response.json()[0]).to.have.property('id');",
											"    pm.expect(pm.response.json()[0].id).to.string;",
											"    pm.expect(pm.response.json()[0]).to.have.property('token');",
											"    pm.expect(pm.response.json()[0].token).to.string;",
											"",
											"    pm.expect(pm.response.json()[0].title).to.equal(\"1\");",
											"    pm.expect(pm.response.json()[0].rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");    ",
											"    pm.expect(pm.response.json()[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
											"    pm.expect(pm.response.json()[0].streamUrl).to.have.property('flussonicPreview');   ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"right\": 60,\n    \"down\": 25\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/houses/{{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"houses",
										"{{houseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Removing the camera.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка ответа (должно быть true)\",  () => {",
											"    pm.expect(pm.response.text()).to.equal(\"true\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras/{{cameraId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"{{cameraId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Requesting all cameras at home (checking for deletion)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"The data is empty\",  () => {",
											"    pm.expect(pm.response.json().length).to.equal(0);  ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"right\": 60,\n    \"down\": 25\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/houses/{{houseIdd}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"houses",
										"{{houseIdd}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Тесты лимита камер",
					"item": [
						{
							"name": "Adding a camera to the platform. Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"cameraId2\", jsonData.id);",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    // \"type\": \"null\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"motionDelay\": {",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка наличия полей id и token и их типа. Проверка значения поля rtspStream.\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string;",
											"    pm.expect(pm.response.json()).to.have.property('token');",
											"    pm.expect(pm.response.json().token).to.string;",
											"    ",
											"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"    ",
											"",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"title\": \"2\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseIdd}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeLimit  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 1,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request all cameras of the current user. Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"additionalItems\": true,",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"title\",",
											"            \"houseId\",",
											"            \"rtspStream\",",
											"            \"platformType\",",
											"            \"videoOnly\",",
											"            \"ptz\",",
											"            \"streamUrl\",",
											"            \"status\",",
											"            \"deviceLocation\",",
											"            \"enabled\",",
											"            \"dvr\",",
											"            \"motionDetectorEnabled\",",
											"            \"agentId\",",
											"            \"token\",",
											"            \"motionDelay\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"houseId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"rtspStream\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"platformType\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"videoOnly\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"ptz\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"streamUrl\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"flussonicPreview\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"flussonicPreview\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"deviceLocation\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"dvr\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"dvrDepth\",",
											"                    \"dvrSpace\",",
											"                    \"dvrLockDays\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"dvrDepth\": {",
											"                        // \"type\": \"null\"",
											"                    },",
											"                    \"dvrSpace\": {",
											"                        // \"type\": \"null\"",
											"                    },",
											"                    \"dvrLockDays\": {",
											"                        // \"type\": \"null\"",
											"                    }",
											"                }",
											"            },",
											"            \"motionDetectorEnabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"agentId\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"motionDelay\": {",
											"            }",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test('Проверка поля enabled камер (так как камеры превышают лимит, лишние камеры \"enabled\": false) ',  () => {",
											"    let cameras_enabled_true = 0;",
											"    for (let i = 0; i < pm.response.json().length; i++){",
											"        if (pm.response.json()[i].enabled === true) {cameras_enabled_true++}        ",
											"    }",
											"    pm.expect(cameras_enabled_true).to.equal(1);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeLimit  2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 2,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request all cameras of the current user. Copy 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"additionalItems\": true,",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"title\",",
											"            \"houseId\",",
											"            \"rtspStream\",",
											"            \"platformType\",",
											"            \"videoOnly\",",
											"            \"ptz\",",
											"            \"streamUrl\",",
											"            \"status\",",
											"            \"deviceLocation\",",
											"            \"enabled\",",
											"            \"dvr\",",
											"            \"motionDetectorEnabled\",",
											"            \"agentId\",",
											"            \"token\",",
											"            \"motionDelay\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"houseId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"rtspStream\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"platformType\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"videoOnly\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"ptz\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"streamUrl\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"flussonicPreview\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"flussonicPreview\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"deviceLocation\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"dvr\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"dvrDepth\",",
											"                    \"dvrSpace\",",
											"                    \"dvrLockDays\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"dvrDepth\": {",
											"                        // \"type\": \"null\"",
											"                    },",
											"                    \"dvrSpace\": {",
											"                        // \"type\": \"null\"",
											"                    },",
											"                    \"dvrLockDays\": {",
											"                        // \"type\": \"null\"",
											"                    }",
											"                }",
											"            },",
											"            \"motionDetectorEnabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"agentId\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"motionDelay\": {",
											"            }",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test('Проверка поля enabled камер (камеры которые превышали лимит должны включится) ',  () => {",
											"    let cameras_enabled_true = 0;",
											"    for (let i = 0; i < pm.response.json().length; i++){",
											"        if (pm.response.json()[i].enabled === true) {cameras_enabled_true++}        ",
											"    }",
											"    pm.expect(cameras_enabled_true).to.equal(2);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Untie the user flussonic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/flussonic/users/untie/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"untie",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск пользователя Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [100]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/flussonic/users/find?login=ATc1a2m3era",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"find"
									],
									"query": [
										{
											"key": "login",
											"value": "ATc1a2m3era"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "flussonic/users/synchronize",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [100]);",
											"// var url = pm.globals.get(\"host\") + \"/flussonic/users/find?login=ATc1a2m3era\";",
											"// var Au = \"Bearer \" + pm.environment.get(\"access_token\");",
											"// const preRequest = {",
											"//   url : url,",
											"//   method: 'GET',",
											"//   header: {",
											"//     'Authorization':  Au,",
											"//     \"Content-Type\": \"application/json\"",
											"//     }",
											"// };",
											"// pm.sendRequest(preRequest, function (err, response) {",
											"//     let res = response.json();",
											"//     // console.log(response.json())",
											"//     res = JSON.stringify(res);",
											"//     pm.environment.set(\"res\", res);    ",
											"// });",
											"// setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{res}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/flussonic/users/synchronize?userId={{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"synchronize"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GETcameraLimit(must be 0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверка лимита камер. (по умолчанию 0)\",  () => {",
											"    pm.expect(pm.response.json().videoParameters.cameraLimits.FLUSSONIC.cameraLimit).to.equal(0);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request all cameras of the current user.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 403\", function () {",
											"        pm.response.to.have.status(403);",
											"    });",
											"",
											"    pm.test('Лимит камер у пользователя 0, поэтому ожидается сообщение Access is denied ',  () => {",
											"        pm.expect(pm.response.json().message).to.equal(\"Access is denied\");",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Тесты выключения камер (enabled)",
					"item": [
						{
							"name": "changeLimit  4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 4,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Включить камеру) Editing the camera on the platform.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    // \"type\": \"null\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"motionDelay\": {",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей id, title, houseId, platformType, rtspStream, ptz и типа поля token\",  () => {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"cameraId2\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"2\");",
											"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseIdd\"));",
											"    pm.expect(pm.response.json().platformType).to.equal(\"FLUSSONIC\");",
											"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"    pm.expect(pm.response.json().ptz).to.equal(true);",
											"    pm.expect(pm.response.json().token).to.string;    ",
											"});",
											"pm.test(\"Проверка поля enabled (должно быть true)\",  () => {",
											"    pm.expect(pm.response.json().enabled).to.equal(true);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{cameraId2}}\",\n    \"title\": \"2\",\n    \"houseId\": \"{{houseIdd}}\",\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"platformType\": \"FLUSSONIC\",\n    \"videoOnly\": false,\n    \"ptz\": true,\n    \"streamUrl\": {\n        \"web\": \"\",\n        \"mobile\": \"\"\n    },\n    \"status\": \"ONLINE\",\n    \"deviceLocation\": [],\n    \"login\": null,\n    \"password\": null,\n    \"ip\": null,\n    \"rtspParameters\": null,\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"enabled\":  true,\n    \"agentId\": null,\n    \"token\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/{{cameraId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"{{cameraId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Выключить камеру) Editing the camera on the platform.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    // \"type\": \"null\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    // \"type\": \"null\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"motionDelay\": {",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей id, title, houseId, platformType, rtspStream, ptz и типа поля token\",  () => {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"cameraId2\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"2\");",
											"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseIdd\"));",
											"    pm.expect(pm.response.json().platformType).to.equal(\"FLUSSONIC\");",
											"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"    pm.expect(pm.response.json().ptz).to.equal(true);",
											"    pm.expect(pm.response.json().token).to.string;    ",
											"});",
											"pm.test(\"Проверка поля enabled (должно быть false)\",  () => {",
											"    pm.expect(pm.response.json().enabled).to.equal(false);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{cameraId2}}\",\n    \"title\": \"2\",\n    \"houseId\": \"{{houseIdd}}\",\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"platformType\": \"FLUSSONIC\",\n    \"videoOnly\": false,\n    \"ptz\": true,\n    \"streamUrl\": {\n        \"web\": \"\",\n        \"mobile\": \"\"\n    },\n    \"status\": \"ONLINE\",\n    \"deviceLocation\": [],\n    \"login\": null,\n    \"password\": null,\n    \"ip\": null,\n    \"rtspParameters\": null,\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"enabled\":  false,\n    \"agentId\": null,\n    \"token\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/{{cameraId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"{{cameraId2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление",
					"item": [
						{
							"name": "Delete the user c video platforms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "FLUSSONIC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ACCESS_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Контроллер для синхронизации пользователей Flussonic",
			"item": [
				{
					"name": "0. Создать пользователя и т.д.",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Пользователь создан\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"Проверка поля id\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mailATc1a2m3era.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"ATc1a2m3era\",\n    \"password\": \"ATc1a2m3era\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"ATc1a2m3era\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "ATc1a2m3era",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ATc1a2m3era",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"variables\",",
											"        \"dashboardItems\",",
											"        \"houseGroups\",",
											"        \"guards\",",
											"        \"title\",",
											"        \"ownerId\",",
											"        \"address\",",
											"        \"apartment\",",
											"        \"timeZone\",",
											"        \"type\",",
											"        \"startTime\",",
											"        \"guardStatus\",",
											"        \"underGuard\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"variables\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"dashboardItems\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"houseGroups\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"guards\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"ownerId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"apartment\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"timeZone\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"startTime\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"guardStatus\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"underGuard\": {",
											"            \"type\": \"boolean\"",
											"        }",
											"    }",
											"}",
											"",
											"",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Контроллер для синхронизации пользователей Flussonic",
					"item": [
						{
							"name": "Отвязывание видеосервера ELTEX",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{id}}?platformType=ELTEX",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "ELTEX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding a user to a video platform.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "FLUSSONIC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Flussonic user request by userId.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.environment.set(\"userId_f\", jsonData.userId);",
											"    pm.environment.set(\"flussonicUserId\", jsonData.flussonicUserId);",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"userId\",",
											"            \"flussonicUserId\",",
											"            \"canEditOrganizations\",",
											"            \"canViewOrganizations\",",
											"            \"canEditSettings\",",
											"            \"enabled\",",
											"            \"canAddAgentCamera\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"userId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"flussonicUserId\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"canEditOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canViewOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canEditSettings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"",
											"            \"canAddAgentCamera\": {",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    };",
											"    ",
											"    pm.test('Schema is valid', function () {",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка полей canAddAgentCamera, а также userId, flussonicUserId, canEditOrganizations, canViewOrganizations, canEditSettings и enabled\",  () => {",
											"        pm.expect(pm.response.json().canAddAgentCamera).to.be.eql(false);",
											"        pm.expect(pm.response.json().userId).to.be.eql(pm.environment.get(\"userId_f\"));",
											"        pm.expect(pm.response.json().flussonicUserId).to.be.eql(pm.environment.get(\"flussonicUserId\")); ",
											"        pm.expect(pm.response.json().canEditOrganizations).to.be.eql(true);",
											"        pm.expect(pm.response.json().canViewOrganizations).to.be.eql(true);",
											"        pm.expect(pm.response.json().canEditSettings).to.be.eql(false);",
											"        pm.expect(pm.response.json().enabled).to.be.eql(true);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/flussonic/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление пользователя флуссоника с сохранением данных на флуссонике.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"userId\",",
											"            \"flussonicUserId\",",
											"            \"canEditOrganizations\",",
											"            \"canViewOrganizations\",",
											"            \"canEditSettings\",",
											"            \"enabled\",",
											"            \"canAddAgentCamera\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"userId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"flussonicUserId\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"canEditOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canViewOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canEditSettings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"",
											"            \"canAddAgentCamera\": {",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    };",
											"    ",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.test('Schema is valid', function () {        ",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка изменяемого поля(canAddAgentCamera), а также userId и flussonicUserId\",  () => {",
											"        pm.expect(pm.response.json().canAddAgentCamera).to.be.eql(true);",
											"        pm.expect(pm.response.json().userId).to.be.eql(pm.environment.get(\"userId_f\"));",
											"        pm.expect(pm.response.json().flussonicUserId).to.be.eql(pm.environment.get(\"flussonicUserId\"));       ",
											"    });",
											"    ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"{{userId_f}}\",\n    \"flussonicUserId\": {{flussonicUserId}},\n    \"canEditOrganizations\": true,\n    \"canViewOrganizations\": true,\n    \"canEditSettings\": false,\n    \"enabled\": true,\n    \"canAddAgentCamera\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/flussonic/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Flussonic user request by userId. (проверка изменений)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"userId\",",
											"            \"flussonicUserId\",",
											"            \"canEditOrganizations\",",
											"            \"canViewOrganizations\",",
											"            \"canEditSettings\",",
											"            \"enabled\",",
											"            \"canAddAgentCamera\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"userId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"flussonicUserId\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"canEditOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canViewOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canEditSettings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"",
											"            \"canAddAgentCamera\": {",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    };",
											"    ",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.test('Schema is valid', function () {",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка изменого поля(canAddAgentCamera), а также userId, flussonicUserId, canEditOrganizations, canViewOrganizations, canEditSettings и enabled\",  () => {",
											"        pm.expect(pm.response.json().canAddAgentCamera).to.be.eql(true);",
											"",
											"        pm.expect(pm.response.json().userId).to.be.eql(pm.environment.get(\"userId_f\"));",
											"        pm.expect(pm.response.json().flussonicUserId).to.be.eql(pm.environment.get(\"flussonicUserId\")); ",
											"        pm.expect(pm.response.json().canEditOrganizations).to.be.eql(true);",
											"        pm.expect(pm.response.json().canViewOrganizations).to.be.eql(true);",
											"        pm.expect(pm.response.json().canEditSettings).to.be.eql(false);",
											"        pm.expect(pm.response.json().enabled).to.be.eql(true);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/flussonic/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "untieUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/flussonic/users/untie/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"untie",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Flussonic user request by userId. Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 204\", function () {",
											"//     pm.response.to.have.status(204);",
											"// });",
											"try {",
											"    pm.test(\"Проверка сообщения\",  () => {",
											"        pm.expect(pm.response.json().message).to.be.eql(\"source cannot be null\");",
											"",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/flussonic/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос для поиска пользователя Flussonic по логину, только для администратора",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"flussonicUserId\",",
											"            \"organizations\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"flussonicUserId\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"organizations\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"flussonicOrganizationId\",",
											"                        \"flussonicOwnerId\",",
											"                        \"organizationTitle\",",
											"                        \"houseId\",",
											"                        \"cameras\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"flussonicOrganizationId\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"flussonicOwnerId\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"organizationTitle\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"houseId\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"cameras\": {",
											"                            \"type\": \"array\",",
											"                            \"additionalItems\": true,",
											"                            \"items\": {}",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    };",
											"    ",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.test('Schema is valid', function () {        ",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка изменяемого поля(canAddAgentCamera), а также userId и flussonicUserId\",  () => {",
											"        pm.expect(pm.response.json().flussonicUserId).to.be.eql(pm.environment.get(\"flussonicUserId\"));",
											"        pm.expect(pm.response.json().organizations[0].organizationTitle).to.be.eql(\"1\");    ",
											"    });   ",
											"    flussonicUser = JSON.stringify(JsoneData)",
											"",
											"    pm.environment.set(\"flussonicUser\", flussonicUser);",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/flussonic/users/find?login=ATc1a2m3era",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"find"
									],
									"query": [
										{
											"key": "login",
											"value": "ATc1a2m3era"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "authAtFlussonic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{flussonicUser}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/flussonic/users/synchronize?userId={{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"synchronize"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user c FLUSSONIC Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"  pm.test(\"Пользователь удален с платформы FLUSSONIC (код 204)\", function () {",
											"        pm.response.to.have.status(204);",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "FLUSSONIC"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  pm.test(\"Пользователь удален (код 204)\", function () {",
									"        pm.response.to.have.status(204);",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Flussonic",
			"item": [
				{
					"name": "0. Создать пользователя и т.д.",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (user, ATc1a2m3era)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mailATc1a2m3era.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"ATc1a2m3era\",\n    \"password\": \"ATc1a2m3era\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"ATc1a2m3era\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "ATc1a2m3era",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ATc1a2m3era",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"variables\",",
											"        \"dashboardItems\",",
											"        \"houseGroups\",",
											"        \"guards\",",
											"        \"title\",",
											"        \"ownerId\",",
											"        \"address\",",
											"        \"apartment\",",
											"        \"timeZone\",",
											"        \"type\",",
											"        \"startTime\",",
											"        \"guardStatus\",",
											"        \"underGuard\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"variables\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"dashboardItems\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"houseGroups\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"guards\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"ownerId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"apartment\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"timeZone\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"startTime\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"guardStatus\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"underGuard\": {",
											"            \"type\": \"boolean\"",
											"        }",
											"    }",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отвязывание видеосервера ELTEX",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{id}}?platformType=ELTEX",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "ELTEX"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful request (checking the code)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Flussonic",
					"item": [
						{
							"name": "Проверка доступа до видеоплатформы (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{flussonic_url}}/vsaas/v2",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"v2"
									]
								}
							},
							"response": []
						},
						{
							"name": "(admin)Запрос на получение sessionId, который используется для авторизации в остальных запросах. (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"session_id_flus\", jsonData.session);",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/auth/login?login={{flussonic_login}}&password=0bTgS%23N4I@V_#N4I@V_",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"auth",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{flussonic_login}}"
										},
										{
											"key": "password",
											"value": "0bTgS#N4I@V_"
										}
									],
									"hash": "N4I@V_"
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    var jsonData = JSON.parse(responseBody);    ",
											"    postman.setEnvironmentVariable (\"flussonicUserId\", jsonData.id);",
											"",
											"    pm.test(\"Проверка полей login, is_admin, enabled, external_id, can_edit_organizations, can_edit_settings, can_view_organizations\", function () {",
											"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era\");",
											"        pm.expect(pm.response.json().is_admin).to.eql(false);",
											"        pm.expect(pm.response.json().enabled).to.eql(true);",
											"        pm.expect(pm.response.json().external_id).to.eql(pm.environment.get(\"id\"));",
											"        pm.expect(pm.response.json().can_edit_organizations).to.eql(true);",
											"        pm.expect(pm.response.json().can_edit_settings).to.eql(false);",
											"        pm.expect(pm.response.json().can_view_organizations).to.eql(true);",
											"        ",
											"    });",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"domain_id\",",
											"        \"login\",",
											"        \"apikey\",",
											"        \"is_admin\",",
											"        \"authorized_ip\",",
											"        \"enabled\",",
											"        \"readonly\",",
											"        \"monitoring\",",
											"        \"name\",",
											"        \"locale\",",
											"        \"note\",",
											"        \"phone\",",
											"        \"notification_email\",",
											"        \"external_id\",",
											"        \"max_sessions\",",
											"        \"can_edit_organizations\",",
											"        \"can_edit_settings\",",
											"        \"can_view_organizations\",",
											"        \"organizations\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"domain_id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"login\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"apikey\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"is_admin\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"authorized_ip\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"readonly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"monitoring\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"locale\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"note\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"phone\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"notification_email\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"external_id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"max_sessions\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"can_edit_organizations\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"can_edit_settings\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"can_view_organizations\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"organizations\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"can_view_organizations\":true,\n\"can_edit_organizations\":true,\n\"can_edit_settings\":false,\n\"login\":\"ATc1a2m3era\",\n\"external_id\":\"{{id}}\",\n\"enabled\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/users",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление пользователя (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable (\"flussonicUserId\", jsonData.id);",
											"",
											"        pm.test(\"Проверка полей login, is_admin, enabled, external_id, can_edit_organizations, can_edit_settings, can_view_organizations\", function () {",
											"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era\");",
											"        pm.expect(pm.response.json().is_admin).to.eql(false);",
											"        pm.expect(pm.response.json().enabled).to.eql(true);",
											"        pm.expect(pm.response.json().external_id).to.eql(pm.environment.get(\"id\"));",
											"        pm.expect(pm.response.json().can_edit_organizations).to.eql(true);",
											"        pm.expect(pm.response.json().can_edit_settings).to.eql(true);",
											"        pm.expect(pm.response.json().can_view_organizations).to.eql(true);",
											"        ",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"domain_id\",",
											"            \"login\",",
											"            \"apikey\",",
											"            \"is_admin\",",
											"            \"authorized_ip\",",
											"            \"enabled\",",
											"            \"readonly\",",
											"            \"monitoring\",",
											"            \"name\",",
											"            \"locale\",",
											"            \"note\",",
											"            \"phone\",",
											"            \"notification_email\",",
											"            \"external_id\",",
											"            \"max_sessions\",",
											"            \"can_edit_organizations\",",
											"            \"can_edit_settings\",",
											"            \"can_view_organizations\",",
											"            \"organizations\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"domain_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"login\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"apikey\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"authorized_ip\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"readonly\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"monitoring\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"locale\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"note\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"phone\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"notification_email\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"max_sessions\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"can_edit_organizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"can_edit_settings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"can_view_organizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"organizations\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"can_view_organizations\":true,\n\"can_edit_organizations\":true,\n\"can_edit_settings\":true,\n\"name\":\"ATc1a2m3era\",\n\"external_id\":\"{{id}}\",\n\"enabled\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/users/{{flussonicUserId}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"users",
										"{{flussonicUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос пользователя (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проврка обновления пользователя (поле name и can_edit_settings)\", function () {",
											"        pm.expect(pm.response.json().name).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().can_edit_settings).to.eql(true)",
											"    });",
											"",
											"    pm.test(\"Проврка полей id, login, external_id \", function () {",
											"        pm.expect(pm.response.json().id).to.eql(Number(pm.environment.get(\"flussonicUserId\")))",
											"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().external_id).to.eql(pm.environment.get(\"id\"))",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"domain_id\",",
											"            \"login\",",
											"            \"apikey\",",
											"            \"is_admin\",",
											"            \"authorized_ip\",",
											"            \"enabled\",",
											"            \"readonly\",",
											"            \"monitoring\",",
											"            \"name\",",
											"            \"locale\",",
											"            \"note\",",
											"            \"phone\",",
											"            \"notification_email\",",
											"            \"external_id\",",
											"            \"max_sessions\",",
											"            \"can_edit_organizations\",",
											"            \"can_edit_settings\",",
											"            \"can_view_organizations\",",
											"            \"organizations\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"domain_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"login\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"apikey\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"authorized_ip\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"readonly\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"monitoring\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"locale\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"note\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"phone\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"notification_email\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"max_sessions\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"can_edit_organizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"can_edit_settings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"can_view_organizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"organizations\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    };",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/users/{{flussonicUserId}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"users",
										"{{flussonicUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск пользователя по логину (для синхронизации пользователя) (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проврка полей name, id, login, external_id и can_edit_settings \", function () {",
											"        pm.expect(pm.response.json()[0].name).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json()[0].id).to.eql(Number(pm.environment.get(\"flussonicUserId\")))",
											"        pm.expect(pm.response.json()[0].login).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json()[0].external_id).to.eql(pm.environment.get(\"id\"))",
											"        pm.expect(pm.response.json()[0].can_edit_settings).to.eql(true)",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"domain_id\",",
											"                \"login\",",
											"                \"apikey\",",
											"                \"is_admin\",",
											"                \"authorized_ip\",",
											"                \"enabled\",",
											"                \"readonly\",",
											"                \"monitoring\",",
											"                \"name\",",
											"                \"locale\",",
											"                \"note\",",
											"                \"phone\",",
											"                \"notification_email\",",
											"                \"external_id\",",
											"                \"max_sessions\",",
											"                \"can_edit_organizations\",",
											"                \"can_edit_settings\",",
											"                \"can_view_organizations\",",
											"                \"organizations\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"domain_id\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"login\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"apikey\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"is_admin\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"authorized_ip\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"enabled\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"readonly\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"monitoring\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"name\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"locale\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"note\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"phone\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"notification_email\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"external_id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"max_sessions\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"can_edit_organizations\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"can_edit_settings\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"can_view_organizations\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"organizations\": {",
											"                    \"type\": \"array\",",
											"                    \"additionalItems\": true,",
											"                    \"items\": {",
											"                        \"type\": \"integer\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/users?login=ATc1a2m3era",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "login",
											"value": "ATc1a2m3era"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "whoami (admin) (Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/auth/whoami",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"auth",
										"whoami"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление организации (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable (\"organizationId_flus\", jsonData.id);",
											"",
											"    pm.test(\"Проврка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit\", function () {",
											"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
											"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"flussonicUserId\")))",
											"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
											"        pm.expect(pm.response.json().user_limit).to.eql(3)",
											"        pm.expect(pm.response.json().camera_limit).to.eql(100)",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"dvr_limit\",",
											"            \"owner\",",
											"            \"title\",",
											"            \"activity_events_lifetime_days\",",
											"            \"domain\",",
											"            \"user_limit\",",
											"            \"camera_limit\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"dvr_limit\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"owner\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"login\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"login\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"activity_events_lifetime_days\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"domain\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"title\",",
											"                    \"id\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"title\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    }",
											"                }",
											"            },",
											"            \"user_limit\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"camera_limit\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dvr_limit\": 1000,\n    \"title\": \"ATc1a2m3era_organization\",\n    \"owner_id\": {{flussonicUserId}},\n    \"user_limit\": 3,\n    \"camera_limit\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/organizations/",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"organizations",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление организации (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"    pm.test(\"Проврка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit\", function () {",
											"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
											"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"flussonicUserId\")))",
											"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
											"        pm.expect(pm.response.json().user_limit).to.eql(3)",
											"        pm.expect(pm.response.json().camera_limit).to.eql(10)",
											"    });",
											"        var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"dvr_limit\",",
											"            \"owner\",",
											"            \"title\",",
											"            \"activity_events_lifetime_days\",",
											"            \"domain\",",
											"            \"user_limit\",",
											"            \"camera_limit\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"dvr_limit\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"owner\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"login\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"login\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"activity_events_lifetime_days\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"domain\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"title\",",
											"                    \"id\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"title\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    }",
											"                }",
											"            },",
											"            \"user_limit\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"camera_limit\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dvr_limit\": 1000,\n    \"title\": \"ATc1a2m3era_organization\",\n    \"owner_id\": {{flussonicUserId}},\n    \"user_limit\": 3,\n    \"camera_limit\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/organizations/{{organizationId_flus}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"organizations",
										"{{organizationId_flus}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос организации (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit, а так же user_count и camera_count\", function () {",
											"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
											"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"flussonicUserId\")))",
											"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
											"        pm.expect(pm.response.json().user_limit).to.eql(3)",
											"        pm.expect(pm.response.json().camera_limit).to.eql(10)",
											"",
											"        pm.expect(pm.response.json().user_count).to.eql(1)",
											"        pm.expect(pm.response.json().camera_count).to.eql(0)",
											"",
											"    });",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"is_default\",",
											"            \"can_edit_cameras\",",
											"            \"dvr_limit\",",
											"            \"user_count\",",
											"            \"camera_count\",",
											"            \"owner\",",
											"            \"can_edit_users\",",
											"            \"title\",",
											"            \"mosaic_count\",",
											"            \"activity_events_lifetime_days\",",
											"            \"can_view_stats\",",
											"            \"is_member\",",
											"            \"domain\",",
											"            \"user_limit\",",
											"            \"camera_limit\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"is_default\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"can_edit_cameras\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"dvr_limit\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"user_count\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"camera_count\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"owner\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"login\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"login\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"can_edit_users\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"mosaic_count\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"activity_events_lifetime_days\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"can_view_stats\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"is_member\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"domain\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"title\",",
											"                    \"id\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"title\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    }",
											"                }",
											"            },",
											"            \"user_limit\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"camera_limit\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/organizations/{{organizationId_flus}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"organizations",
										"{{organizationId_flus}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (user, ATc1a2m3era2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id2\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mailATc1a2m3era2.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"ATc1a2m3era2\",\n    \"password\": \"ATc1a2m3era2\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"ATc1a2m3era2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable (\"flussonicUserId2\", jsonData.id);",
											"",
											"    pm.test(\"Проверка полей login, is_admin, enabled, external_id, can_edit_organizations, can_edit_settings, can_view_organizations\", function () {",
											"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era2\");",
											"        pm.expect(pm.response.json().is_admin).to.eql(false);",
											"        pm.expect(pm.response.json().enabled).to.eql(true);",
											"        pm.expect(pm.response.json().external_id).to.eql(pm.environment.get(\"id2\"));",
											"        pm.expect(pm.response.json().can_edit_organizations).to.eql(true);",
											"        pm.expect(pm.response.json().can_edit_settings).to.eql(false);",
											"        pm.expect(pm.response.json().can_view_organizations).to.eql(true);",
											"        ",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"domain_id\",",
											"            \"login\",",
											"            \"apikey\",",
											"            \"is_admin\",",
											"            \"authorized_ip\",",
											"            \"enabled\",",
											"            \"readonly\",",
											"            \"monitoring\",",
											"            \"name\",",
											"            \"locale\",",
											"            \"note\",",
											"            \"phone\",",
											"            \"notification_email\",",
											"            \"external_id\",",
											"            \"max_sessions\",",
											"            \"can_edit_organizations\",",
											"            \"can_edit_settings\",",
											"            \"can_view_organizations\",",
											"            \"organizations\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"domain_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"login\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"apikey\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"authorized_ip\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"readonly\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"monitoring\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"locale\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"note\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"phone\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"notification_email\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"max_sessions\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"can_edit_organizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"can_edit_settings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"can_view_organizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"organizations\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"can_view_organizations\":true,\n\"can_edit_organizations\":true,\n\"can_edit_settings\":false,\n\"login\":\"ATc1a2m3era2\",\n\"external_id\":\"{{id2}}\",\n\"enabled\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/users",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Генерация token'а пользователя для получения sessionId. Полученное в ответе тело отсылается в запрос на sessionId. (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"autologin_token\", jsonData.autologin_token);",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"autologin_token\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"autologin_token\": {",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"ATc1a2m3era\",\n    \"external_id\": \"{{id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/auth/generate-autologin-token",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"auth",
										"generate-autologin-token"
									]
								}
							},
							"response": []
						},
						{
							"name": "(user, ATc1a2m3era)Запрос на получение sessionId (на Flussonic) (sessionId в куках)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    postman.setEnvironmentVariable (\"session_id_flus_user\", pm.cookies.get('v2session'));",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "autologin_token",
											"value": "{{autologin_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/autologin",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"autologin"
									]
								}
							},
							"response": []
						},
						{
							"name": "whoami (user, ATc1a2m3era) (Flussonic) проверка получения sessionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проврка полей id, login, can_edit_settings, is_domain_admin,  \", function () {",
											"        pm.expect(pm.response.json().id).to.eql(Number(pm.environment.get(\"flussonicUserId\")))",
											"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().can_edit_settings).to.eql(true)",
											"        pm.expect(pm.response.json().is_domain_admin).to.eql(false)",
											"",
											"    });",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/auth/whoami",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"auth",
										"whoami"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление прав пользователю к организации",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проврка полей user_id,  can_view_organization_stats, can_edit_organization_users,can_edit_organization_cameras, can_edit_organization_plists\", function () {",
											"        pm.expect(pm.response.json().user_id).to.eql(Number(pm.environment.get(\"flussonicUserId2\")))",
											"        // pm.expect(pm.response.json().can_view_organization_plists).to.eql(true)",
											"        pm.expect(pm.response.json().can_view_organization_stats).to.eql(false)",
											"        pm.expect(pm.response.json().can_edit_organization_users).to.eql(false)",
											"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era2\")",
											"        pm.expect(pm.response.json().can_edit_organization_cameras).to.eql(true)",
											"        // pm.expect(pm.response.json().can_edit_organization_cameras).to.eql(true)",
											"    });",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"user_id\",",
											"        \"can_view_organization_plists\",",
											"        \"can_view_organization_stats\",",
											"        \"can_edit_organization_users\",",
											"        \"notification_email\",",
											"        \"login\",",
											"        \"folders_permissions\",",
											"        \"can_edit_organization_cameras\",",
											"        \"can_edit_organization_plists\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"user_id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"can_view_organization_plists\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"can_view_organization_stats\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"can_edit_organization_users\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"notification_email\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"login\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"folders_permissions\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"can_edit_organization_cameras\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"can_edit_organization_plists\": {",
											"            \"type\": \"boolean\"",
											"        }",
											"    }",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_id\": {{flussonicUserId2}},\n\"can_edit_organization_cameras\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/organizations/{{organizationId_flus}}/users/",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"organizations",
										"{{organizationId_flus}}",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос организации (на Flussonic) (проверка изменений)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit, а так же user_count и camera_count\", function () {",
											"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
											"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"flussonicUserId\")))",
											"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
											"        pm.expect(pm.response.json().user_limit).to.eql(3)",
											"        pm.expect(pm.response.json().camera_limit).to.eql(10)",
											"",
											"        pm.expect(pm.response.json().user_count).to.eql(2)",
											"        pm.expect(pm.response.json().camera_count).to.eql(0)",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"is_default\",",
											"            \"can_edit_cameras\",",
											"            \"dvr_limit\",",
											"            \"user_count\",",
											"            \"camera_count\",",
											"            \"owner\",",
											"            \"can_edit_users\",",
											"            \"title\",",
											"            \"mosaic_count\",",
											"            \"activity_events_lifetime_days\",",
											"            \"can_view_stats\",",
											"            \"is_member\",",
											"            \"domain\",",
											"            \"user_limit\",",
											"            \"camera_limit\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"is_default\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"can_edit_cameras\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"dvr_limit\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"user_count\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"camera_count\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"owner\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"login\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"login\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"can_edit_users\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"mosaic_count\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"activity_events_lifetime_days\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"can_view_stats\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"is_member\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"domain\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"title\",",
											"                    \"id\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"title\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    }",
											"                }",
											"            },",
											"            \"user_limit\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"camera_limit\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/organizations/{{organizationId_flus}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"organizations",
										"{{organizationId_flus}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление пользователя из организации (на Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"success = true ?\", function () {",
											"        pm.expect(pm.response.json().success).to.eql(true)       ",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/organizations/{{organizationId_flus}}/users/{{flussonicUserId2}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"organizations",
										"{{organizationId_flus}}",
										"users",
										"{{flussonicUserId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление пользователя с Flussonic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"success = true ?\", function () {",
											"        pm.expect(pm.response.json().success).to.eql(true)       ",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/users/{{flussonicUserId2}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"users",
										"{{flussonicUserId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "удалить пользователя с платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь удален (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос организации (на Flussonic) (проверка удаления)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"is_default\",",
											"        \"can_edit_cameras\",",
											"        \"dvr_limit\",",
											"        \"user_count\",",
											"        \"camera_count\",",
											"        \"owner\",",
											"        \"can_edit_users\",",
											"        \"title\",",
											"        \"mosaic_count\",",
											"        \"activity_events_lifetime_days\",",
											"        \"can_view_stats\",",
											"        \"is_member\",",
											"        \"domain\",",
											"        \"user_limit\",",
											"        \"camera_limit\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"is_default\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"can_edit_cameras\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr_limit\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"user_count\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"camera_count\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"owner\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"login\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"login\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"can_edit_users\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"mosaic_count\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"activity_events_lifetime_days\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"can_view_stats\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"is_member\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"domain\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"title\",",
											"                \"id\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"title\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"id\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        },",
											"        \"user_limit\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"camera_limit\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit, а так же user_count и camera_count\", function () {",
											"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
											"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"flussonicUserId\")))",
											"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
											"        pm.expect(pm.response.json().user_limit).to.eql(3)",
											"        pm.expect(pm.response.json().camera_limit).to.eql(10)",
											"",
											"        pm.expect(pm.response.json().user_count).to.eql(1)",
											"        pm.expect(pm.response.json().camera_count).to.eql(0)",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/organizations/{{organizationId_flus}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"organizations",
										"{{organizationId_flus}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление камеры (1 способ добавления камер)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    // setTimeout(function(){}, [3000]);",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"//    var schema =  {",
											"//     \"type\": \"object\",",
											"//     \"required\": [",
											"//         \"agent_id\",",
											"//         \"agent_key\",",
											"//         \"agent_model\",",
											"//         \"agent_serial\",",
											"//         \"agent_status\",",
											"//         \"comment\",",
											"//         \"coordinates\",",
											"//         \"dvr_depth\",",
											"//         \"dvr_lock_days\",",
											"//         \"dvr_path\",",
											"//         \"dvr_space\",",
											"//         \"enabled\",",
											"//         \"external_id\",",
											"//         \"extrenal_id\",",
											"//         \"folder_coordinates\",",
											"//         \"folder_id\",",
											"//         \"group_id\",",
											"//         \"groups\",",
											"//         \"has_actions\",",
											"//         \"last_change\",",
											"//         \"last_event_time\",",
											"//         \"motion_detector_enabled\",",
											"//         \"name\",",
											"//         \"onvif_profile\",",
											"//         \"onvif_ptz\",",
											"//         \"onvif_url\",",
											"//         \"organization_id\",",
											"//         \"permissions\",",
											"//         \"playback_config\",",
											"//         \"postal_address\",",
											"//         \"precise_thumbnails_days\",",
											"//         \"preset\",",
											"//         \"preset_id\",",
											"//         \"server\",",
											"//         \"static\",",
											"//         \"stream_status\",",
											"//         \"stream_url\",",
											"//         \"streamer_id\",",
											"//         \"substream_url\",",
											"//         \"thumbnails\",",
											"//         \"thumbnails_url\",",
											"//         \"title\",",
											"//         \"user_attributes\",",
											"//         \"video_only\",",
											"//         \"vision_alg\",",
											"//         \"vision_areas\",",
											"//         \"vision_enabled\",",
											"//         \"vision_gpu\"",
											"//     ],",
											"//     \"additionalProperties\": true,",
											"//     \"properties\": {",
											"//         \"agent_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_key\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_model\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_serial\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_status\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"comment\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"coordinates\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"dvr_depth\": {",
											"//             \"type\": \"number\"",
											"//         },",
											"//         \"dvr_lock_days\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"dvr_path\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"dvr_space\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"enabled\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"external_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"extrenal_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"folder_coordinates\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"folder_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"group_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"groups\": {",
											"//             \"type\": \"array\",",
											"//             \"additionalItems\": true,",
											"//             \"items\": {}",
											"//         },",
											"//         \"has_actions\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"last_change\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"user\",",
											"//                 \"domain_id\",",
											"//                 \"object_id\",",
											"//                 \"created_at\",",
											"//                 \"event_data\",",
											"//                 \"action_type\",",
											"//                 \"object_repr\",",
											"//                 \"object_type\",",
											"//                 \"request_data\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"user\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"domain_id\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"object_id\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"created_at\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"event_data\": {",
											"//                     \"type\": \"object\",",
											"//                     \"required\": [",
											"//                         \"changed_data\"",
											"//                     ],",
											"//                     \"additionalProperties\": true,",
											"//                     \"properties\": {",
											"//                         \"changed_data\": {",
											"//                             \"type\": \"object\",",
											"//                             \"required\": [],",
											"//                             \"additionalProperties\": true,",
											"//                             \"properties\": {}",
											"//                         }",
											"//                     }",
											"//                 },",
											"//                 \"action_type\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"object_repr\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"object_type\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"request_data\": {",
											"//                     \"type\": \"object\",",
											"//                     \"required\": [",
											"//                         \"ip\",",
											"//                         \"user_agent\"",
											"//                     ],",
											"//                     \"additionalProperties\": true,",
											"//                     \"properties\": {",
											"//                         \"ip\": {",
											"//                             \"type\": \"string\"",
											"//                         },",
											"//                         \"user_agent\": {",
											"//                             \"type\": \"string\"",
											"//                         }",
											"//                     }",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"last_event_time\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"motion_detector_enabled\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"name\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"onvif_profile\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"onvif_ptz\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"onvif_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"organization_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"permissions\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"view\",",
											"//                 \"edit\",",
											"//                 \"ptz\",",
											"//                 \"dvr\",",
											"//                 \"dvr_depth_limit\",",
											"//                 \"actions\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"view\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"edit\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"ptz\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"dvr\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"dvr_depth_limit\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"actions\": {",
											"//                     \"type\": \"boolean\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"playback_config\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"token\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"token\": {",
											"//                     \"type\": \"string\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"postal_address\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"precise_thumbnails_days\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"preset\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"domain_id\",",
											"//                 \"dvr_depth\",",
											"//                 \"dvr_lock_days\",",
											"//                 \"dvr_space\",",
											"//                 \"id\",",
											"//                 \"is_adjustable\",",
											"//                 \"is_default\",",
											"//                 \"is_deleted\",",
											"//                 \"precise_thumbnails_days\",",
											"//                 \"title\",",
											"//                 \"vision_alg\",",
											"//                 \"vision_areas\",",
											"//                 \"vision_enabled\",",
											"//                 \"vision_gpu\",",
											"//                 \"vision_params\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"domain_id\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"dvr_depth\": {",
											"//                     \"type\": \"number\"",
											"//                 },",
											"//                 \"dvr_lock_days\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"dvr_space\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"id\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"is_adjustable\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"is_default\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"is_deleted\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"precise_thumbnails_days\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"title\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"vision_alg\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_areas\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_enabled\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_gpu\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_params\": {",
											"//                     \"type\": \"object\",",
											"//                     \"required\": [],",
											"//                     \"additionalProperties\": true,",
											"//                     \"properties\": {}",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"preset_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"server\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"static\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"stream_status\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"name\",",
											"//                 \"server\",",
											"//                 \"alive\",",
											"//                 \"lifetime\",",
											"//                 \"bitrate\",",
											"//                 \"source_error\",",
											"//                 \"http_port\",",
											"//                 \"https_port\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"name\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"server\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"alive\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"lifetime\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"bitrate\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"source_error\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"http_port\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"https_port\": {",
											"//                     \"type\": \"integer\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"stream_url\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"streamer_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"substream_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"thumbnails\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"thumbnails_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"title\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"user_attributes\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"favorite\",",
											"//                 \"motion_alarm\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"favorite\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"motion_alarm\": {",
											"//                     \"type\": \"boolean\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"video_only\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"vision_alg\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_areas\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_enabled\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_gpu\": {",
											"//             \"type\": \"null\"",
											"//         }",
											"//     }",
											"// }",
											"",
											"//     pm.test('Schema is valid', function () {",
											"//         var JsoneData=JSON.parse(responseBody);",
											"//         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"//     });",
											"",
											"    pm.test(\"Проверка полей dvr_depth, dvr_lock_days, dvr_space, enabled, organization_id и name \", function () {",
											"        pm.expect(pm.response.json().dvr_depth).to.eql(1.0)",
											"        pm.expect(pm.response.json().dvr_lock_days).to.eql(1)",
											"        pm.expect(pm.response.json().dvr_space).to.eql(1)",
											"        pm.expect(pm.response.json().enabled).to.eql(true)",
											"        pm.expect(pm.response.json().organization_id).to.eql(Number(pm.environment.get(\"organizationId_flus\")))",
											"        pm.expect(pm.response.json().name).to.eql(\"3camera9-ATAT-4242-eto1-cameraATa777\")",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [3000]);",
											"// // иначе не проходит проверка по схеме"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"stream_url\":\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n\"organization_id\":{{organizationId_flus}},\n\"onvif_ptz\":false,\n\"dvr_space\":1,\n\"video_only\":\"false\",\n\"dvr_depth\":1,\n\"dvr_lock_days\":1,\n\"name\":\"3camera9-ATAT-4242-eto1-cameraATa777\",\n\"title\":\"ATc1a2m3era\",\n\"motion_detector_enabled\":true,\n\"enabled\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/cameras",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос камер пользователя (Flussonic) (проверка добавления камеры)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"//    var schema =  {",
											"//     \"type\": \"array\",",
											"//     \"additionalItems\": true,",
											"//     \"items\": {",
											"//         \"type\": \"object\",",
											"//         \"required\": [",
											"//             \"agent_id\",",
											"//             \"agent_key\",",
											"//             \"agent_model\",",
											"//             \"agent_serial\",",
											"//             \"agent_status\",",
											"//             \"comment\",",
											"//             \"coordinates\",",
											"//             \"dvr_depth\",",
											"//             \"dvr_lock_days\",",
											"//             \"dvr_path\",",
											"//             \"dvr_space\",",
											"//             \"enabled\",",
											"//             \"external_id\",",
											"//             \"extrenal_id\",",
											"//             \"folder_coordinates\",",
											"//             \"folder_id\",",
											"//             \"group_id\",",
											"//             \"groups\",",
											"//             \"has_actions\",",
											"//             \"last_change\",",
											"//             \"last_event_time\",",
											"//             \"motion_detector_enabled\",",
											"//             \"name\",",
											"//             \"onvif_profile\",",
											"//             \"onvif_ptz\",",
											"//             \"onvif_url\",",
											"//             \"organization_id\",",
											"//             \"permissions\",",
											"//             \"playback_config\",",
											"//             \"postal_address\",",
											"//             \"precise_thumbnails_days\",",
											"//             \"preset\",",
											"//             \"preset_id\",",
											"//             \"server\",",
											"//             \"static\",",
											"//             \"stream_status\",",
											"//             \"stream_url\",",
											"//             \"streamer_id\",",
											"//             \"substream_url\",",
											"//             \"thumbnails\",",
											"//             \"thumbnails_url\",",
											"//             \"title\",",
											"//             \"user_attributes\",",
											"//             \"video_only\",",
											"//             \"vision_alg\",",
											"//             \"vision_areas\",",
											"//             \"vision_enabled\",",
											"//             \"vision_gpu\"",
											"//         ],",
											"//         \"additionalProperties\": true,",
											"//         \"properties\": {",
											"//             \"agent_id\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"agent_key\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"agent_model\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"agent_serial\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"agent_status\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"comment\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"coordinates\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"dvr_depth\": {",
											"//                 \"type\": \"number\"",
											"//             },",
											"//             \"dvr_lock_days\": {",
											"//                 \"type\": \"integer\"",
											"//             },",
											"//             \"dvr_path\": {",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"dvr_space\": {",
											"//                 \"type\": \"integer\"",
											"//             },",
											"//             \"enabled\": {",
											"//                 \"type\": \"boolean\"",
											"//             },",
											"//             \"external_id\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"extrenal_id\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"folder_coordinates\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"folder_id\": {",
											"//                 \"type\": \"integer\"",
											"//             },",
											"//             \"group_id\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"groups\": {",
											"//                 \"type\": \"array\",",
											"//                 \"additionalItems\": true,",
											"//                 \"items\": {}",
											"//             },",
											"//             \"has_actions\": {",
											"//                 \"type\": \"boolean\"",
											"//             },",
											"//             \"last_change\": {",
											"//                 \"type\": \"object\",",
											"//                 \"required\": [],",
											"//                 \"additionalProperties\": true,",
											"//                 \"properties\": {}",
											"//             },",
											"//             \"last_event_time\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"motion_detector_enabled\": {",
											"//                 \"type\": \"boolean\"",
											"//             },",
											"//             \"name\": {",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"onvif_profile\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"onvif_ptz\": {",
											"//                 \"type\": \"boolean\"",
											"//             },",
											"//             \"onvif_url\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"organization_id\": {",
											"//                 \"type\": \"integer\"",
											"//             },",
											"//             \"permissions\": {",
											"//                 \"type\": \"object\",",
											"//                 \"required\": [",
											"//                     \"view\",",
											"//                     \"edit\",",
											"//                     \"ptz\",",
											"//                     \"dvr\",",
											"//                     \"dvr_depth_limit\",",
											"//                     \"actions\"",
											"//                 ],",
											"//                 \"additionalProperties\": true,",
											"//                 \"properties\": {",
											"//                     \"view\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"edit\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"ptz\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"dvr\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"dvr_depth_limit\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"actions\": {",
											"//                         \"type\": \"boolean\"",
											"//                     }",
											"//                 }",
											"//             },",
											"//             \"playback_config\": {",
											"//                 \"type\": \"object\",",
											"//                 \"required\": [",
											"//                     \"token\"",
											"//                 ],",
											"//                 \"additionalProperties\": true,",
											"//                 \"properties\": {",
											"//                     \"token\": {",
											"//                         \"type\": \"string\"",
											"//                     }",
											"//                 }",
											"//             },",
											"//             \"postal_address\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"precise_thumbnails_days\": {",
											"//                 \"type\": \"integer\"",
											"//             },",
											"//             \"preset\": {",
											"//                 \"type\": \"object\",",
											"//                 \"required\": [",
											"//                     \"domain_id\",",
											"//                     \"dvr_depth\",",
											"//                     \"dvr_lock_days\",",
											"//                     \"dvr_space\",",
											"//                     \"id\",",
											"//                     \"is_adjustable\",",
											"//                     \"is_default\",",
											"//                     \"is_deleted\",",
											"//                     \"precise_thumbnails_days\",",
											"//                     \"title\",",
											"//                     \"vision_alg\",",
											"//                     \"vision_areas\",",
											"//                     \"vision_enabled\",",
											"//                     \"vision_gpu\",",
											"//                     \"vision_params\"",
											"//                 ],",
											"//                 \"additionalProperties\": true,",
											"//                 \"properties\": {",
											"//                     \"domain_id\": {",
											"//                         \"type\": \"integer\"",
											"//                     },",
											"//                     \"dvr_depth\": {",
											"//                         \"type\": \"number\"",
											"//                     },",
											"//                     \"dvr_lock_days\": {",
											"//                         \"type\": \"integer\"",
											"//                     },",
											"//                     \"dvr_space\": {",
											"//                         \"type\": \"integer\"",
											"//                     },",
											"//                     \"id\": {",
											"//                         \"type\": \"integer\"",
											"//                     },",
											"//                     \"is_adjustable\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"is_default\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"is_deleted\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"precise_thumbnails_days\": {",
											"//                         \"type\": \"integer\"",
											"//                     },",
											"//                     \"title\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"vision_alg\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"vision_areas\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"vision_enabled\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"vision_gpu\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"vision_params\": {",
											"//                         \"type\": \"object\",",
											"//                         \"required\": [],",
											"//                         \"additionalProperties\": true,",
											"//                         \"properties\": {}",
											"//                     }",
											"//                 }",
											"//             },",
											"//             \"preset_id\": {",
											"//                 \"type\": \"integer\"",
											"//             },",
											"//             \"server\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"static\": {",
											"//                 \"type\": \"boolean\"",
											"//             },",
											"//             \"stream_status\": {",
											"//                 \"type\": \"object\",",
											"//                 \"required\": [",
											"//                     \"name\",",
											"//                     \"server\",",
											"//                     \"alive\",",
											"//                     \"lifetime\",",
											"//                     \"bitrate\",",
											"//                     \"source_error\",",
											"//                     \"http_port\",",
											"//                     \"https_port\"",
											"//                 ],",
											"//                 \"additionalProperties\": true,",
											"//                 \"properties\": {",
											"//                     \"name\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"server\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"alive\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"lifetime\": {",
											"//                         \"type\": \"number\"",
											"//                     },",
											"//                     \"bitrate\": {",
											"//                         \"type\": \"integer\"",
											"//                     },",
											"//                     \"source_error\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"http_port\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"https_port\": {",
											"//                         \"type\": \"integer\"",
											"//                     }",
											"//                 }",
											"//             },",
											"//             \"stream_url\": {",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"streamer_id\": {",
											"//                 \"type\": \"integer\"",
											"//             },",
											"//             \"substream_url\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"thumbnails\": {",
											"//                 \"type\": \"boolean\"",
											"//             },",
											"//             \"thumbnails_url\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"title\": {",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"user_attributes\": {",
											"//                 \"type\": \"object\",",
											"//                 \"required\": [",
											"//                     \"favorite\",",
											"//                     \"motion_alarm\"",
											"//                 ],",
											"//                 \"additionalProperties\": true,",
											"//                 \"properties\": {",
											"//                     \"favorite\": {",
											"//                         \"type\": \"boolean\"",
											"//                     },",
											"//                     \"motion_alarm\": {",
											"//                         \"type\": \"boolean\"",
											"//                     }",
											"//                 }",
											"//             },",
											"//             \"video_only\": {",
											"//                 \"type\": \"boolean\"",
											"//             },",
											"//             \"vision_alg\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"vision_areas\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"vision_enabled\": {",
											"//                 \"type\": \"null\"",
											"//             },",
											"//             \"vision_gpu\": {",
											"//                 \"type\": \"null\"",
											"//             }",
											"//         }",
											"//     }",
											"// }",
											"",
											"//     pm.test('Schema is valid', function () {",
											"//         var JsoneData=JSON.parse(responseBody);",
											"//         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"//     });",
											"",
											"    pm.test(\"Проверка количества камер у пользователя (размер возвращаемого массива), а также полей dvr_depth, dvr_lock_days, dvr_space, enabled, organization_id, name,  title и stream_url\", function () {",
											"        pm.expect(pm.response.json().length).to.eql(1)",
											"        pm.expect(pm.response.json()[0].dvr_depth).to.eql(1.0)",
											"        pm.expect(pm.response.json()[0].dvr_lock_days).to.eql(1)",
											"        pm.expect(pm.response.json()[0].dvr_space).to.eql(1)",
											"        pm.expect(pm.response.json()[0].enabled).to.eql(true)",
											"        pm.expect(pm.response.json()[0].organization_id).to.eql(Number(pm.environment.get(\"organizationId_flus\")))",
											"        pm.expect(pm.response.json()[0].name).to.eql(\"3camera9-ATAT-4242-eto1-cameraATa777\")",
											"        pm.expect(pm.response.json()[0].title).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json()[0].stream_url).to.eql(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\")",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [8000]);",
											"// // иначе не проходит проверка по схеме"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/cameras",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление камеры (Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"//    var schema =  {",
											"//     \"type\": \"object\",",
											"//     \"required\": [",
											"//         \"agent_id\",",
											"//         \"agent_key\",",
											"//         \"agent_model\",",
											"//         \"agent_serial\",",
											"//         \"agent_status\",",
											"//         \"comment\",",
											"//         \"coordinates\",",
											"//         \"dvr_depth\",",
											"//         \"dvr_lock_days\",",
											"//         \"dvr_path\",",
											"//         \"dvr_space\",",
											"//         \"enabled\",",
											"//         \"external_id\",",
											"//         \"extrenal_id\",",
											"//         \"folder_coordinates\",",
											"//         \"folder_id\",",
											"//         \"group_id\",",
											"//         \"groups\",",
											"//         \"has_actions\",",
											"//         \"last_change\",",
											"//         \"last_event_time\",",
											"//         \"motion_detector_enabled\",",
											"//         \"name\",",
											"//         \"onvif_profile\",",
											"//         \"onvif_ptz\",",
											"//         \"onvif_url\",",
											"//         \"organization_id\",",
											"//         \"permissions\",",
											"//         \"playback_config\",",
											"//         \"postal_address\",",
											"//         \"precise_thumbnails_days\",",
											"//         \"preset\",",
											"//         \"preset_id\",",
											"//         \"server\",",
											"//         \"static\",",
											"//         \"stream_status\",",
											"//         \"stream_url\",",
											"//         \"streamer_id\",",
											"//         \"substream_url\",",
											"//         \"thumbnails\",",
											"//         \"thumbnails_url\",",
											"//         \"title\",",
											"//         \"user_attributes\",",
											"//         \"video_only\",",
											"//         \"vision_alg\",",
											"//         \"vision_areas\",",
											"//         \"vision_enabled\",",
											"//         \"vision_gpu\"",
											"//     ],",
											"//     \"additionalProperties\": true,",
											"//     \"properties\": {",
											"//         \"agent_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_key\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_model\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_serial\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_status\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"comment\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"coordinates\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"dvr_depth\": {",
											"//             \"type\": \"number\"",
											"//         },",
											"//         \"dvr_lock_days\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"dvr_path\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"dvr_space\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"enabled\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"external_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"extrenal_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"folder_coordinates\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"folder_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"group_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"groups\": {",
											"//             \"type\": \"array\",",
											"//             \"additionalItems\": true,",
											"//             \"items\": {}",
											"//         },",
											"//         \"has_actions\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"last_change\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {}",
											"//         },",
											"//         \"last_event_time\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"motion_detector_enabled\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"name\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"onvif_profile\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"onvif_ptz\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"onvif_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"organization_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"permissions\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"view\",",
											"//                 \"edit\",",
											"//                 \"ptz\",",
											"//                 \"dvr\",",
											"//                 \"dvr_depth_limit\",",
											"//                 \"actions\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"view\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"edit\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"ptz\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"dvr\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"dvr_depth_limit\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"actions\": {",
											"//                     \"type\": \"boolean\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"playback_config\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"token\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"token\": {",
											"//                     \"type\": \"string\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"postal_address\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"precise_thumbnails_days\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"preset\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"domain_id\",",
											"//                 \"dvr_depth\",",
											"//                 \"dvr_lock_days\",",
											"//                 \"dvr_space\",",
											"//                 \"id\",",
											"//                 \"is_adjustable\",",
											"//                 \"is_default\",",
											"//                 \"is_deleted\",",
											"//                 \"precise_thumbnails_days\",",
											"//                 \"title\",",
											"//                 \"vision_alg\",",
											"//                 \"vision_areas\",",
											"//                 \"vision_enabled\",",
											"//                 \"vision_gpu\",",
											"//                 \"vision_params\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"domain_id\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"dvr_depth\": {",
											"//                     \"type\": \"number\"",
											"//                 },",
											"//                 \"dvr_lock_days\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"dvr_space\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"id\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"is_adjustable\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"is_default\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"is_deleted\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"precise_thumbnails_days\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"title\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"vision_alg\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_areas\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_enabled\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_gpu\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_params\": {",
											"//                     \"type\": \"object\",",
											"//                     \"required\": [],",
											"//                     \"additionalProperties\": true,",
											"//                     \"properties\": {}",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"preset_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"server\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"static\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"stream_status\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"name\",",
											"//                 \"server\",",
											"//                 \"alive\",",
											"//                 \"lifetime\",",
											"//                 \"bitrate\",",
											"//                 \"source_error\",",
											"//                 \"http_port\",",
											"//                 \"https_port\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"name\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"server\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"alive\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"lifetime\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"bitrate\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"source_error\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"http_port\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"https_port\": {",
											"//                     \"type\": \"integer\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"stream_url\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"streamer_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"substream_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"thumbnails\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"thumbnails_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"title\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"user_attributes\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"favorite\",",
											"//                 \"motion_alarm\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"favorite\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"motion_alarm\": {",
											"//                     \"type\": \"boolean\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"video_only\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"vision_alg\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_areas\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_enabled\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_gpu\": {",
											"//             \"type\": \"null\"",
											"//         }",
											"//     }",
											"// }",
											"",
											"//     pm.test('Schema is valid', function () {",
											"//         var JsoneData=JSON.parse(responseBody);",
											"//         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"//     });",
											"",
											"    pm.test(\"Проверка полей dvr_depth, dvr_lock_days, dvr_space, enabled, organization_id, name,  title и stream_url\", function () {",
											"        pm.expect(pm.response.json().dvr_depth).to.eql(1.0)",
											"        pm.expect(pm.response.json().dvr_lock_days).to.eql(2)",
											"        pm.expect(pm.response.json().dvr_space).to.eql(1)",
											"        pm.expect(pm.response.json().enabled).to.eql(true)",
											"        pm.expect(pm.response.json().organization_id).to.eql(Number(pm.environment.get(\"organizationId_flus\")))",
											"        pm.expect(pm.response.json().name).to.eql(\"3camera9-ATAT-4242-eto1-cameraATa777\")",
											"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().stream_url).to.eql(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\")",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);",
											"// // иначе не проходит проверка по схеме"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"stream_url\":\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n\"organization_id\":{{organizationId_flus}},\n\"onvif_ptz\":true,\n\"dvr_space\":1,\n\"video_only\":\"false\",\n\"dvr_depth\":1,\n\"dvr_lock_days\":2,\n\"name\":\"3camera9-ATAT-4242-eto1-cameraATa777\",\n\"title\":\"ATc1a2m3era\",\n\"motion_detector_enabled\":true,\n\"enabled\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/cameras/3camera9-ATAT-4242-eto1-cameraATa777",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"cameras",
										"3camera9-ATAT-4242-eto1-cameraATa777"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос камеры (Flussonic) (проверка обновления камеры)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.environment.set(\"cameraToken\", pm.response.json().playback_config.token);",
											"",
											"//    var schema =  {",
											"//     \"type\": \"object\",",
											"//     \"required\": [",
											"//         \"agent_id\",",
											"//         \"agent_key\",",
											"//         \"agent_model\",",
											"//         \"agent_serial\",",
											"//         \"agent_status\",",
											"//         \"comment\",",
											"//         \"coordinates\",",
											"//         \"dvr_depth\",",
											"//         \"dvr_lock_days\",",
											"//         \"dvr_path\",",
											"//         \"dvr_space\",",
											"//         \"enabled\",",
											"//         \"external_id\",",
											"//         \"extrenal_id\",",
											"//         \"folder_coordinates\",",
											"//         \"folder_id\",",
											"//         \"group_id\",",
											"//         \"groups\",",
											"//         \"has_actions\",",
											"//         \"last_change\",",
											"//         \"last_event_time\",",
											"//         \"motion_detector_enabled\",",
											"//         \"name\",",
											"//         \"onvif_profile\",",
											"//         \"onvif_ptz\",",
											"//         \"onvif_url\",",
											"//         \"organization_id\",",
											"//         \"permissions\",",
											"//         \"playback_config\",",
											"//         \"postal_address\",",
											"//         \"precise_thumbnails_days\",",
											"//         \"preset\",",
											"//         \"preset_id\",",
											"//         \"server\",",
											"//         \"static\",",
											"//         \"stream_status\",",
											"//         \"stream_url\",",
											"//         \"streamer_id\",",
											"//         \"substream_url\",",
											"//         \"thumbnails\",",
											"//         \"thumbnails_url\",",
											"//         \"title\",",
											"//         \"user_attributes\",",
											"//         \"video_only\",",
											"//         \"vision_alg\",",
											"//         \"vision_areas\",",
											"//         \"vision_enabled\",",
											"//         \"vision_gpu\"",
											"//     ],",
											"//     \"additionalProperties\": true,",
											"//     \"properties\": {",
											"//         \"agent_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_key\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_model\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_serial\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"agent_status\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"comment\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"coordinates\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"dvr_depth\": {",
											"//             \"type\": \"number\"",
											"//         },",
											"//         \"dvr_lock_days\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"dvr_path\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"dvr_space\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"enabled\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"external_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"extrenal_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"folder_coordinates\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"folder_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"group_id\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"groups\": {",
											"//             \"type\": \"array\",",
											"//             \"additionalItems\": true,",
											"//             \"items\": {}",
											"//         },",
											"//         \"has_actions\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"last_change\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {}",
											"//         },",
											"//         \"last_event_time\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"motion_detector_enabled\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"name\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"onvif_profile\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"onvif_ptz\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"onvif_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"organization_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"permissions\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"view\",",
											"//                 \"edit\",",
											"//                 \"ptz\",",
											"//                 \"dvr\",",
											"//                 \"dvr_depth_limit\",",
											"//                 \"actions\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"view\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"edit\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"ptz\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"dvr\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"dvr_depth_limit\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"actions\": {",
											"//                     \"type\": \"boolean\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"playback_config\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"token\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"token\": {",
											"//                     \"type\": \"string\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"postal_address\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"precise_thumbnails_days\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"preset\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"domain_id\",",
											"//                 \"dvr_depth\",",
											"//                 \"dvr_lock_days\",",
											"//                 \"dvr_space\",",
											"//                 \"id\",",
											"//                 \"is_adjustable\",",
											"//                 \"is_default\",",
											"//                 \"is_deleted\",",
											"//                 \"precise_thumbnails_days\",",
											"//                 \"title\",",
											"//                 \"vision_alg\",",
											"//                 \"vision_areas\",",
											"//                 \"vision_enabled\",",
											"//                 \"vision_gpu\",",
											"//                 \"vision_params\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"domain_id\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"dvr_depth\": {",
											"//                     \"type\": \"number\"",
											"//                 },",
											"//                 \"dvr_lock_days\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"dvr_space\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"id\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"is_adjustable\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"is_default\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"is_deleted\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"precise_thumbnails_days\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"title\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"vision_alg\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_areas\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_enabled\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_gpu\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"vision_params\": {",
											"//                     \"type\": \"object\",",
											"//                     \"required\": [],",
											"//                     \"additionalProperties\": true,",
											"//                     \"properties\": {}",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"preset_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"server\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"static\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"stream_status\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"name\",",
											"//                 \"server\",",
											"//                 \"alive\",",
											"//                 \"lifetime\",",
											"//                 \"bitrate\",",
											"//                 \"source_error\",",
											"//                 \"http_port\",",
											"//                 \"https_port\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"name\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"server\": {",
											"//                     \"type\": \"string\"",
											"//                 },",
											"//                 \"alive\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"lifetime\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"bitrate\": {",
											"//                     \"type\": \"integer\"",
											"//                 },",
											"//                 \"source_error\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"http_port\": {",
											"//                     \"type\": \"null\"",
											"//                 },",
											"//                 \"https_port\": {",
											"//                     \"type\": \"integer\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"stream_url\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"streamer_id\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"substream_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"thumbnails\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"thumbnails_url\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"title\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"user_attributes\": {",
											"//             \"type\": \"object\",",
											"//             \"required\": [",
											"//                 \"favorite\",",
											"//                 \"motion_alarm\"",
											"//             ],",
											"//             \"additionalProperties\": true,",
											"//             \"properties\": {",
											"//                 \"favorite\": {",
											"//                     \"type\": \"boolean\"",
											"//                 },",
											"//                 \"motion_alarm\": {",
											"//                     \"type\": \"boolean\"",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"video_only\": {",
											"//             \"type\": \"boolean\"",
											"//         },",
											"//         \"vision_alg\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_areas\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_enabled\": {",
											"//             \"type\": \"null\"",
											"//         },",
											"//         \"vision_gpu\": {",
											"//             \"type\": \"null\"",
											"//         }",
											"//     }",
											"// }",
											"",
											"//     pm.test('Schema is valid', function () {",
											"//         var JsoneData=JSON.parse(responseBody);",
											"//         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"//     });",
											"",
											"    pm.test(\"Проверка полей dvr_depth, dvr_lock_days, dvr_space, enabled, organization_id, name,  title, stream_url \", function () {",
											"        pm.expect(pm.response.json().dvr_depth).to.eql(1.0)",
											"        pm.expect(pm.response.json().dvr_lock_days).to.eql(2)",
											"        pm.expect(pm.response.json().dvr_space).to.eql(1)",
											"        pm.expect(pm.response.json().enabled).to.eql(true)",
											"        pm.expect(pm.response.json().organization_id).to.eql(Number(pm.environment.get(\"organizationId_flus\")))",
											"        pm.expect(pm.response.json().name).to.eql(\"3camera9-ATAT-4242-eto1-cameraATa777\")",
											"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().stream_url).to.eql(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\")",
											"        pm.expect(pm.response.json().onvif_ptz).to.eql(true)",
											"",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);",
											"// // иначе не проходит проверка по схеме"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/cameras/3camera9-ATAT-4242-eto1-cameraATa777",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"cameras",
										"3camera9-ATAT-4242-eto1-cameraATa777"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ссылка на скриншот с камеры (Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    setTimeout(function(){}, [6000]);    ",
											"    // pm.test(\"Status code is 200\", function () {",
											"    //     pm.response.to.have.status(200);",
											"    // });",
											"",
											"    pm.test(\"Проверка Content-Type в headers\", function () {",
											"        pm.expect( pm.response.headers.get('Content-Type')).to.eql(\"video/mp4\")",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [15000]);",
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{flussonic_api_key}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-Vsaas-Api-Key",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/3camera9-ATAT-4242-eto1-cameraATa777/preview.mp4?token={{cameraToken}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"3camera9-ATAT-4242-eto1-cameraATa777",
										"preview.mp4"
									],
									"query": [
										{
											"key": "token",
											"value": "{{cameraToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск пользователя (на платформу)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/flussonic/users/find?login=ATc1a2m3era",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"find"
									],
									"query": [
										{
											"key": "login",
											"value": "ATc1a2m3era"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Синхронизовать пользователя  Flussonic с пользователем платформы (запрос на платформу)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// try{",
											"// var url = pm.globals.get(\"host\") + \"/flussonic/users/find?login=ATc1a2m3era\";",
											"// var Au = \"Bearer \" + pm.environment.get(\"access_token\");",
											"// const preRequest = {",
											"//   url : url,",
											"//   method: 'GET',",
											"//   header: {",
											"//     'Authorization':  Au,",
											"//     \"Content-Type\": \"application/json\"",
											"//     }",
											"// };",
											"// pm.sendRequest(preRequest, function (err, response) {",
											"//     let res = response.json();",
											"//     res = JSON.stringify(res);",
											"//     pm.environment.set(\"res\", res);    ",
											"// });",
											"// setTimeout(function(){}, [500]);",
											"// }",
											"// catch(e)",
											"// {",
											"//     console.log(e)",
											"// }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204 No Content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{res}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/flussonic/users/synchronize?userId={{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"synchronize"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление пользователя флуссоника с сохранением данных на флуссонике. (запрос на платформу)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"userId\",",
											"            \"flussonicUserId\",",
											"            \"canEditOrganizations\",",
											"            \"canViewOrganizations\",",
											"            \"canEditSettings\",",
											"            \"enabled\",",
											"            \"organizations\",",
											"            \"canAddAgentCamera\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"userId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"flussonicUserId\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"canEditOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canViewOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canEditSettings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"organizations\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"canAddAgentCamera\": {",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    };",
											"    ",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.test('Schema is valid', function () {        ",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка изменяемого поля(canAddAgentCamera), а также userId и flussonicUserId, а также настроек (поля canEditOrganizations, canViewOrganizations, canEditSettings, enabled) и отсутствия organizations\",  () => {",
											"        pm.expect(pm.response.json().canAddAgentCamera).to.be.eql(true);",
											"        pm.expect(pm.response.json().userId).to.be.eql(pm.environment.get(\"id\"));",
											"        pm.expect(pm.response.json().flussonicUserId).to.be.eql(Number(pm.environment.get(\"flussonicUserId\")));",
											"        // pm.expect(pm.response.json().sessionId).to.be.eql(pm.environment.get(\"session_id_flus_user\"));",
											"        pm.expect(pm.response.json().canEditOrganizations).to.be.eql(true);",
											"        pm.expect(pm.response.json().canViewOrganizations).to.be.eql(true);",
											"        pm.expect(pm.response.json().canEditSettings).to.be.eql(true);",
											"        pm.expect(pm.response.json().enabled).to.be.eql(true);",
											"        pm.expect(pm.response.json().organizations).to.be.eql(null);",
											"        ",
											"    });",
											"    ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"{{userId_f}}\",\n    \"flussonicUserId\": {{flussonicUserId}},\n    \"canEditOrganizations\": true,\n    \"canViewOrganizations\": true,\n    \"canEditSettings\": true,\n    \"enabled\": true,\n    \"canAddAgentCamera\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/flussonic/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"flussonic",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeLimit  2 (запрос на платформу)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 2,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех домов пользователя (для дома с flus) (запрос на платформу)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    for (let i = 0; i < pm.response.json().length; i++){",
											"        if (pm.response.json()[i].title === \"ATc1a2m3era_organization\")",
											"            pm.environment.set(\"ATc1a2m3era_organization\", pm.response.json()[i].id);",
											"    }  ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generating a QR code to add a flussonic camera. ( на платформу)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set(\"QR\", pm.response.text().slice(pm.response.text().indexOf('\\n', 13) + 7) );",
											"pm.test(\"Проверка корректности QR кода\",  () => {",
											"var name_and_password = \"name\\npassword\" + pm.response.text().slice(pm.response.text().indexOf('\\n', 13));",
											"for(let key in pm.response.text()) {        ",
											"    pm.expect(pm.response.text()[key]).to.equal(name_and_password[key]);    ",
											"}",
											"});",
											"}",
											"catch(e){",
											"    console.log(e)",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"houseId\": \"{{ATc1a2m3era_organization}}\",\n  \"title\": \"string\",\n  \"wifiName\": \"name\",\n  \"wifiPassword\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras/flussonic/generateQr",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"flussonic",
										"generateQr"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление камеры с прошивкой флуссоник-агент ИРИС, генерация qr-кода для добавления камеры (3 способ добавления камер) (Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"token\",",
											"            \"valid_till\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"valid_till\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"organization_id\":{{organizationId_flus}},\n\"title\":\"QRcameraAT\",\n\"static\":true,\n\"preset_id\":1,\n\"enabled\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/agent-activation-tokens",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"agent-activation-tokens"
									]
								}
							},
							"response": []
						},
						{
							"name": "Активация qr-кода (Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"token\",",
											"            \"valid_till\",",
											"            \"camera_name\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"valid_till\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"camera_name\": {",
											"                \"type\": \"null\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка поля token\", function () {",
											"        pm.expect(pm.response.json().token).to.equal(pm.environment.get(\"QR\"));   ",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/agent-activation-tokens/{{QR}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"agent-activation-tokens",
										"{{QR}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск камер по agentId (2 способ добавления камер)(Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка количества обнаруженных камер (должно быть 0)\", function () {",
											"        pm.expect( pm.response.json().length).to.eql(0)",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/cameras?agent=true&search=123321",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"cameras"
									],
									"query": [
										{
											"key": "agent",
											"value": "true"
										},
										{
											"key": "search",
											"value": "123321"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Управление событиями у камер на временной шкале (Flussonic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка наличия id в ответе\", function () {",
											"        pm.expect( pm.response.json().length).to.eql(1)",
											"        pm.expect( typeof(pm.response.json()[0])).to.eql(\"string\")",
											"        ",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"camera_id\":\"3camera9-ATAT-4242-eto1-cameraATa777\",\n\"type\":\"motion\",\n\"start_at\":1647494080,\n\"end_at\":1647494081\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/events",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Перемещение камеры из одного дома в другой  (на платформу)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка полей id,title, houseId,rtspStream,platformType,videoOnly, ptz,status,enabled,dvrDepth, dvrSpace, dvrLockDays, motionDetectorEnabled, agentId и token\", function () {",
											"        pm.expect( pm.response.json().id).to.eql(\"3camera9-ATAT-4242-eto1-cameraATa777\");",
											"        pm.expect( pm.response.json().title).to.eql(\"ATc1a2m3era\");",
											"        pm.expect( pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));",
											"        pm.expect( pm.response.json().rtspStream).to.eql(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
											"        pm.expect( pm.response.json().platformType).to.eql(\"FLUSSONIC\");",
											"        pm.expect( pm.response.json().videoOnly).to.eql(false);",
											"        pm.expect( pm.response.json().ptz).to.eql(true);",
											"        // pm.expect( pm.response.json().status).to.eql(\"ONLINE\");",
											"        pm.expect( pm.response.json().enabled).to.eql(true);",
											"        pm.expect( pm.response.json().dvr.dvrDepth).to.eql(1);",
											"        pm.expect( pm.response.json().dvr.dvrSpace).to.eql(1);",
											"        pm.expect( pm.response.json().dvr.dvrLockDays).to.eql(2);",
											"        pm.expect( pm.response.json().motionDetectorEnabled).to.eql(true);",
											"        pm.expect( pm.response.json().agentId).to.eql(null);",
											"        pm.expect(typeof(pm.response.json().token)).to.eql(\"string\");   ",
											"        pm.expect(pm.response.json().token).to.not.eql(pm.environment.get(\"cameraToken\"));   ",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"title\",",
											"            \"houseId\",",
											"            \"rtspStream\",",
											"            \"platformType\",",
											"            \"serial\",",
											"            \"videoOnly\",",
											"            \"ptz\",",
											"            \"streamUrl\",",
											"            \"status\",",
											"            \"deviceLocation\",",
											"            \"enabled\",",
											"            \"dvr\",",
											"            \"motionDetectorEnabled\",",
											"            \"agentId\",",
											"            \"token\",",
											"            \"motionDelay\"",
											"        ],",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"houseId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"rtspStream\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"platformType\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"serial\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"videoOnly\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"ptz\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"streamUrl\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"deviceLocation\": {",
											"                \"type\": \"array\",",
											"                \"items\": {}",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"dvr\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"dvrDepth\",",
											"                    \"dvrSpace\",",
											"                    \"dvrLockDays\"",
											"                ],",
											"                \"properties\": {",
											"                    \"dvrDepth\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"dvrSpace\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"dvrLockDays\": {",
											"                        \"type\": \"integer\"",
											"                    }",
											"                }",
											"            },",
											"            \"motionDetectorEnabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"agentId\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"motionDelay\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/video/cameras/flussonic/move/3camera9-ATAT-4242-eto1-cameraATa777?houseId={{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras",
										"flussonic",
										"move",
										"3camera9-ATAT-4242-eto1-cameraATa777"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{houseId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос камеры (Flussonic) (проверка обновления камеры) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.environment.set(\"cameraToken\", pm.response.json().playback_config.token);",
											"",
											"    pm.test(\"Проверка полей dvr_depth, dvr_lock_days, dvr_space, enabled, organization_id, name,  title, stream_url \", function () {",
											"        pm.expect(pm.response.json().dvr_depth).to.eql(1.0)",
											"        pm.expect(pm.response.json().dvr_lock_days).to.eql(2)",
											"        pm.expect(pm.response.json().dvr_space).to.eql(1)",
											"        pm.expect(pm.response.json().enabled).to.eql(true)",
											"        pm.expect(pm.response.json().organization_id).to.not.eql(Number(pm.environment.get(\"organizationId_flus\")))",
											"        pm.expect(pm.response.json().name).to.eql(\"3camera9-ATAT-4242-eto1-cameraATa777\")",
											"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era\")",
											"        pm.expect(pm.response.json().stream_url).to.eql(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\")",
											"        pm.expect(pm.response.json().onvif_ptz).to.eql(true)",
											"",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);",
											"// // иначе не проходит проверка по схеме"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/cameras/3camera9-ATAT-4242-eto1-cameraATa777",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"cameras",
										"3camera9-ATAT-4242-eto1-cameraATa777"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление камеры",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"success = true ?\", function () {",
											"        pm.expect(pm.response.json().success).to.eql(true)       ",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus_user}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"stream_url\":\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n\"organization_id\":{{organizationId_flus}},\n\"onvif_ptz\":false,\n\"dvr_space\":1,\n\"video_only\":\"false\",\n\"dvr_depth\":1,\n\"dvr_lock_days\":1,\n\"name\":\"3camera9-bbce-4241-eto1-cameraATa895\",\n\"title\":\"ATc1a2m3era\",\n\"motion_detector_enabled\":true,\n\"enabled\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/cameras/3camera9-ATAT-4242-eto1-cameraATa777",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"cameras",
										"3camera9-ATAT-4242-eto1-cameraATa777"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление организации",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"success = true ?\", function () {",
											"        pm.expect(pm.response.json().success).to.eql(true)       ",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "force",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/organizations/{{organizationId_flus}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"organizations",
										"{{organizationId_flus}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление пользователя с Flussonic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"success = true ?\", function () {",
											"        pm.expect(pm.response.json().success).to.eql(true)       ",
											"    });",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{session_id_flus}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-vsaas-session",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{flussonic_url}}/vsaas/api/v2/users/{{flussonicUserId}}",
									"host": [
										"{{flussonic_url}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"users",
										"{{flussonicUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "удалить пользователя с платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь удален (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CameraAdministrationApiController",
			"item": [
				{
					"name": "0. Создать пользователя и т.д.",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mailATc1a2m3era.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"ATc1a2m3era\",\n    \"password\": \"ATc1a2m3era\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"ATc1a2m3era\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "ATc1a2m3era",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ATc1a2m3era",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
											"",
											"    var schema =  {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"variables\",",
											"            \"dashboardItems\",",
											"            \"houseGroups\",",
											"            \"guards\",",
											"            \"title\",",
											"            \"ownerId\",",
											"            \"address\",",
											"            \"apartment\",",
											"            \"timeZone\",",
											"            \"type\",",
											"            \"startTime\",",
											"            \"guardStatus\",",
											"            \"underGuard\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"variables\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"dashboardItems\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"houseGroups\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"guards\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {}",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"ownerId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"address\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"apartment\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"timeZone\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"startTime\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"guardStatus\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"underGuard\": {",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful request (checking the code)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "(admin)CameraAdministrationApiController",
					"item": [
						{
							"name": "Добавление пользователя и камеры",
							"item": [
								{
									"name": "Удалить пользователя с видеоплатформы ELTEX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=ELTEX",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "ELTEX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Adding a user to the video platform.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(админ) changeLimit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newLimit\": 1,\n  \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"limit",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Adding a camera to the platform.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"houseId\",",
													"        \"rtspStream\",",
													"        \"platformType\",",
													"        \"videoOnly\",",
													"        \"ptz\",",
													"        \"streamUrl\",",
													"        \"status\",",
													"        \"deviceLocation\",",
													"        \"enabled\",",
													"        \"dvr\",",
													"        \"motionDetectorEnabled\",",
													"        \"agentId\",",
													"        \"token\",",
													"        \"motionDelay\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"houseId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"rtspStream\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"platformType\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"videoOnly\": {",
													"            \"type\": \"boolean\"",
													"        },",
													"        \"ptz\": {",
													"            \"type\": \"boolean\"",
													"        },",
													"        \"streamUrl\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"status\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"deviceLocation\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"enabled\": {",
													"            \"type\": \"boolean\"",
													"        },",
													"        \"dvr\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"dvrDepth\",",
													"                \"dvrSpace\",",
													"                \"dvrLockDays\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"dvrDepth\": {",
													"                    // \"type\": \"null\"",
													"                },",
													"                \"dvrSpace\": {",
													"                    // \"type\": \"null\"",
													"                },",
													"                \"dvrLockDays\": {",
													"                    // \"type\": \"null\"",
													"                }",
													"            }",
													"        },",
													"        \"motionDetectorEnabled\": {",
													"            \"type\": \"boolean\"",
													"        },",
													"        \"agentId\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"motionDelay\": {",
													"        }",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка наличия полей id и token и их типа. Проверка значения поля rtspStream.\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string;",
													"    pm.expect(pm.response.json()).to.have.property('token');",
													"    pm.expect(pm.response.json().token).to.string;",
													"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\");",
													"    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Редактирование камеры и включение её в охрану Copy",
							"item": [
								{
									"name": "Подготовить и добавить контроллер",
									"item": [
										{
											"name": "Подготовка контроллера",
											"item": [
												{
													"name": "Параметры контроллера",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Настройки применены\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
																	"    if(pm.response.code == 400) {",
																	"        pm.expect(pm.response.text()).to.include(\"connected\");",
																	"    }",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{zway_ctl_host}}/ctl/info",
															"host": [
																"{{zway_ctl_host}}"
															],
															"path": [
																"ctl",
																"info"
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение типа платформы",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"let isSL10 = pm.response.json().version.includes(\"-b\");",
																	"",
																	"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
																	"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
																	"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	"postman.setEnvironmentVariable (\"current_time\", Date.now());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/version",
															"host": [
																"{{host}}"
															],
															"path": [
																"version"
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение информации о платформе",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var sdk = require('postman-collection');",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
																	"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	"postman.setEnvironmentVariable (\"current_time\", Date.now());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/info",
															"host": [
																"{{host}}"
															],
															"path": [
																"info"
															]
														}
													},
													"response": []
												},
												{
													"name": "Создание датчика открытия двери",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Датчик присутствует\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
																	"    if(pm.response.code == 400) {",
																	"        pm.expect(pm.response.text()).to.include(\"already exists\");",
																	"    }",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"template\": \"sz_mct\",\n    \"nodeId\": 7\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{zway_ctl_host}}/devices/add",
															"host": [
																"{{zway_ctl_host}}"
															],
															"path": [
																"devices",
																"add"
															]
														}
													},
													"response": []
												},
												{
													"name": "Подключение контроллера",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
																	"});",
																	"// Чтобы платформа успела принять подключение контроллера",
																	"setTimeout(function(){}, [200]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	"postman.setEnvironmentVariable (\"current_time\", Date.now());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{zway_ctl_host}}/ctl/connect",
															"host": [
																"{{zway_ctl_host}}"
															],
															"path": [
																"ctl",
																"connect"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "noauth"
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Добавить контроллер",
											"item": [
												{
													"name": "Подключение к WebSocket (абонент 1)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(function(){}, [5000]);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
															"host": [
																"{{websocket_proxy_host}}"
															],
															"path": [
																"connect"
															],
															"query": [
																{
																	"key": "host",
																	"value": "{{host_ws}}/event_ws"
																},
																{
																	"key": "token",
																	"value": "{{ACCESS_TOKEN}}"
																},
																{
																	"key": "subprotocol",
																	"value": "SmartHome"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Добавление контроллера.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {",
																	"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
																	"setTimeout(function(){}, [2500]); ",
																	"}",
																	"catch(e) {",
																	"    // выводим исключение в консоль",
																	"    console.log(e);",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"postman.setEnvironmentVariable (\"current_time\", Date.now());",
																	"console.log(Date.now())"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{access_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/ctl",
															"host": [
																"{{host}}"
															],
															"path": [
																"ctl"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ожидание события добавления устройства",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&timeout=180000&C_newStatus=ONLINE",
															"host": [
																"{{websocket_proxy_host}}"
															],
															"path": [
																"await"
															],
															"query": [
																{
																	"key": "timeFrom",
																	"value": "{{current_time}}"
																},
																{
																	"key": "C_controllerId",
																	"value": "{{ctl_id}}"
																},
																{
																	"key": "C_type",
																	"value": "DEVICE_STATUS_CHANGE"
																},
																{
																	"key": "C_deviceInfo.nodeId",
																	"value": "ZWAVE_ELTEX_7",
																	"disabled": true
																},
																{
																	"key": "timeout",
																	"value": "180000"
																},
																{
																	"key": "C_newStatus",
																	"value": "ONLINE"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Отключение от WebSocket",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{websocket_proxy_host}}/disconnect",
															"host": [
																"{{websocket_proxy_host}}"
															],
															"path": [
																"disconnect"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Получить список подходящих под охрану устройств и камер.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка количества devices, а также deviceType, houseId, nodeId, controllerId, title, muted, disabled и guardInclude\",  () => {",
													"        pm.expect(pm.response.json().devices.length).to.eql(1);",
													"        pm.expect(pm.response.json().devices[0].deviceType).to.equal(\"Z_WAY_DEVICE\");",
													"        pm.expect(pm.response.json().devices[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().devices[0].nodeId).to.equal(\"ZWAVE_ELTEX_7\");    ",
													"        pm.expect(pm.response.json().devices[0].controllerId).to.equal(pm.environment.get(\"ctl_id\"));",
													"        pm.expect(pm.response.json().devices[0].title).to.equal(\"ZWAVE_ELTEX_7\");",
													"        pm.expect(pm.response.json().devices[0].muted).to.equal(false);",
													"        pm.expect(pm.response.json().devices[0].disabled).to.equal(false);",
													"        // pm.expect(pm.response.json().devices[0].status).to.equal(\"ONLINE\");",
													"        pm.expect(pm.response.json().devices[0].guardInclude).to.equal(true);",
													"    });",
													"",
													"",
													"    var schema = {",
													"        \"id\": \"8bb04752-71fd-42ed-bc2f-5dad8c503b9f\",",
													"        \"title\": \"1\",",
													"        \"houseId\": \"fb8d4dfa-d031-40fc-95c1-da9ab2bbd7d5\",",
													"        \"rtspStream\": null,",
													"        \"platformType\": \"FLUSSONIC\",",
													"        \"videoOnly\": false,",
													"        \"ptz\": false,",
													"        \"streamUrl\": null,",
													"        \"status\": \"ONLINE\",",
													"        \"deviceLocation\": [],",
													"        \"enabled\": true,",
													"        \"dvr\": {",
													"            \"dvrDepth\": null,",
													"            \"dvrSpace\": null,",
													"            \"dvrLockDays\": null",
													"        },",
													"        \"motionDetectorEnabled\": false,",
													"        \"agentId\": null,",
													"        \"token\": null,",
													"        \"motionDelay\": null",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/guard/suitable?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование камеры на платформе инженером ТП. (включаем dvr)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка отсутвия значений в полях rtspStream, streamUrl и token\",  () => {",
													"        pm.expect(pm.response.json().rtspStream).to.equal(null);      ",
													"        pm.expect(pm.response.json().streamUrl).to.equal(null);",
													"        pm.expect(pm.response.json().token).to.equal(null);",
													"    });",
													"    pm.test(\"Проверка изменения полей, dvrDepth, dvrSpace и dvrLockDays \",  () => {",
													"        pm.expect(pm.response.json().dvr.dvrDepth).to.equal(1);      ",
													"        pm.expect(pm.response.json().dvr.dvrSpace).to.equal(1);",
													"        pm.expect(pm.response.json().dvr.dvrLockDays).to.equal(1);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"ONLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1.0,\n        \"dvrSpace\": 1.0,\n        \"dvrLockDays\": 1.0\n    },\n    \"motionDetectorEnabled\": true,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить список подходящих под охрану устройств и камер. (камера появилась в охране?)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка количества devices, а также deviceType, houseId, nodeId, controllerId, title, muted, disabled, status и guardInclude\",  () => {",
													"        pm.expect(pm.response.json().devices.length).to.eql(2);",
													"        for(let i in pm.response.json().devices){",
													"            if(pm.response.json().devices[i].deviceType === \"Z_WAY_DEVICE\"){",
													"                pm.expect(pm.response.json().devices[i].deviceType).to.equal(\"Z_WAY_DEVICE\");",
													"                pm.expect(pm.response.json().devices[i].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"                pm.expect(pm.response.json().devices[i].nodeId).to.equal(\"ZWAVE_ELTEX_7\");    ",
													"                pm.expect(pm.response.json().devices[i].controllerId).to.equal(pm.environment.get(\"ctl_id\"));",
													"                pm.expect(pm.response.json().devices[i].title).to.equal(\"ZWAVE_ELTEX_7\");",
													"                pm.expect(pm.response.json().devices[i].muted).to.equal(false);",
													"                pm.expect(pm.response.json().devices[i].disabled).to.equal(false);",
													"                pm.expect(pm.response.json().devices[i].status).to.equal(\"ONLINE\");",
													"                pm.expect(pm.response.json().devices[i].guardInclude).to.equal(true);",
													"            }",
													"            else{",
													"                pm.expect(pm.response.json().devices[i].deviceType).to.equal(\"CAMERA\");",
													"                pm.expect(pm.response.json().devices[i].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"                pm.expect(pm.response.json().devices[i].title).to.equal(\"1\");",
													"                pm.expect(pm.response.json().devices[i].muted).to.equal(false);",
													"                pm.expect(pm.response.json().devices[i].disabled).to.equal(false);",
													"                // pm.expect(pm.response.json().devices[i].status).to.equal(\"ONLINE\");",
													"                pm.expect(pm.response.json().devices[i].guardInclude).to.equal(true);",
													"            }",
													"        }",
													"    });",
													"",
													"",
													"    var schema = {",
													"        \"id\": \"8bb04752-71fd-42ed-bc2f-5dad8c503b9f\",",
													"        \"title\": \"1\",",
													"        \"houseId\": \"fb8d4dfa-d031-40fc-95c1-da9ab2bbd7d5\",",
													"        \"rtspStream\": null,",
													"        \"platformType\": \"FLUSSONIC\",",
													"        \"videoOnly\": false,",
													"        \"ptz\": false,",
													"        \"streamUrl\": null,",
													"        \"status\": \"ONLINE\",",
													"        \"deviceLocation\": [],",
													"        \"enabled\": true,",
													"        \"dvr\": {",
													"            \"dvrDepth\": null,",
													"            \"dvrSpace\": null,",
													"            \"dvrLockDays\": null",
													"        },",
													"        \"motionDetectorEnabled\": false,",
													"        \"agentId\": null,",
													"        \"token\": null,",
													"        \"motionDelay\": null",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [9000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/guard/suitable?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование камеры на платформе инженером ТП. (выключаем dvr)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка отсутвия значений в полях rtspStream, streamUrl и token\",  () => {",
													"        pm.expect(pm.response.json().rtspStream).to.equal(null);      ",
													"        pm.expect(pm.response.json().streamUrl).to.equal(null);",
													"        pm.expect(pm.response.json().token).to.equal(null);",
													"    });",
													"    pm.test(\"Проверка изменения полей, dvrDepth, dvrSpace и dvrLockDays \",  () => {",
													"        pm.expect(pm.response.json().dvr.dvrDepth).to.equal(0);      ",
													"        pm.expect(pm.response.json().dvr.dvrSpace).to.equal(0);",
													"        pm.expect(pm.response.json().dvr.dvrLockDays).to.equal(0);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"ONLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 0,\n        \"dvrSpace\": 0,\n        \"dvrLockDays\": 0\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить список подходящих под охрану устройств и камер. (камеры больше нет в охране?)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка количества devices, а также deviceType, houseId, nodeId, controllerId, title, muted, disabled, status и guardInclude\",  () => {",
													"        pm.expect(pm.response.json().devices.length).to.eql(1);",
													"        pm.expect(pm.response.json().devices[0].deviceType).to.equal(\"Z_WAY_DEVICE\");",
													"        pm.expect(pm.response.json().devices[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().devices[0].nodeId).to.equal(\"ZWAVE_ELTEX_7\");    ",
													"        pm.expect(pm.response.json().devices[0].controllerId).to.equal(pm.environment.get(\"ctl_id\"));",
													"        pm.expect(pm.response.json().devices[0].title).to.equal(\"ZWAVE_ELTEX_7\");",
													"        pm.expect(pm.response.json().devices[0].muted).to.equal(false);",
													"        pm.expect(pm.response.json().devices[0].disabled).to.equal(false);",
													"        pm.expect(pm.response.json().devices[0].status).to.equal(\"ONLINE\");",
													"        pm.expect(pm.response.json().devices[0].guardInclude).to.equal(true);",
													"    });",
													"",
													"",
													"    var schema = {",
													"        \"id\": \"8bb04752-71fd-42ed-bc2f-5dad8c503b9f\",",
													"        \"title\": \"1\",",
													"        \"houseId\": \"fb8d4dfa-d031-40fc-95c1-da9ab2bbd7d5\",",
													"        \"rtspStream\": null,",
													"        \"platformType\": \"FLUSSONIC\",",
													"        \"videoOnly\": false,",
													"        \"ptz\": false,",
													"        \"streamUrl\": null,",
													"        \"status\": \"ONLINE\",",
													"        \"deviceLocation\": [],",
													"        \"enabled\": true,",
													"        \"dvr\": {",
													"            \"dvrDepth\": null,",
													"            \"dvrSpace\": null,",
													"            \"dvrLockDays\": null",
													"        },",
													"        \"motionDetectorEnabled\": false,",
													"        \"agentId\": null,",
													"        \"token\": null,",
													"        \"motionDelay\": null",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/guard/suitable?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "(админ) changeLimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 2,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации с камеры.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверка полей id,title, houseId, platformType .\",  () => {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"cameraId\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"1\");",
											"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseId\"));",
											"    pm.expect(pm.response.json().platformType).to.equal(\"FLUSSONIC\");    ",
											"});",
											"pm.test(\"Проверка полей rtspStream и streamUrl\",  () => {",
											"    pm.expect(pm.response.json().rtspStream).to.equal(null); ",
											"    pm.expect(pm.response.json().streamUrl).to.equal(null);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/video/cameras/{{cameraId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"{{cameraId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос всех камер дома.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"",
											"pm.test(\"Проверка полей id,title, houseId, platformType, а также количества камер.\",  () => {",
											"    pm.expect(pm.response.json()[0].id).to.eql(pm.environment.get(\"cameraId\"));",
											"    pm.expect(pm.response.json()[0].title).to.equal(\"1\");",
											"    pm.expect(pm.response.json()[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
											"    pm.expect(pm.response.json()[0].platformType).to.equal(\"FLUSSONIC\");",
											"    pm.expect(pm.response.json().length).to.equal(1);",
											"});",
											"pm.test(\"Проверка полей rtspStream и streamUrl\",  () => {",
											"    pm.expect(pm.response.json()[0].rtspStream).to.equal(null); ",
											"    pm.expect(pm.response.json()[0].streamUrl).to.equal(null);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/video/cameras/houses/{{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"houses",
										"{{houseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение бесконечного списка событий для администратора.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"// var schema = {",
											"//     \"type\": \"object\",",
											"//     \"required\": [",
											"//         \"type\",",
											"//         \"total\",",
											"//         \"data\",",
											"//         \"next_time\",",
											"//         \"next_time_millis\",",
											"//         \"next_offset\",",
											"//         \"timestamp_unread_event\",",
											"//         \"last_read_event_time_millis\"",
											"//     ],",
											"//     \"additionalProperties\": true,",
											"//     \"properties\": {",
											"//         \"type\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"total\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"data\": {",
											"//             \"type\": \"array\",",
											"//             \"additionalItems\": true,",
											"//             \"items\": {",
											"//                 \"type\": \"object\",",
											"//                 \"required\": [",
											"//                     \"id\",",
											"//                     \"message\",",
											"//                     \"level\",",
											"//                     \"type\",",
											"//                     \"icon_name\",",
											"//                     \"origin_id\",",
											"//                     \"origin_type\",",
											"//                     \"created_at\",",
											"//                     \"created_at_millis\",",
											"//                     \"house_id\",",
											"//                     \"user_id\",",
											"//                     \"links\",",
											"//                     \"color\",",
											"//                     \"section_type\",",
											"//                     \"section_id\"",
											"//                 ],",
											"//                 \"additionalProperties\": true,",
											"//                 \"properties\": {",
											"//                     \"id\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"message\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"level\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"type\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"icon_name\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"origin_id\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"origin_type\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"created_at\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"created_at_millis\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"house_id\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"user_id\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"links\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"color\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"section_type\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"section_id\": {",
											"//                         \"type\": \"null\"",
											"//                     }",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"next_time\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"next_time_millis\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"next_offset\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"timestamp_unread_event\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"last_read_event_time_millis\": {",
											"//             \"type\": \"integer\"",
											"//         }",
											"//     }",
											"// };",
											"     ",
											"// pm.test('Schema is valid', function () {",
											"//         var JsoneData=JSON.parse(responseBody);",
											"//         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"// });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/users/{{id}}/events/endless?offset=0&limit=50&language=ru",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"users",
										"{{id}}",
										"events",
										"endless"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "language",
											"value": "ru"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос всех девайсов, принадлежащих дому.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка длинны ответа\", function () {",
											"        pm.expect(pm.response.json().length).to.gte(1)",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/houses/{{houseId}}/devices",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"houses",
										"{{houseId}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск камеры с прошивкой flussonic-agent.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 403\", function () {",
											"        pm.response.to.have.status(403);",
											"    });",
											"    pm.test(\"Проверка сообщения\", function () {",
											"        pm.expect(pm.response.json().message).to.eql(\"Camera searching is not available for user\")",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/video/cameras/agent/agentId",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"agent",
										"agentId"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "(инженер техподдержки)CameraAdministrationApiController",
					"item": [
						{
							"name": "Создать заявку в ТП",
							"item": [
								{
									"name": "Создание заявки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.environment.set(\"test_user_1_ticket\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clientSupportChat\": true,\n    \"userId\": \"{{id}}\",\n    \"houseId\": \"{{houseId}}\",\n    \"title\": \"Заходите в мой дом\",\n    \"usersDescription\": \"Мои двери открыты\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Создать инженера техподдержки",
							"item": [
								{
									"name": "Создать инженера техподдержки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id_technical_support_engineer\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Инженер техподдержки создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"\",\n    \"username\": \"7.technical_support_engineer\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": null,\n    \"name\": null,\n    \"patronymic\": null,\n    \"email\": null,\n    \"additionalEmail\": [],\n    \"phone\": \"\",\n    \"role\": \"support-engineer\",\n    \"roleId\": \"support-engineer\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"ownedHouseIds\": [],\n    \"password\": \"7.technical_support_engineer\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (инженер техподдержки)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "7.technical_support_engineer",
													"type": "text"
												},
												{
													"key": "password",
													"value": "7.technical_support_engineer",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Назначить исполнителя заявки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assignedToId\": \"{{id_technical_support_engineer}}\",\n    \"id\": \"{{test_user_1_ticket}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Редактирование камеры и включение её в охрану",
							"item": [
								{
									"name": "Получить список подходящих под охрану устройств и камер.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка количества devices, а также deviceType, houseId, nodeId, controllerId, title, muted, disabled, status и guardInclude\",  () => {",
													"        pm.expect(pm.response.json().devices.length).to.eql(1);",
													"        pm.expect(pm.response.json().devices[0].deviceType).to.equal(\"Z_WAY_DEVICE\");",
													"        pm.expect(pm.response.json().devices[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().devices[0].nodeId).to.equal(\"ZWAVE_ELTEX_7\");    ",
													"        pm.expect(pm.response.json().devices[0].controllerId).to.equal(pm.environment.get(\"ctl_id\"));",
													"        pm.expect(pm.response.json().devices[0].title).to.equal(\"ZWAVE_ELTEX_7\");",
													"        pm.expect(pm.response.json().devices[0].muted).to.equal(false);",
													"        pm.expect(pm.response.json().devices[0].disabled).to.equal(false);",
													"        pm.expect(pm.response.json().devices[0].status).to.equal(\"ONLINE\");",
													"        pm.expect(pm.response.json().devices[0].guardInclude).to.equal(true);",
													"    });",
													"",
													"",
													"    var schema = {",
													"        \"id\": \"8bb04752-71fd-42ed-bc2f-5dad8c503b9f\",",
													"        \"title\": \"1\",",
													"        \"houseId\": \"fb8d4dfa-d031-40fc-95c1-da9ab2bbd7d5\",",
													"        \"rtspStream\": null,",
													"        \"platformType\": \"FLUSSONIC\",",
													"        \"videoOnly\": false,",
													"        \"ptz\": false,",
													"        \"streamUrl\": null,",
													"        \"status\": \"ONLINE\",",
													"        \"deviceLocation\": [],",
													"        \"enabled\": true,",
													"        \"dvr\": {",
													"            \"dvrDepth\": null,",
													"            \"dvrSpace\": null,",
													"            \"dvrLockDays\": null",
													"        },",
													"        \"motionDetectorEnabled\": false,",
													"        \"agentId\": null,",
													"        \"token\": null,",
													"        \"motionDelay\": null",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/guard/suitable?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование камеры на платформе инженером ТП. (включаем dvr)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка отсутвия значений в полях rtspStream, streamUrl и token\",  () => {",
													"        pm.expect(pm.response.json().rtspStream).to.equal(null);      ",
													"        pm.expect(pm.response.json().streamUrl).to.equal(null);",
													"        pm.expect(pm.response.json().token).to.equal(null);",
													"    });",
													"    pm.test(\"Проверка изменения полей, dvrDepth, dvrSpace и dvrLockDays \",  () => {",
													"        pm.expect(pm.response.json().dvr.dvrDepth).to.equal(1);      ",
													"        pm.expect(pm.response.json().dvr.dvrSpace).to.equal(1);",
													"        pm.expect(pm.response.json().dvr.dvrLockDays).to.equal(1);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"ONLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1.0,\n        \"dvrSpace\": 1.0,\n        \"dvrLockDays\": 1.0\n    },\n    \"motionDetectorEnabled\": true,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить список подходящих под охрану устройств и камер. (камера появилась в охране?)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка количества devices, а также deviceType, houseId, nodeId, controllerId, title, muted, disabled, status и guardInclude\",  () => {",
													"        pm.expect(pm.response.json().devices.length).to.eql(2);",
													"        for(let i in pm.response.json().devices){",
													"            if(pm.response.json().devices[i].deviceType === \"Z_WAY_DEVICE\"){",
													"                pm.expect(pm.response.json().devices[i].deviceType).to.equal(\"Z_WAY_DEVICE\");",
													"                pm.expect(pm.response.json().devices[i].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"                pm.expect(pm.response.json().devices[i].nodeId).to.equal(\"ZWAVE_ELTEX_7\");    ",
													"                pm.expect(pm.response.json().devices[i].controllerId).to.equal(pm.environment.get(\"ctl_id\"));",
													"                pm.expect(pm.response.json().devices[i].title).to.equal(\"ZWAVE_ELTEX_7\");",
													"                pm.expect(pm.response.json().devices[i].muted).to.equal(false);",
													"                pm.expect(pm.response.json().devices[i].disabled).to.equal(false);",
													"                pm.expect(pm.response.json().devices[i].status).to.equal(\"ONLINE\");",
													"                pm.expect(pm.response.json().devices[i].guardInclude).to.equal(true);",
													"            }",
													"            else{",
													"                pm.expect(pm.response.json().devices[i].deviceType).to.equal(\"CAMERA\");",
													"                pm.expect(pm.response.json().devices[i].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"                pm.expect(pm.response.json().devices[i].title).to.equal(\"1\");",
													"                pm.expect(pm.response.json().devices[i].muted).to.equal(false);",
													"                pm.expect(pm.response.json().devices[i].disabled).to.equal(false);",
													"                // pm.expect(pm.response.json().devices[i].status).to.equal(\"ONLINE\");",
													"                pm.expect(pm.response.json().devices[i].guardInclude).to.equal(true);",
													"            }",
													"        }",
													"    });",
													"",
													"",
													"    var schema = {",
													"        \"id\": \"8bb04752-71fd-42ed-bc2f-5dad8c503b9f\",",
													"        \"title\": \"1\",",
													"        \"houseId\": \"fb8d4dfa-d031-40fc-95c1-da9ab2bbd7d5\",",
													"        \"rtspStream\": null,",
													"        \"platformType\": \"FLUSSONIC\",",
													"        \"videoOnly\": false,",
													"        \"ptz\": false,",
													"        \"streamUrl\": null,",
													"        \"status\": \"ONLINE\",",
													"        \"deviceLocation\": [],",
													"        \"enabled\": true,",
													"        \"dvr\": {",
													"            \"dvrDepth\": null,",
													"            \"dvrSpace\": null,",
													"            \"dvrLockDays\": null",
													"        },",
													"        \"motionDetectorEnabled\": false,",
													"        \"agentId\": null,",
													"        \"token\": null,",
													"        \"motionDelay\": null",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [9000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/guard/suitable?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование камеры на платформе инженером ТП. (выключаем dvr)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка отсутвия значений в полях rtspStream, streamUrl и token\",  () => {",
													"        pm.expect(pm.response.json().rtspStream).to.equal(null);      ",
													"        pm.expect(pm.response.json().streamUrl).to.equal(null);",
													"        pm.expect(pm.response.json().token).to.equal(null);",
													"    });",
													"    pm.test(\"Проверка изменения полей, dvrDepth, dvrSpace и dvrLockDays \",  () => {",
													"        pm.expect(pm.response.json().dvr.dvrDepth).to.equal(0);      ",
													"        pm.expect(pm.response.json().dvr.dvrSpace).to.equal(0);",
													"        pm.expect(pm.response.json().dvr.dvrLockDays).to.equal(0);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"ONLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 0,\n        \"dvrSpace\": 0,\n        \"dvrLockDays\": 0\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить список подходящих под охрану устройств и камер. (камеры больше нет в охране?)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка количества devices, а также deviceType, houseId, nodeId, controllerId, title, muted, disabled и guardInclude\",  () => {",
													"        pm.expect(pm.response.json().devices.length).to.eql(1);",
													"        pm.expect(pm.response.json().devices[0].deviceType).to.equal(\"Z_WAY_DEVICE\");",
													"        pm.expect(pm.response.json().devices[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().devices[0].nodeId).to.equal(\"ZWAVE_ELTEX_7\");    ",
													"        pm.expect(pm.response.json().devices[0].controllerId).to.equal(pm.environment.get(\"ctl_id\"));",
													"        pm.expect(pm.response.json().devices[0].title).to.equal(\"ZWAVE_ELTEX_7\");",
													"        pm.expect(pm.response.json().devices[0].muted).to.equal(false);",
													"        pm.expect(pm.response.json().devices[0].disabled).to.equal(false);",
													"        // pm.expect(pm.response.json().devices[0].status).to.equal(\"ONLINE\");",
													"        pm.expect(pm.response.json().devices[0].guardInclude).to.equal(true);",
													"    });",
													"",
													"",
													"    var schema = {",
													"        \"id\": \"8bb04752-71fd-42ed-bc2f-5dad8c503b9f\",",
													"        \"title\": \"1\",",
													"        \"houseId\": \"fb8d4dfa-d031-40fc-95c1-da9ab2bbd7d5\",",
													"        \"rtspStream\": null,",
													"        \"platformType\": \"FLUSSONIC\",",
													"        \"videoOnly\": false,",
													"        \"ptz\": false,",
													"        \"streamUrl\": null,",
													"        \"status\": \"ONLINE\",",
													"        \"deviceLocation\": [],",
													"        \"enabled\": true,",
													"        \"dvr\": {",
													"            \"dvrDepth\": null,",
													"            \"dvrSpace\": null,",
													"            \"dvrLockDays\": null",
													"        },",
													"        \"motionDetectorEnabled\": false,",
													"        \"agentId\": null,",
													"        \"token\": null,",
													"        \"motionDelay\": null",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/guard/suitable?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "(инженер техподдержки)changeLimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Будет поддержано в рамках 1.26 - 1.28 ",
											"// pm.test(\"Status code is 204\", function () {",
											"//     pm.response.to.have.status(204);",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newLimit\": 2,\n  \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации с камеры.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"houseId\",",
											"        \"rtspStream\",",
											"        \"platformType\",",
											"        \"serial\",",
											"        \"videoOnly\",",
											"        \"ptz\",",
											"        \"streamUrl\",",
											"        \"status\",",
											"        \"deviceLocation\",",
											"        \"enabled\",",
											"        \"dvr\",",
											"        \"motionDetectorEnabled\",",
											"        \"agentId\",",
											"        \"token\",",
											"        \"motionDelay\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"rtspStream\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"platformType\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"serial\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"videoOnly\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ptz\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"streamUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"deviceLocation\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"dvr\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"dvrDepth\",",
											"                \"dvrSpace\",",
											"                \"dvrLockDays\"",
											"            ],",
											"            \"properties\": {",
											"                \"dvrDepth\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"dvrSpace\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"dvrLockDays\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        },",
											"        \"motionDetectorEnabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"agentId\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"token\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"motionDelay\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей id,title, houseId, platformType .\",  () => {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"cameraId\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"1\");",
											"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseId\"));",
											"    pm.expect(pm.response.json().platformType).to.equal(\"FLUSSONIC\");    ",
											"});",
											"pm.test(\"Проверка полей rtspStream и streamUrl\",  () => {",
											"    pm.expect(pm.response.json().rtspStream).to.equal(null); ",
											"    pm.expect(pm.response.json().streamUrl).to.equal(null);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/video/cameras/{{cameraId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"{{cameraId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос всех камер дома.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"title\",",
											"            \"houseId\",",
											"            \"rtspStream\",",
											"            \"platformType\",",
											"            \"serial\",",
											"            \"videoOnly\",",
											"            \"ptz\",",
											"            \"streamUrl\",",
											"            \"status\",",
											"            \"deviceLocation\",",
											"            \"enabled\",",
											"            \"dvr\",",
											"            \"motionDetectorEnabled\",",
											"            \"agentId\",",
											"            \"token\",",
											"            \"motionDelay\"",
											"        ],",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"title\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"houseId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"rtspStream\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"platformType\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"serial\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"videoOnly\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"ptz\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"streamUrl\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"deviceLocation\": {",
											"                \"type\": \"array\",",
											"                \"items\": {}",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"dvr\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"dvrDepth\",",
											"                    \"dvrSpace\",",
											"                    \"dvrLockDays\"",
											"                ],",
											"                \"properties\": {",
											"                    \"dvrDepth\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"dvrSpace\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"dvrLockDays\": {",
											"                        \"type\": \"integer\"",
											"                    }",
											"                }",
											"            },",
											"            \"motionDetectorEnabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"agentId\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"token\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"motionDelay\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей id,title, houseId, platformType, а также количества камер.\",  () => {",
											"    pm.expect(pm.response.json()[0].id).to.eql(pm.environment.get(\"cameraId\"));",
											"    pm.expect(pm.response.json()[0].title).to.equal(\"1\");",
											"    pm.expect(pm.response.json()[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
											"    pm.expect(pm.response.json()[0].platformType).to.equal(\"FLUSSONIC\");",
											"    pm.expect(pm.response.json().length).to.equal(1);",
											"});",
											"pm.test(\"Проверка полей rtspStream и streamUrl\",  () => {",
											"    pm.expect(pm.response.json()[0].rtspStream).to.equal(null); ",
											"    pm.expect(pm.response.json()[0].streamUrl).to.equal(null);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/video/cameras/houses/{{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"houses",
										"{{houseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение бесконечного списка событий для администратора.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"// var schema = {",
											"//     \"type\": \"object\",",
											"//     \"required\": [",
											"//         \"type\",",
											"//         \"total\",",
											"//         \"data\",",
											"//         \"next_time\",",
											"//         \"next_time_millis\",",
											"//         \"next_offset\",",
											"//         \"timestamp_unread_event\",",
											"//         \"last_read_event_time_millis\"",
											"//     ],",
											"//     \"additionalProperties\": true,",
											"//     \"properties\": {",
											"//         \"type\": {",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"total\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"data\": {",
											"//             \"type\": \"array\",",
											"//             \"additionalItems\": true,",
											"//             \"items\": {",
											"//                 \"type\": \"object\",",
											"//                 \"required\": [",
											"//                     \"id\",",
											"//                     \"message\",",
											"//                     \"level\",",
											"//                     \"type\",",
											"//                     \"icon_name\",",
											"//                     \"origin_id\",",
											"//                     \"origin_type\",",
											"//                     \"created_at\",",
											"//                     \"created_at_millis\",",
											"//                     \"house_id\",",
											"//                     \"user_id\",",
											"//                     \"links\",",
											"//                     \"color\",",
											"//                     \"section_type\",",
											"//                     \"section_id\"",
											"//                 ],",
											"//                 \"additionalProperties\": true,",
											"//                 \"properties\": {",
											"//                     \"id\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"message\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"level\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"type\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"icon_name\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"origin_id\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"origin_type\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"created_at\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"created_at_millis\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"house_id\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"user_id\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"links\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"color\": {",
											"//                         \"type\": \"string\"",
											"//                     },",
											"//                     \"section_type\": {",
											"//                         \"type\": \"null\"",
											"//                     },",
											"//                     \"section_id\": {",
											"//                         \"type\": \"null\"",
											"//                     }",
											"//                 }",
											"//             }",
											"//         },",
											"//         \"next_time\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"next_time_millis\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"next_offset\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"timestamp_unread_event\": {",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"last_read_event_time_millis\": {",
											"//             \"type\": \"integer\"",
											"//         }",
											"//     }",
											"// };",
											"     ",
											"// pm.test('Schema is valid', function () {",
											"//         var JsoneData=JSON.parse(responseBody);",
											"//         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"// });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/users/{{id}}/events/endless?offset=0&limit=50&language=ru",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"users",
										"{{id}}",
										"events",
										"endless"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "language",
											"value": "ru"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос всех девайсов, принадлежащих дому.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка длинны ответа\", function () {",
											"        pm.expect(pm.response.json().length).to.gte(1)",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/houses/{{houseId}}/devices",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"houses",
										"{{houseId}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск камеры с прошивкой flussonic-agent.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 403\", function () {",
											"        pm.response.to.have.status(403);",
											"    });",
											"    pm.test(\"Проверка сообщения\", function () {",
											"        pm.expect(pm.response.json().message).to.eql(\"Camera searching is not available for user\")",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/video/cameras/agent/agentId",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"agent",
										"agentId"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление",
					"item": [
						{
							"name": "Закрыть заявку",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\":\"CLOSED\",\n    \"id\": \"{{test_user_1_ticket}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"support",
										"tickets",
										"{{test_user_1_ticket}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "ATc1a2m3era",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ATc1a2m3era",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"support",
										"tickets",
										"{{test_user_1_ticket}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user c video platforms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "FLUSSONIC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение контроллера от платформы Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/disconnect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"disconnect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление датчика открытия двери",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zway_ctl_host}}/devices/7",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the technical_support_engineer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id_technical_support_engineer}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id_technical_support_engineer}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить контроллер",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{ctl_id}}/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{ctl_id}}",
										"remove"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Охрана (через новое API)  с Flussonic",
			"item": [
				{
					"name": "Подготовка",
					"item": [
						{
							"name": "Параметры контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Настройки применены\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"connected\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"if(!pm.collectionVariables.has('override_zway_ctl_mac'))",
											"    pm.environment.set('zway_ctl_mac', pm.variables.replaceIn(\"{{$randomMACAddress}}\"));",
											"else",
											"    pm.environment.set('zway_ctl_mac', pm.collectionVariables.get('override_zway_ctl_mac'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mac\": \"{{zway_ctl_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/info",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение токена (для админа, только облако)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"admin_access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.have.status(200);",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о платформе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var sdk = require('postman-collection');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
											"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/info",
									"host": [
										"{{host}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение типа платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"let isSL10 = pm.response.json().version.includes(\"-b\");",
											"",
											"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
											"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
											"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)",
											"",
											"if(isSL10) {//Пропускаем регистрацию и добавление контроллера для SL-10",
											"    pm.environment.set (\"test_user_login\", pm.collectionVariables.get(\"sl10_username\"))",
											"    pm.environment.set (\"test_user_password\", pm.collectionVariables.get(\"sl10_password\"))",
											"    postman.setNextRequest(\"Авторизация пользователя\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/version",
									"host": [
										"{{host}}"
									],
									"path": [
										"version"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание абонента (только облако)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"test_user_id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.have.status(200);",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"The data is correct\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(length=1) {",
											"    let randomString = \"\";",
											"    for (let i = 0; i < length; i++){",
											"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
											"    }",
											"    return randomString;",
											"}",
											"",
											"let login = 'test_user_'+randomString(6);",
											"pm.environment.set('test_user_login', login);",
											"pm.environment.set('test_user_password', login);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"{{test_user_login}}\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}\",\n    \"videoParameters\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отвязывание видеосервера ELTEX",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/video/users/{{test_user_id}}?platformType=ELTEX",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{test_user_id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "ELTEX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание дома для абонента (только облако)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"  pm.response.to.have.status(200);",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"test_user_house\", jsonData.id);",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Test House\",\n    \"ownerId\": \"{{test_user_id}}\",\n    \"type\": \"HOUSE\",\n    \"address\": \"Test Address\",\n    \"apartment\": \"0101\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление контроллера (только облако)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
											"setTimeout(function(){}, [1000]); ",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{test_user_house}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"Z-Way Controller Simualtor\",\n        \"ctlMac\": \"{{zway_ctl_mac}}\",\n        \"offline\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавить пользователя на FLUSSONIC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/users/{{test_user_id}}?platformType=FLUSSONIC",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"users",
										"{{test_user_id}}"
									],
									"query": [
										{
											"key": "platformType",
											"value": "FLUSSONIC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Увеличить лимит камер до 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newLimit\": 2,\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/administration/video/cameras/limit/{{test_user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"video",
										"cameras",
										"limit",
										"{{test_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true,
									"accept-encoding": true,
									"accept": true,
									"user-agent": true,
									"content-length": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password={{test_user_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{test_user_login}}"
										},
										{
											"key": "password",
											"value": "{{test_user_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Подключение к WebSocket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"connect"
									],
									"query": [
										{
											"key": "host",
											"value": "{{host}}/event_ws"
										},
										{
											"key": "token",
											"value": "{{access_token}}"
										},
										{
											"key": "subprotocol",
											"value": "SmartHome"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика открытия двери",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_mct\",\n    \"nodeId\": 6\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Подключение контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"",
											"pm.environment.set(\"ctl_connected_timeout\", pm.response.json().status == \"Controller is already connected\" ? 0 : (pm.response.json().status ? 180000 : 5000));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/connect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"connect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса контроллера \"Доступен\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 3000);",
											"",
											"if(pm.environment.get(\"ctl_connected_timeout\") > 10000)",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout={{ctl_connected_timeout}}",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_type",
											"value": "CONTROLLER_STATUS"
										},
										{
											"key": "C_status",
											"value": "^CONNECTED"
										},
										{
											"key": "timeout",
											"value": "{{ctl_connected_timeout}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить дом",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Существует хотя бы 1 дом\", function () {",
											"  pm.expect(pm.response.json().length).to.be.gte(1);",
											"});",
											"",
											"if (pm.response.json().length >= 1)",
											"    postman.setEnvironmentVariable (\"house_id\", pm.response.json()[0].id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить устройство",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Существует хотя бы 1 устройство\", function () {",
											"  pm.expect(pm.response.json().length).to.be.gte(1);",
											"});",
											"",
											"if (pm.response.json().length >= 1) {",
											"",
											"    var device = pm.response.json().find(function (el) {",
											"        return el.deviceType == \"Z_WAY_DEVICE\" && Object.values(el.channels).any(x => x.deviceProperties.any(y => y.kind == \"OPEN_CLOSE\"));",
											"    });",
											"",
											"    postman.setEnvironmentVariable (\"device_id\", device.id)",
											"    postman.setEnvironmentVariable (\"device_nodeId\", device.nodeId)",
											"    postman.setEnvironmentVariable (\"device_nodeId_number\", device.nodeId.substring(device.nodeId.lastIndexOf(\"_\") + 1))",
											"    postman.setEnvironmentVariable (\"device_controllerId\", device.controllerId)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{house_id}}/devices?withCameras=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{house_id}}",
										"devices"
									],
									"query": [
										{
											"key": "withCameras",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о свойствах устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
											"{",
											"    for(let prop of channelInfo.deviceProperties)",
											"    {",
											"        if(prop.kind == \"GUARD_MODE\")",
											"        {",
											"            pm.environment.set(\"device_guardPropId\", prop.id);",
											"            pm.environment.set(\"device_guardPropValue\", prop.value);",
											"        }",
											"",
											"        if(prop.kind == \"KEEP_ALIVE\")",
											"            pm.environment.set(\"device_keepAlivePropId\", prop.id);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление камеры",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set(\"guard_kam\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"title\": \"rtsp\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"enabled\": true,\n    \"videoOnly\": null,\n    \"ptz\": null,\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": false,\n    \"motionDelay\": null,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{test_user_house}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/video/cameras",
									"host": [
										"{{host}}"
									],
									"path": [
										"video",
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика (Вскрытие)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика (Вскрытие)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика (Сработка)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 3000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение охранного режима",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 3000);",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());",
											"setTimeout(function(){}, 250);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"true\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}",
										"props",
										"{{device_guardPropId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка охранных устройств",
					"item": [
						{
							"name": "Получение статуса устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Устройство доступно\", function () {",
											"  pm.expect(pm.response.json().status).to.be.equal(\"ONLINE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение охранного статуса дома",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Дом готов к постановке на охрану\", function () {",
											"  pm.expect(pm.response.json().every(x => x.guardStatus.status == \"INIT\")).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/zones?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"zones"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка устройства и групп",
					"item": [
						{
							"name": "Переименование",
							"item": [
								{
									"name": "Переименовать устройство",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceLocation\": [\"\"],\n\t\"title\": \"Тестовая дверь\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверить имя устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Имя устройства совпадает с ожидаемым\", function () {",
													"  pm.expect(pm.response.json().title).to.be.equal(\"Тестовая дверь\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Переименовать устройство №2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"title\": \"Дверь\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверить имя устройства №2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Имя устройства совпадает с ожидаемым\", function () {",
													"  pm.expect(pm.response.json().title).to.be.equal(\"Дверь\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события переименования в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device\";",
													"let checkTime = false;",
													"let messagePart = \"изменил название устройства\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Группы",
							"item": [
								{
									"name": "Создание группы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"postman.setEnvironmentVariable (\"group_id\", pm.response.text())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Новая группа\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{house_id}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{house_id}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Назначить устройству группу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"deviceLocation\": [\n        \"{{group_id}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверить группу устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Группа устройства совпадает с ожидаемым\", function () {",
													"  pm.expect(pm.response.json().deviceLocation).to.include(pm.environment.get(\"group_id\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Назначить камере группу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Группа устройства совпадает с ожидаемым\", function () {",
													"  pm.expect(pm.response.json().deviceLocation).to.include(pm.environment.get(\"group_id\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"rtsp\",\n    \"houseId\": \"{{house_id}}\",\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"platformType\": \"FLUSSONIC\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"status\": \"ONLINE\",\n    \"deviceLocation\": [\n        \"{{group_id}}\"\n    ],\n    \"enabled\": true,\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": false,\n    \"agentId\": null,\n    \"motionDelay\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras/{{guard_kam}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{guard_kam}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить группу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{house_id}}/groups/{{group_id}}?checkEmptyGroups=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{house_id}}",
												"groups",
												"{{group_id}}"
											],
											"query": [
												{
													"key": "checkEmptyGroups",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события изменения местоположения в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка наличия сообщений об изменении местоположения\", function () {",
													"    let kam = false;",
													"    let door = false;",
													"    for(let i in pm.response.json().data){",
													"        // Проверка на смену группы у камеры",
													"        if((pm.response.json().data[i].type === \"user_change_device\") && pm.response.json().data[i].message.includes('на rtsp изменил местоположение')) {",
													"            kam = true;",
													"        }",
													"        // Проверка на смену группы у двери",
													"        else if ((pm.response.json().data[i].type === \"user_change_device\") && pm.response.json().data[i].message.includes('на Дверь изменил местоположение')) door = true;",
													"    }",
													"    pm.expect(kam).to.eql(true);",
													"    pm.expect(door).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=10&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Включение/исключение в сервисе",
							"item": [
								{
									"name": "Добавить устройство в сервис охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка включения устройства в охрану",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство включено в сервис охраны\", function () {",
													"   var jsonData = pm.response.json();",
													"   ",
													"    var result_device = jsonData.find(obj => {",
													"        return obj.objectInfo.deviceId == pm.environment.get(\"device_id\");",
													"    });   ",
													"",
													"    pm.expect(result_device).to.not.be.undefined;",
													"});",
													"pm.test(\"Камера включена в сервис охраны (по умолчанию)\", function () {",
													"   var jsonData = pm.response.json();",
													"   ",
													"    var result_kam = jsonData.find(obj => {",
													"        return obj.objectInfo.cameraId == pm.environment.get(\"guard_kam\");",
													"    });   ",
													"",
													"    pm.expect(result_kam).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить устройство из сервиса охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": false\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка исключения устройства из охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство исключено из сервиса охраны\", function () {",
													"   var jsonData = pm.response.json();",
													"   ",
													"    var result = jsonData.find(obj => {",
													"        return obj.objectInfo.deviceId == pm.environment.get(\"device_id\");",
													"    });",
													"",
													"    pm.expect(result).to.be.undefined;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события исключения из охраны в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"remove_device_from_zone\";",
													"let checkTime = false;",
													"let messagePart = \"удалено из охраны\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Можно ли поставить дом без устройств в охране на охрану ?",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Проверка статуса охраны\", function () {",
													"    for(let i in pm.response.json().variables){",
													"        if (pm.response.json().variables[i].id == \"emergency\") pm.expect(pm.response.json().variables[i].value).eql(\"notReady\")",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{test_user_house}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{test_user_house}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Вернуть устройство в сервис охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события добавления в охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"add_device_in_zone\";",
													"let checkTime = false;",
													"let messagePart = \"добавлено в охрану\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить камеру из сервиса охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{guard_kam}}\",\n            \"deviceType\": \"CAMERA\",\n            \"guardInclude\": false\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка исключения камеры из охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство исключено из сервиса охраны\", function () {",
													"   var jsonData = pm.response.json();",
													"   ",
													"    var result = jsonData.find(obj => {",
													"        return obj.objectInfo.cameraId == pm.environment.get(\"guard_kam\");",
													"    });",
													"",
													"    pm.expect(result).to.be.undefined;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Можно ли поставить дом без камер в охране на охрану ?",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Проверка статуса охраны\", function () {",
													"    for(let i in pm.response.json().variables){",
													"        if (pm.response.json().variables[i].id == \"emergency\") pm.expect(pm.response.json().variables[i].value).eql(\"idle\")",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{test_user_house}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{test_user_house}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Вернуть камеру в сервис охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{guard_kam}}\",\n            \"deviceType\": \"CAMERA\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка добавления камеры в охрану",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство исключено из сервиса охраны\", function () {",
													"   var jsonData = pm.response.json();",
													"   ",
													"    var result = jsonData.find(obj => {",
													"        return obj.objectInfo.cameraId == pm.environment.get(\"guard_kam\");",
													"    });",
													"",
													"    pm.expect(result).to.be.not.undefined;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Период опроса",
							"item": [
								{
									"name": "Смена периода опроса 60 c",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"{",
													"    setTimeout(function(){}, 4000);",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"60\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_keepAlivePropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Смена периода опроса 10 c",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"{",
													"    setTimeout(function(){}, 4000);",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"10\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_keepAlivePropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												},
												{
													"key": "timeout",
													"value": "{{keepAlive_timeout}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены периода опроса в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device_property\";",
													"let checkTime = false;",
													"let messagePart = \"Период опроса устройства\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Постановка/снятие без сработки",
					"item": [
						{
							"name": "Отключение форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS отключен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события процесса постановки на охрану в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"guard_arming\";",
											"let checkTime = false;",
											"let messagePart = \"ставит объект на охрану\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события готовности устройства к охране в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_ready_for_guard\";",
											"let checkTime = false;",
											"let messagePart = \"готово к охране\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события постановки на охрану в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"guard_on\";",
											"let checkTime = false;",
											"let messagePart = \"Поставлено на охрану\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события процесса снятия с охраны в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"guard_disarming\";",
											"let checkTime = false;",
											"let messagePart = \"снимает объект с охраны\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события снятия с охраны в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"guard_off\";",
											"let checkTime = false;",
											"let messagePart = \"Снято с охраны\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS включен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Постановка/снятие в сработке",
					"item": [
						{
							"name": "Отключение форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS отключен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика при включении FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\",\n    \"rule\": \"guardMode:2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ERROR"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события ошибки постановки на охрану в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"guard_error\";",
											"let checkTime = false;",
											"let messagePart = \"Ошибка постановки на охрану\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS включен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Постановка -> сработка -> снятие",
					"item": [
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Проникновение\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ALARM"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события проникновения в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"break_in_house\";",
											"let checkTime = false;",
											"let messagePart = \"Проникновение в объект\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка  скриншота в событии проникновения в журнале Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка источника скриншота (в .jpeg должна быть платформа, см. задачу #260140)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
											"                let flussonic_host = pm.globals.get(\"flussonic_url\").split('/', 4)[2];",
											"                console.log(\"flussonic_host\", flussonic_host)",
											"                console.log(\"platform_host\", platform_host)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(flussonic_host)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
											"    function time_converter(str_time_at_millis) {",
											"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
											"        function zero_plus(num) {",
											"            if (num.toString().length === 1) {",
											"                num = 0 + num.toString()",
											"            }",
											"            return num",
											"        }",
											"        // Получаем дату",
											"        var dateFormat = new Date(Number(str_time_at_millis));",
											"        // Составляем строку из даты (в формате как в url) точность до часов",
											"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
											"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
											"        console.log(\"dateNewFormat\", dateNewFormat);",
											"        return dateNewFormat;",
											"    }",
											"    pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let time = pm.response.json().data[i].created_at_millis",
											"                let dateURLFormat = time_converter(time)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
											"                    if (key.includes(\"inkVideo\")) {",
											"                        pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
											"                    }",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if(key.includes(\"linkPhotoMp4\")) {",
											"                            // Проверка времени в ссылках, должно быть корректное время в UTC",
											"                            console.log(dateURLFormat, \"dateURLFormat\")",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"",
											"}",
											"catch (e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?limit=5&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "fromMillis",
											"value": "9999999999999"
										},
										{
											"key": "language",
											"value": "ru"
										},
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "level",
											"value": "SECURITY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Постановка без FLiRS-> сработка -> снятие",
					"item": [
						{
							"name": "Отключение форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS отключен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Проникновение\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ALARM"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS включен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка  скриншота в событии проникновения в журнале Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка источника скриншота (в .jpeg должна быть платформа, см. задачу #260140)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
											"                let flussonic_host = pm.globals.get(\"flussonic_url\").split('/', 4)[2];",
											"                console.log(\"flussonic_host\", flussonic_host)",
											"                console.log(\"platform_host\", platform_host)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(flussonic_host)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
											"    function time_converter(str_time_at_millis) {",
											"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
											"        function zero_plus(num) {",
											"            if (num.toString().length === 1) {",
											"                num = 0 + num.toString()",
											"            }",
											"            return num",
											"        }",
											"        // Получаем дату",
											"        var dateFormat = new Date(Number(str_time_at_millis));",
											"        // Составляем строку из даты (в формате как в url) точность до часов",
											"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
											"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
											"        console.log(\"dateNewFormat\", dateNewFormat);",
											"        return dateNewFormat;",
											"    }",
											"    pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let time = pm.response.json().data[i].created_at_millis",
											"                let dateURLFormat = time_converter(time)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
											"                    if (key.includes(\"inkVideo\")) {",
											"                        pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
											"                    }",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if(key.includes(\"linkPhotoMp4\")) {",
											"                            // Проверка времени в ссылках, должно быть корректное время в UTC",
											"                            console.log(dateURLFormat, \"dateURLFormat\")",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"",
											"}",
											"catch (e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?limit=5&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "fromMillis",
											"value": "9999999999999"
										},
										{
											"key": "language",
											"value": "ru"
										},
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "level",
											"value": "SECURITY"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Постановка во время выключения FLiRS",
					"item": [
						{
							"name": "Со снятием",
							"item": [
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=true&C_type=GUARD_STATUS_CHANGE&timeout=30000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												},
												{
													"key": "timeout",
													"value": "30000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "С перепостановкой и снятием",
							"item": [
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=true&C_type=GUARD_STATUS_CHANGE&timeout=30000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												},
												{
													"key": "timeout",
													"value": "30000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Повторная постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "С перепостановкой и сработкой",
							"item": [
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=true&C_type=GUARD_STATUS_CHANGE&timeout=30000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												},
												{
													"key": "timeout",
													"value": "30000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика после включения FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\",\n    \"rule\": \"guardMode:0\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Повторная постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE&timeout=30000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												},
												{
													"key": "timeout",
													"value": "30000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Перепостановка в состоянии сработки после ошибки",
					"item": [
						{
							"name": "Выключение охранного режима",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());",
											"setTimeout(function(){}, 250);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"false\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}",
										"props",
										"{{device_guardPropId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS отключен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
											"});",
											"",
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика при включении FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\",\n    \"rule\": \"guardMode:2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ERROR"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Повторная постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ERROR"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение форсирование FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния форсирования FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS включен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Перепостановка в выключенном состоянии после ошибки",
					"item": [
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ERROR"
										},
										{
											"key": "C_guardStatus.message",
											"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события потери связи с устройством в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"guard_error_device_connect\";",
											"let checkTime = false;",
											"let messagePart = \"Ошибка охраны: потеряна связь с устройством\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Перепостановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"rearm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ERROR"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса с underGuard=false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проникновение при недоступном датчике после ошибки",
					"item": [
						{
							"name": "Создание датчика движения",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);",
											"",
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_pir\",\n    \"nodeId\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание добавления устройства",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_ADD&C_deviceInfo.nodeId=^7&timeout=15000",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_type",
											"value": "DEVICE_ADD"
										},
										{
											"key": "C_deviceInfo.nodeId",
											"value": "^7"
										},
										{
											"key": "timeout",
											"value": "15000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить устройство",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Существует хотя бы 1 устройство\", function () {",
											"  pm.expect(pm.response.json().length).to.be.gte(1);",
											"});",
											"",
											"if (pm.response.json().length >= 1) {",
											"",
											"    var device = pm.response.json().find(function (el) {",
											"        return el.deviceType == \"Z_WAY_DEVICE\" && Object.values(el.channels).any(x => x.deviceProperties.any(y => y.kind == \"MOTION\"));",
											"    });",
											"",
											"    postman.setEnvironmentVariable (\"device2_id\", device.id)",
											"    postman.setEnvironmentVariable (\"device2_nodeId\", device.nodeId)",
											"    postman.setEnvironmentVariable (\"device2_nodeId_number\", device.nodeId.substring(device.nodeId.lastIndexOf(\"_\") + 1))",
											"    postman.setEnvironmentVariable (\"device2_controllerId\", device.controllerId)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{house_id}}/devices?withCameras=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{house_id}}",
										"devices"
									],
									"query": [
										{
											"key": "withCameras",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение первого датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ERROR"
										},
										{
											"key": "C_guardStatus.message",
											"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика движения",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device2_nodeId_number}}/prop/0/motion",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device2_nodeId_number}}",
										"prop",
										"0",
										"motion"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Проникновение\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ALARM"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение первого датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление датчика движения",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device2_nodeId_number}}",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device2_nodeId_number}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Перепостановка в состоянии сработки после проникновения",
					"item": [
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Проникновение\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ALARM"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Перепостановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"rearm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события процесса перепостановки на охрану в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"guard_rearming\";",
											"let checkTime = false;",
											"let messagePart = \"выполняет перепостановку на охрану на объекте\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка  скриншота в событии проникновения в журнале Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка источника скриншота (в .jpeg должна быть платформа, см. задачу #260140)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
											"                let flussonic_host = pm.globals.get(\"flussonic_url\").split('/', 4)[2];",
											"                console.log(\"flussonic_host\", flussonic_host)",
											"                console.log(\"platform_host\", platform_host)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(flussonic_host)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
											"    function time_converter(str_time_at_millis) {",
											"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
											"        function zero_plus(num) {",
											"            if (num.toString().length === 1) {",
											"                num = 0 + num.toString()",
											"            }",
											"            return num",
											"        }",
											"        // Получаем дату",
											"        var dateFormat = new Date(Number(str_time_at_millis));",
											"        // Составляем строку из даты (в формате как в url) точность до часов",
											"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
											"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
											"        console.log(\"dateNewFormat\", dateNewFormat);",
											"        return dateNewFormat;",
											"    }",
											"    pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let time = pm.response.json().data[i].created_at_millis",
											"                let dateURLFormat = time_converter(time)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
											"                    if (key.includes(\"inkVideo\")) {",
											"                        pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
											"                    }",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if(key.includes(\"linkPhotoMp4\")) {",
											"                            // Проверка времени в ссылках, должно быть корректное время в UTC",
											"                            console.log(dateURLFormat, \"dateURLFormat\")",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"",
											"}",
											"catch (e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?limit=10&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "fromMillis",
											"value": "9999999999999"
										},
										{
											"key": "language",
											"value": "ru"
										},
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "level",
											"value": "SECURITY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ERROR"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Перепостановка в нормализованном состоянии",
					"item": [
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Проникновение\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ALARM"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка  скриншота в событии проникновения в журнале Copy 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка источника скриншота (в .jpeg должна быть платформа, см. задачу #260140)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
											"                let flussonic_host = pm.globals.get(\"flussonic_url\").split('/', 4)[2];",
											"                console.log(\"flussonic_host\", flussonic_host)",
											"                console.log(\"platform_host\", platform_host)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(flussonic_host)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
											"    function time_converter(str_time_at_millis) {",
											"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
											"        function zero_plus(num) {",
											"            if (num.toString().length === 1) {",
											"                num = 0 + num.toString()",
											"            }",
											"            return num",
											"        }",
											"        // Получаем дату",
											"        var dateFormat = new Date(Number(str_time_at_millis));",
											"        // Составляем строку из даты (в формате как в url) точность до часов",
											"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
											"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
											"        console.log(\"dateNewFormat\", dateNewFormat);",
											"        return dateNewFormat;",
											"    }",
											"    pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let time = pm.response.json().data[i].created_at_millis",
											"                let dateURLFormat = time_converter(time)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
											"                    if (key.includes(\"inkVideo\")) {",
											"                        pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
											"                    }",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if(key.includes(\"linkPhotoMp4\")) {",
											"                            // Проверка времени в ссылках, должно быть корректное время в UTC",
											"                            console.log(dateURLFormat, \"dateURLFormat\")",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"",
											"}",
											"catch (e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?limit=5&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "fromMillis",
											"value": "9999999999999"
										},
										{
											"key": "language",
											"value": "ru"
										},
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "level",
											"value": "SECURITY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Перепостановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"rearm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Постановка/снятие при датчике в аварии",
					"item": [
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "NOT_READY"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события открытия двери в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_property_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Открыто\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события закрытия двери в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_property_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Закрыто\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Вскрытие датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "NOT_READY"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события вскрытия датчика в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_tamper_change\";",
											"let checkTime = false;",
											"let messagePart = \"скрытие обнаружено\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события нормализации вскрытия датчика в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_tamper_change\";",
											"let checkTime = false;",
											"let messagePart = \"скрытие не обнаружено\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "NOT_READY"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события смены статуса устройства в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_status_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Статус устройства\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Вскрытие датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"power"
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события смены статуса устройства на \"Онлайн\" в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_status_online\";",
											"let checkTime = false;",
											"let messagePart = \"Статус устройства\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка события проникновения",
					"item": [
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Проникновение\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "ALARM"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка  скриншота в событии проникновения в журнале Copy 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка источника скриншота (в .jpeg должна быть платформа, см. задачу #260140)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
											"                let flussonic_host = pm.globals.get(\"flussonic_url\").split('/', 4)[2];",
											"                console.log(\"flussonic_host\", flussonic_host)",
											"                console.log(\"platform_host\", platform_host)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(flussonic_host)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
											"    function time_converter(str_time_at_millis) {",
											"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
											"        function zero_plus(num) {",
											"            if (num.toString().length === 1) {",
											"                num = 0 + num.toString()",
											"            }",
											"            return num",
											"        }",
											"        // Получаем дату",
											"        var dateFormat = new Date(Number(str_time_at_millis));",
											"        // Составляем строку из даты (в формате как в url) точность до часов",
											"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
											"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
											"        console.log(\"dateNewFormat\", dateNewFormat);",
											"        return dateNewFormat;",
											"    }",
											"    pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
											"        for (let i in pm.response.json().data) {",
											"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
											"                let time = pm.response.json().data[i].created_at_millis",
											"                let dateURLFormat = time_converter(time)",
											"                for (let key in pm.response.json().data[i].links[0]) {",
											"                    // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
											"                    if (key.includes(\"inkVideo\")) {",
											"                        pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
											"                    }",
											"                    if (key.includes(\"inkPhoto\")) {",
											"                        if(key.includes(\"linkPhotoMp4\")) {",
											"                            // Проверка времени в ссылках, должно быть корректное время в UTC",
											"                            console.log(dateURLFormat, \"dateURLFormat\")",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
											"                        }",
											"                        else{",
											"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    });",
											"",
											"}",
											"catch (e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?limit=5&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "fromMillis",
											"value": "9999999999999"
										},
										{
											"key": "language",
											"value": "ru"
										},
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "level",
											"value": "SECURITY"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Обработка нештатных ситуаций при работе с охраной",
					"item": [
						{
							"name": "Перезагрузка контроллера при снятой охране",
							"item": [
								{
									"name": "Отключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса контроллера \"Недоступен\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=DISCONNECTED&timeout=300000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "CONTROLLER_STATUS"
												},
												{
													"key": "C_status",
													"value": "DISCONNECTED"
												},
												{
													"key": "timeout",
													"value": "300000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события потери связи с контроллером в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_error_controller_connect\";",
													"let checkTime = false;",
													"let messagePart = \"Ошибка охраны: потеряна связь с хабом\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/connect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"connect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса контроллера \"Доступен\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 5000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "CONTROLLER_STATUS"
												},
												{
													"key": "C_status",
													"value": "^CONNECTED"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события восстановления связи с контроллером в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_controller_connect_restored\";",
													"let checkTime = false;",
													"let messagePart = \"Сервис охраны: Связь с хабом восстановлена\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Сработка датчика при снятой охране",
							"item": [
								{
									"name": "Снятие дома с охраны (без теста)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Недоступность датчика при снятой охране",
							"item": [
								{
									"name": "Снятие дома с охраны (без теста)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Недоступность датчика при поставленной охране",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_guardStatus.message",
													"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события потери связи с устройством в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_error_device_connect\";",
													"let checkTime = false;",
													"let messagePart = \"Ошибка охраны: потеряна связь с устройством\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перезагрузка контроллера при поставленной охране",
							"item": [
								{
									"name": "Смена периода опроса 240 с",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"{",
													"    setTimeout(function(){}, 4000);",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"240\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_keepAlivePropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												},
												{
													"key": "timeout",
													"value": "{{keepAlive_timeout}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с контроллером\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_guardStatus.message",
													"value": "Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/connect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"connect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса контроллера \"Доступен\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 5000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "CONTROLLER_STATUS"
												},
												{
													"key": "C_status",
													"value": "^CONNECTED"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Смена периода опроса 10 с",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"{",
													"    setTimeout(function(){}, 4000);",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"10\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_keepAlivePropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												},
												{
													"key": "timeout",
													"value": "{{keepAlive_timeout}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перезагрузка контроллера при перепостановке на охрану",
							"item": [
								{
									"name": "Смена периода опроса 240 с",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"{",
													"    setTimeout(function(){}, 4000);",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"240\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_keepAlivePropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												},
												{
													"key": "timeout",
													"value": "{{keepAlive_timeout}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 200);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с контроллером\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_guardStatus.message",
													"value": "Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/connect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"connect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса контроллера \"Доступен\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 5000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "CONTROLLER_STATUS"
												},
												{
													"key": "C_status",
													"value": "^CONNECTED"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Смена периода опроса 10 с",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"{",
													"    setTimeout(function(){}, 4000);",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"10\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_keepAlivePropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\")",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												},
												{
													"key": "timeout",
													"value": "{{keepAlive_timeout}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Проверка форсирования FLiRS",
					"item": [
						{
							"name": "Получение информации о свойствах устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
											"{",
											"    for(let prop of channelInfo.deviceProperties)",
											"    {",
											"        if(prop.kind == \"GUARD_MODE\")",
											"            pm.environment.set(\"device_guardPropId\", prop.id);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS включен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка статуса устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Устройство включено\", function () {",
											"  let result = null;",
											"",
											"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
											"  {",
											"      for(let prop of channelInfo.deviceProperties)",
											"      {",
											"          if(prop.kind == \"GUARD_MODE\")",
											"              result = prop.value;",
											"      }",
											"  }",
											"",
											"  pm.expect(result).to.be.equal(\"true\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS отключен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка статуса устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Устройство выключено\", function () {",
											"    let result = null;",
											"",
											"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
											"  {",
											"      for(let prop of channelInfo.deviceProperties)",
											"      {",
											"          if(prop.kind == \"GUARD_MODE\")",
											"              result = prop.value;",
											"      }",
											"  }",
											"",
											"  pm.expect(result).to.be.equal(\"false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка статуса устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Устройство выключено\", function () {",
											"    let result = null;",
											"",
											"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
											"  {",
											"      for(let prop of channelInfo.deviceProperties)",
											"      {",
											"          if(prop.kind == \"GUARD_MODE\")",
											"              result = prop.value;",
											"      }",
											"  }",
											"",
											"  pm.expect(result).to.be.equal(\"false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка состояния FLiRS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"FLiRS включен\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"suitable"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Постановка дома на охрану",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"arm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Поставлено на охрану\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "OK"
										},
										{
											"key": "C_underGuard",
											"value": "true"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Снятие дома с охраны",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"devices",
										"zone",
										"disarm"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса \"Снято с охраны\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_guardStatus.status",
											"value": "INIT"
										},
										{
											"key": "C_underGuard",
											"value": "false"
										},
										{
											"key": "C_type",
											"value": "GUARD_STATUS_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка статуса устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Устройство включено\", function () {",
											"    let result = null;",
											"",
											"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
											"  {",
											"      for(let prop of channelInfo.deviceProperties)",
											"      {",
											"          if(prop.kind == \"GUARD_MODE\")",
											"              result = prop.value;",
											"      }",
											"  }",
											"",
											"  pm.expect(result).to.be.equal(\"true\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка событий охранного режима в журнале",
					"item": [
						{
							"name": "Включение охранного режима",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 250);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"true\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}",
										"props",
										"{{device_guardPropId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Выключение охранного режима",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());",
											"setTimeout(function(){}, 250);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"false\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}",
										"props",
										"{{device_guardPropId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание изменения свойства",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_type",
											"value": "PROP_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события смены охранного режима в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"user_change_device_property\";",
											"let checkTime = false;",
											"let messagePart = \"Охранный режим\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение охранного режима",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());",
											"setTimeout(function(){}, 250);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"true\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}",
										"props",
										"{{device_guardPropId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание изменения свойства",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_type",
											"value": "PROP_CHANGE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события смены охранного режима в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"user_change_device_property\";",
											"let checkTime = false;",
											"let messagePart = \"Охранный режим\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка отключения уведомлений",
					"item": [
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение уведомлений от устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"deviceLocation\": [\"\"],\n\t\"muted\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события открытия двери в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_property_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Открыто\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события закрытия двери в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_property_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Закрыто\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение уведомлений от устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"muted\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события отключения уведомлений от устройства в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"user_change_device\";",
											"let checkTime = false;",
											"let messagePart = \"изменил без уведомлений на Включено\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка отсутствия события открытия двери в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_property_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Открыто\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Событие не записано\", function () {",
											"  pm.expect(pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart)",
											"    )).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка отсутствия события закрытия двери в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_property_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Закрыто\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Событие не записано\", function () {",
											"  pm.expect(pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart)",
											"    )).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение уведомлений от устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"muted\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"devices",
										"{{device_nodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события включения уведомлений от устройства в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"user_change_device\";",
											"let checkTime = false;",
											"let messagePart = \"изменил без уведомлений на Выключено\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события открытия двери в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_property_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Открыто\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"{{device_nodeId_number}}",
										"prop",
										"0",
										"openClose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка события закрытия двери в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let eventType = \"device_property_changed\";",
											"let checkTime = false;",
											"let messagePart = \"Закрыто\";",
											"",
											"if(pm.environment.get(\"platform_type\") != \"local\") {",
											"    let eventIsPresent = pm.response.json().data.any(x => ",
											"    x.type == eventType &&",
											"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
											"    x.message.includes(messagePart));",
											"",
											"    let tries = 0;",
											"    if(pm.environment.has(\"event_tries\"))",
											"        tries = pm.environment.get(\"event_tries\");",
											"    if(!eventIsPresent && tries < 10) {",
											"        tries++;",
											"        pm.environment.set(\"event_tries\", tries);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"",
											"    pm.environment.unset(\"event_tries\");",
											"    pm.test(\"Событие записано\", function () {",
											"        pm.expect(eventIsPresent).to.be.true;",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "{{house_id}}"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Завершение",
					"item": [
						{
							"name": "Отключение от WebSocket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/disconnect",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"disconnect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/disconnect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"disconnect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление датчика открытия",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление контроллера для SL-10",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zway_ctl_host}}/devices/6",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление контроллера (только облако)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление контроллера для SL-10",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{device_controllerId}}/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{device_controllerId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление пользователя (только облако)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление пользователя для SL-10",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{test_user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{test_user_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "i",
			"value": "0",
			"type": "string"
		}
	]
}