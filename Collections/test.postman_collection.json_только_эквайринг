{
	"info": {
		"_postman_id": "41f46970-9eab-4a5d-a94f-ca99b16d566e",
		"name": "test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16511326"
	},
	"item": [
		{
			"name": "Эквайринг",
			"item": [
				{
					"name": "Контроллер для работы с тарифами (acquiring)",
					"item": [
						{
							"name": "0. получение токена Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var admin_js = {",
											"\"required\": [",
											"        \"access_token\",",
											"        \"token_type\",",
											"        \"refresh_token\",",
											"        \"expires_in\",",
											"    ],",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\",",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
											"});",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"boolean\"",
											"    }",
											"};",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка всех тарифов.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей description, type, status, eventLabelsSupport, durationUnit, cost, а также наличия базовых тарифов (FREE и DEMO)\", function () {",
											"    var FREE_and_DEMO = 0;",
											"    for( let i in  pm.response.json()){              ",
											"        switch (pm.response.json()[i].name){",
											"            case \"Бесплатный тариф\":",
											"                pm.expect(pm.response.json()[i].description).to.eql(\"Тариф по умолчанию, без оплаты и с ограниченной функциональностью\");",
											"                pm.expect(pm.response.json()[i].type).to.eql(\"FREE\");",
											"                pm.expect(pm.response.json()[i].durationUnit).to.eql(\"ENDLESS\");",
											"                pm.expect(pm.response.json()[i].config.eventLabelsSupport).to.eql(false);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrDepth).to.eql(0);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrSpace).to.eql(0);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrLockDays).to.eql(0);",
											"                pm.expect(pm.response.json()[i].cost).to.eql(0.0);",
											"                pm.expect(pm.response.json()[i].status).to.eql(\"ACTUAL\");",
											"",
											"                FREE_and_DEMO++;",
											"                break;",
											"            case \"Пробный период\":",
											"                pm.expect(pm.response.json()[i].description).to.eql(\"Пробный период в течение трех дней с полной функциональностью\");",
											"                pm.expect(pm.response.json()[i].type).to.eql(\"DEMO\");",
											"                pm.expect(pm.response.json()[i].durationUnit).to.eql(\"THREE_DAYS\");",
											"                pm.expect(pm.response.json()[i].config.eventLabelsSupport).to.eql(true);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrDepth).to.eql(3);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrSpace).to.eql(5);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrLockDays).to.eql(1);",
											"                pm.expect(pm.response.json()[i].cost).to.eql(0.0);",
											"                pm.expect(pm.response.json()[i].status).to.eql(\"ACTUAL\");",
											"                FREE_and_DEMO++",
											"                break;",
											"        }",
											"",
											"    }",
											"    pm.expect(FREE_and_DEMO).to.eql(2);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"additionalItems\": true,",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"name\",",
											"            \"description\",",
											"            \"type\",",
											"            \"status\",",
											"            \"config\",",
											"            \"durationUnit\",",
											"            \"cost\",",
											"            \"dateOfLastUpdate\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"config\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"quality\",",
											"                    \"eventLabelsSupport\",",
											"                    \"dvr\",",
											"                    \"status\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"quality\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"eventLabelsSupport\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"dvr\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"dvrDepth\",",
											"                            \"dvrSpace\",",
											"                            \"dvrLockDays\"",
											"                        ],",
											"                        \"additionalProperties\": true,",
											"                        \"properties\": {",
											"                            \"dvrDepth\": {",
											"                                \"type\": [",
											"                                    \"null\",",
											"                                    \"integer\"",
											"                                ]",
											"                            },",
											"                            \"dvrSpace\": {",
											"                                \"type\": [",
											"                                    \"null\",",
											"                                    \"integer\"",
											"                                ]",
											"                            },",
											"                            \"dvrLockDays\": {",
											"                                \"type\": [",
											"                                    \"null\",",
											"                                    \"integer\"",
											"                                ]",
											"                            }",
											"                        }",
											"                    },",
											"                    \"status\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"durationUnit\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"cost\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"dateOfLastUpdate\": {",
											"                \"type\": \"number\"",
											"            }",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание тарифа.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"tariffId\", pm.response.json().id);",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Самый новый тариф\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Хороший тариф\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"Q360P\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(1);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(8);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(1);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(1230);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"name\": \"Самый новый тариф\",\n    \"description\": \"Хороший тариф\",\n    \"type\": \"PAID\",\n    \"status\": \"DRAFT\",\n    \"config\": {\n        \"id\": null,\n        \"quality\": \"Q360P\",\n        \"eventLabelsSupport\": true,\n        \"dvr\": {\n            \"dvrDepth\": 1,\n            \"dvrSpace\": 8,\n            \"dvrLockDays\": 1\n        },\n        \"status\": \"DRAFT\"\n    },\n    \"durationUnit\": \"MONTH\",\n    \"cost\": 1230,\n    \"dateOfLastUpdate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tariffs",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление существующего тарифа",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Самый новый тариф!!!\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Хороший тариф (не дорого)\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"Q360P\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(2);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(7);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(2);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(123);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"name\": \"Самый новый тариф!!!\",\n    \"description\": \"Хороший тариф (не дорого)\",\n    \"type\": \"PAID\",\n    \"status\": \"DRAFT\",\n    \"config\": {\n        \"id\": null,\n        \"quality\": \"Q360P\",\n        \"eventLabelsSupport\": true,\n        \"dvr\": {\n            \"dvrDepth\": 2,\n            \"dvrSpace\": 7,\n            \"dvrLockDays\": 2\n        },\n        \"status\": \"DRAFT\"\n    },\n    \"durationUnit\": \"MONTH\",\n    \"cost\": 123,\n    \"dateOfLastUpdate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение тарифа по его Id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Самый новый тариф!!!\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Хороший тариф (не дорого)\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"Q360P\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(2);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(7);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(2);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(123);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление статуса существующего тарифа ( ACTUAL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Самый новый тариф!!!\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Хороший тариф (не дорого)\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"Q360P\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(2);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(7);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(2);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(123);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId}}/changeStatus?status=ACTUAL",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId}}",
										"changeStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "ACTUAL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление существующего тарифа (попытка удаления тарифа в статусе ACTUAL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Проверка сообщения об ошибке\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Unable to delete tariffs with non-draft status!\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание тарифа который будет удален",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"tariffId2\", pm.response.json().id);",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"name\": \"Удали меня\",\n    \"description\": \"Срочно\",\n    \"type\": \"PAID\",\n    \"status\": \"DRAFT\",\n    \"config\": {\n        \"id\": null,\n        \"quality\": \"Q360P\",\n        \"eventLabelsSupport\": true,\n        \"dvr\": {\n            \"dvrDepth\": 1,\n            \"dvrSpace\": 8,\n            \"dvrLockDays\": 1\n        },\n        \"status\": \"DRAFT\"\n    },\n    \"durationUnit\": \"MONTH\",\n    \"cost\": 1230,\n    \"dateOfLastUpdate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tariffs",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление существующего тарифа (удалениe тарифа в статусе DRAFT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание второго тарифа",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"tariffId2\", pm.response.json().id);",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Второй тариф\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Тариф с хорошим качеством\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"QHIGH\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(5);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(2500);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"name\": \"Второй тариф\",\n    \"description\": \"Тариф с хорошим качеством\",\n    \"type\": \"PAID\",\n    \"status\": \"DRAFT\",\n    \"config\": {\n        \"id\": null,\n        \"quality\": \"QHIGH\",\n        \"eventLabelsSupport\": true,\n        \"dvr\": {\n            \"dvrDepth\": 5,\n            \"dvrSpace\": 5,\n            \"dvrLockDays\": 5\n        },\n        \"status\": \"DRAFT\"\n    },\n    \"durationUnit\": \"MONTH\",\n    \"cost\": 2500,\n    \"dateOfLastUpdate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tariffs",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление статуса второго существующего тарифа ( ACTUAL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Второй тариф\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Тариф с хорошим качеством\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"QHIGH\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(5);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(2500);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId2}}/changeStatus?status=ACTUAL",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId2}}",
										"changeStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "ACTUAL"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Контроллер для работы с заказами (acquiring)",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Добавить несколько камер",
							"item": [
								{
									"name": "Узнать id контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=1&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "1"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.Получить_логин_и_пароль_для_устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"    var i=pm.collectionVariables.get(\"i\");",
													"    if ((i < 3)&&( i != 0 )){",
													"        postman.setNextRequest(\"2.Добавить_mqtt_камеру\");",
													"    }",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [10000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo?deviceType=camera",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											],
											"query": [
												{
													"key": "deviceType",
													"value": "camera"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [5000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2.Добавить_mqtt_камеру",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
													"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
													"        pm.expect(pm.response.json().title).to.include(\"cam\");",
													"        pm.expect(pm.response.json().muted).to.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.eql(false);",
													"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
													"    });",
													"    var i=pm.collectionVariables.get(\"i\");",
													"    if ((i < 3)&&( i != 0 )){",
													"        postman.setNextRequest(\"3.Запрос_на_симулятор_камеры\");",
													"    }",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"console.log(Date.now())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"cam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.Запрос_на_симулятор_камеры",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"    var i=pm.collectionVariables.get(\"i\");",
													"    if ((i < 3)&&( i != 0 )){",
													"        postman.setNextRequest(\"4.Ожидание_события_добавления_камеры\");",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{res}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim}}/add",
											"host": [
												"{{cam_sim}}"
											],
											"path": [
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.Ожидание_события_добавления_камеры",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var i=pm.collectionVariables.get(\"i\");",
													"i++;",
													"pm.collectionVariables.set(\"i\", i);",
													"if (i < 3){",
													"    postman.setNextRequest(\"1.Получить_логин_и_пароль_для_устройства\");",
													"}",
													"else if (i == 3) {",
													"    pm.collectionVariables.set(\"i\", 0);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=ADD_ELTEX_CAMERA_QR&timeout=300000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.controllerId",
													"value": "{{controllerId}}",
													"disabled": true
												},
												{
													"key": "C_type",
													"value": "ADD_ELTEX_CAMERA_QR"
												},
												{
													"key": "timeout",
													"value": "300000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос камер пользователя (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    for(let i in pm.response.json()){",
													"        pm.environment.set(\"kam\" + i, pm.response.json()[i].id);",
													"    }             ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка редактировать камеру, добавить dvr (запрос на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 400\", function () {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Проверка текста сообщения\", function () {",
													"        pm.expect(pm.response.json().message).to.include(\"Изменение dvr-параметров камеры\");",
													"        pm.expect(pm.response.json().message).to.include(\"запрещено\")",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{kam0}}\",\n    \"title\": \"kam\",\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"ELTEX\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"status\": \"INITIALIZE\",\n    \"deviceLocation\": [],\n    \"enabled\": true,\n    \"dvr\": {\n        \"dvrDepth\": 10,\n        \"dvrSpace\": 10,\n        \"dvrLockDays\": 10\n    },\n    \"motionDetectorEnabled\": null,\n    \"agentId\": null,\n    \"motionDelay\": null\n}\n    ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{kam0}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Контроллер для работы с заказами (acquiring)",
							"item": [
								{
									"name": "Оплата заказа для одной камеры на несколько месяцев",
									"item": [
										{
											"name": "Создание заказа.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 1,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление существующего заказа.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 1,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание заказа. (на 2 месяца)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(246);",
															"        pm.expect(pm.response.json().totalSum).to.eql(246);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 2,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Обновление статуса существующего заказа.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(246);",
															"        pm.expect(pm.response.json().totalSum).to.eql(246);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/changeStatus?status=WAIT_FOR_PAY",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"changeStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "WAIT_FOR_PAY"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(246);",
															"        pm.expect(pm.response.json().totalSum).to.eql(246);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id с полями, необходимыми для формирования счета на оплату",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей url, orderid, clientid, client_email, service_name, sum\", function () {",
															"        pm.expect(pm.response.json().url).to.eql(\"CHANGE_ME/create/\");",
															"        pm.expect(pm.response.json().orderid).to.eql(pm.environment.get(\"orderId\"));",
															"        pm.expect(pm.response.json().clientid).to.eql(\"123\");",
															"        pm.expect(pm.response.json().client_email).to.eql(\"string@mail.ru\");",
															"        pm.expect(pm.response.json().service_name).to.eql(\"Оплата подписки\");",
															"        pm.expect(pm.response.json().sum).to.eql(\"246.00\");",
															"",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"sign\",",
															"            \"url\",",
															"            \"orderid\",",
															"            \"clientid\",",
															"            \"client_email\",",
															"            \"client_phone\",",
															"            \"service_name\",",
															"            \"sum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"sign\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"url\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"orderid\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"clientid\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"client_email\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"client_phone\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"service_name\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"sum\": {",
															"                \"type\": \"string\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/forPay",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"forPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "Оплата существующего заказа или обработка неудачной оплаты.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Входные данные",
															"const id = '12345';",
															"const sum = '246.00';",
															"const clientid = '123';",
															"const orderid = pm.environment.get(\"orderId\");",
															"const PaykeeperSecret = \"PaykeeperSecretChangeMe\";",
															"",
															"// Функция для вычисления MD5-хеша",
															"function calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret) {",
															"    const concatenatedString = id + sum + clientid + orderid + PaykeeperSecret;",
															"    const md5Hash = CryptoJS.MD5(concatenatedString).toString();",
															"    return md5Hash;",
															"}",
															"",
															"// Вызываем функцию и сохраняем результат в переменной",
															"const md5Result = calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret);",
															"pm.environment.set(\"key\", md5Result);",
															"",
															"// Проверяем результат в консоли",
															"console.log(md5Result);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/payment?id=12345&sum=246.00&clientid=123&orderid={{orderId}}&key={{key}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"payment"
													],
													"query": [
														{
															"key": "id",
															"value": "12345"
														},
														{
															"key": "sum",
															"value": "246.00"
														},
														{
															"key": "clientid",
															"value": "123"
														},
														{
															"key": "orderid",
															"value": "{{orderId}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id. (проверка оплаты)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, payment.id, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"PAID\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(246);",
															"        pm.expect(pm.response.json().payment.id).to.eql(\"12345\");",
															"        pm.expect(pm.response.json().totalSum).to.eql(246);",
															"",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Оплата заказа для двух камер на несколько месяцев",
									"item": [
										{
											"name": "Создание заказа. (3 месяца, 2 камеры)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(3);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(7500);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(15000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId2}}\",\n    \"count\": 3,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        },\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam1}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Обновление существующего заказа. (2 месяца, 2 камеры)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId2}}\",\n    \"count\": 2,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        },\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam1}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заказов (доступна фильтрация по userId).",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количество заказов, а также полей count, userId, status, tariffId, количества камер, type, entityId и totalSum\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"        for(let i in pm.response.json()){",
															"            pm.expect(pm.response.json()[i].count).to.eql(2);",
															"            pm.expect(pm.response.json()[i].userId).to.eql(pm.environment.get(\"id\"));",
															"            if (pm.response.json()[i].status === \"PAID\"){",
															"                pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                pm.expect(pm.response.json()[i].status).to.eql(\"PAID\");",
															"                pm.expect(pm.response.json()[i].items.length).to.eql(1);",
															"                pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"                pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(246);",
															"                pm.expect(pm.response.json()[i].totalSum).to.eql(246);",
															"            }",
															"            else{",
															"                pm.expect(pm.response.json()[i].status).to.eql(\"DRAFT\");",
															"                pm.expect(pm.response.json()[i].items.length).to.eql(2);",
															"                for(let j in pm.response.json()[i].items){",
															"                    pm.expect(pm.response.json()[i].items[j].type).to.eql(\"CAMERA\");",
															"                    pm.expect(pm.response.json()[i].items[j].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"                    pm.expect(pm.response.json()[i].items[j].totalSum).to.eql(5000);",
															"                }",
															"                pm.expect(pm.response.json()[i].items[0].entityId).to.not.eql(pm.response.json()[i].items[1].entityId);",
															"                pm.expect(pm.response.json()[i].totalSum).to.eql(10000);",
															"            }",
															"        }",
															"",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"userId\",",
															"                \"tariffId\",",
															"                \"count\",",
															"                \"status\",",
															"                \"items\",",
															"                \"dateOfLastUpdate\",",
															"                \"totalSum\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"userId\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"tariffId\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"count\": {",
															"                    \"type\": \"integer\"",
															"                },",
															"                \"status\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"items\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"entityId\",",
															"                            \"startDate\",",
															"                            \"stopDate\",",
															"                            \"totalSum\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"entityId\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"startDate\": {",
															"                                \"type\": \"number\"",
															"                            },",
															"                            \"stopDate\": {",
															"                                \"type\": \"number\"",
															"                            },",
															"                            \"totalSum\": {",
															"                                \"type\": \"integer\"",
															"                            }",
															"                        }",
															"                    }",
															"                },",
															"",
															"                \"dateOfLastUpdate\": {",
															"                    \"type\": \"number\"",
															"                },",
															"                \"totalSum\": {",
															"                    \"type\": \"integer\"",
															"                }",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Обновление статуса существующего заказа. (2 месяца, 2 камеры, status =WAIT_FOR_PAY)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/changeStatus?status=WAIT_FOR_PAY",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"changeStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "WAIT_FOR_PAY"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id с полями, необходимыми для формирования счета на оплату (2 камеры, 2 месяца)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей url, orderid, clientid, client_email, service_name, sum\", function () {",
															"        pm.expect(pm.response.json().url).to.eql(\"CHANGE_ME/create/\");",
															"        pm.expect(pm.response.json().orderid).to.eql(pm.environment.get(\"orderId\"));",
															"        pm.expect(pm.response.json().clientid).to.eql(\"123\");",
															"        pm.expect(pm.response.json().client_email).to.eql(\"string@mail.ru\");",
															"        pm.expect(pm.response.json().service_name).to.eql(\"Оплата подписки\");",
															"        pm.expect(pm.response.json().sum).to.eql(\"10000.00\");",
															"",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"sign\",",
															"            \"url\",",
															"            \"orderid\",",
															"            \"clientid\",",
															"            \"client_email\",",
															"            \"client_phone\",",
															"            \"service_name\",",
															"            \"sum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"sign\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"url\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"orderid\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"clientid\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"client_email\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"client_phone\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"service_name\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"sum\": {",
															"                \"type\": \"string\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/forPay",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"forPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "Оплата существующего заказа или обработка неудачной оплаты. (неудачная оплата, некоректный PaykeeperSecret)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка ответа (должно быть FAIL)\", function () {",
															"        pm.expect(pm.response.text()).to.eql(\"FAIL\");",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Входные данные",
															"const id = '12345';",
															"const sum = '246.00';",
															"const clientid = '123';",
															"const orderid = pm.environment.get(\"orderId\");",
															"const PaykeeperSecret = \"ERROR\";",
															"",
															"// Функция для вычисления MD5-хеша",
															"function calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret) {",
															"    const concatenatedString = id + sum + clientid + orderid + PaykeeperSecret;",
															"    const md5Hash = CryptoJS.MD5(concatenatedString).toString();",
															"    return md5Hash;",
															"}",
															"",
															"// Вызываем функцию и сохраняем результат в переменной",
															"const md5Result = calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret);",
															"pm.environment.set(\"key\", md5Result);",
															"",
															"// Проверяем результат в консоли",
															"console.log(md5Result);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/payment?id=12345&sum=246.00&clientid=123&orderid={{orderId}}&key={{key}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"payment"
													],
													"query": [
														{
															"key": "id",
															"value": "12345"
														},
														{
															"key": "sum",
															"value": "246.00"
														},
														{
															"key": "clientid",
															"value": "123"
														},
														{
															"key": "orderid",
															"value": "{{orderId}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id. (статус   = WAIT_FOR_PAY)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Синхронизация статуса существующего заказа с данными из PayKeeper.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/synchronizeStatus",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"synchronizeStatus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Оплата существующего заказа или обработка неудачной оплаты. (успешная оплата)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Входные данные",
															"const id = '12345';",
															"const sum = '10000.00';",
															"const clientid = '123';",
															"const orderid = pm.environment.get(\"orderId\");",
															"const PaykeeperSecret = \"PaykeeperSecretChangeMe\";",
															"",
															"// Функция для вычисления MD5-хеша",
															"function calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret) {",
															"    const concatenatedString = id + sum + clientid + orderid + PaykeeperSecret;",
															"    const md5Hash = CryptoJS.MD5(concatenatedString).toString();",
															"    return md5Hash;",
															"}",
															"",
															"// Вызываем функцию и сохраняем результат в переменной",
															"const md5Result = calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret);",
															"pm.environment.set(\"key\", md5Result);",
															"",
															"// Проверяем результат в консоли",
															"console.log(md5Result);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/payment?id=12345&sum=10000.00&clientid=123&orderid={{orderId}}&key={{key}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"payment"
													],
													"query": [
														{
															"key": "id",
															"value": "12345"
														},
														{
															"key": "sum",
															"value": "10000.00"
														},
														{
															"key": "clientid",
															"value": "123"
														},
														{
															"key": "orderid",
															"value": "{{orderId}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id. (статус   = PAID)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"PAID\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Контроллер для синхронизации пользователей eltex evi",
					"item": [
						{
							"name": "Запрос пользователя eltex evi по userId.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
											"    ",
											"    pm.test(\"Проверка полей userId и enabled\", function () {",
											"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));    ",
											"        pm.expect(pm.response.json().enabled).to.eql(true);",
											"    });",
											"",
											"    var schema ={",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"userId\",",
											"            \"eviUserId\",",
											"            \"canEditOrganizations\",",
											"            \"canViewOrganizations\",",
											"            \"canEditSettings\",",
											"            \"enabled\",",
											"            \"canAddAgentCamera\",",
											"            \"cameraLimits\"",
											"        ],",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"userId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"eviUserId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"canEditOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canViewOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canEditSettings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canAddAgentCamera\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"cameraLimits\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"FLUSSONIC\",",
											"                    \"ELTEX\"",
											"                ],",
											"                \"properties\": {",
											"                    \"FLUSSONIC\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"cameraLimit\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"cameraLimit\": {",
											"                                \"type\": \"integer\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"ELTEX\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"cameraLimit\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"cameraLimit\": {",
											"                                \"type\": \"integer\"",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/evi/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"evi",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос пользователя eltex evi по userId. Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка полей userId и enabled\", function () {",
											"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));    ",
											"        pm.expect(pm.response.json().enabled).to.eql(true);",
											"    });",
											"",
											"    // var schema ={",
											"    //     \"type\": \"object\",",
											"    //     \"required\": [",
											"    //         \"id\",",
											"    //         \"userId\",",
											"    //         \"eviUserId\",",
											"    //         \"canEditOrganizations\",",
											"    //         \"canViewOrganizations\",",
											"    //         \"canEditSettings\",",
											"    //         \"enabled\",",
											"    //         \"canAddAgentCamera\",",
											"    //         \"cameraLimits\"",
											"    //     ],",
											"    //     \"properties\": {",
											"    //         \"id\": {",
											"    //             \"type\": \"string\"",
											"    //         },",
											"    //         \"userId\": {",
											"    //             \"type\": \"string\"",
											"    //         },",
											"    //         \"eviUserId\": {",
											"    //             \"type\": \"string\"",
											"    //         },",
											"    //         \"canEditOrganizations\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"canViewOrganizations\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"canEditSettings\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"enabled\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"canAddAgentCamera\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"cameraLimits\": {",
											"    //             \"type\": \"object\",",
											"    //             \"required\": [",
											"    //                 \"FLUSSONIC\",",
											"    //                 \"ELTEX\"",
											"    //             ],",
											"    //             \"properties\": {",
											"    //                 \"FLUSSONIC\": {",
											"    //                     \"type\": \"object\",",
											"    //                     \"required\": [",
											"    //                         \"cameraLimit\"",
											"    //                     ],",
											"    //                     \"properties\": {",
											"    //                         \"cameraLimit\": {",
											"    //                             \"type\": \"integer\"",
											"    //                         }",
											"    //                     }",
											"    //                 },",
											"    //                 \"ELTEX\": {",
											"    //                     \"type\": \"object\",",
											"    //                     \"required\": [",
											"    //                         \"cameraLimit\"",
											"    //                     ],",
											"    //                     \"properties\": {",
											"    //                         \"cameraLimit\": {",
											"    //                             \"type\": \"integer\"",
											"    //                         }",
											"    //                     }",
											"    //                 }",
											"    //             }",
											"    //         }",
											"    //     }",
											"    // }",
											"    // pm.test('JSON is valid', function () {",
											"    //         var JsoneData = JSON.parse(responseBody);",
											"    //         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    // });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{res}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/evi/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"evi",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Контроллер для работы с заказами (acquiring) для админа и инженера ТП",
					"item": [
						{
							"name": "Создание Инженер ТП",
							"item": [
								{
									"name": "Создание инженера ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_support_1_id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"support-engineer\",\n    \"roleId\": \"support-engineer\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_support_1_login}}\",\n    \"videoParameters\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для инженера ТП 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"test_support_1_token\", jsonData.access_token);",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_support_1_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Контроллер для работы с заказами (acquiring) для админа и инженера ТП",
							"item": [
								{
									"name": "admin",
									"item": [
										{
											"name": "Создание заказа. Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 1,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam2}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заказов по userId админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количества заказов, а также полей userId, status, count, tariffId, type, entityId, totalSum и payment.id\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(3);",
															"        for(let i in pm.response.json()){",
															"           pm.expect(pm.response.json()[i].userId).to.eql(pm.environment.get(\"id\"));",
															"           if  (pm.response.json()[i].count === 2){",
															"               pm.expect(pm.response.json()[i].status).to.eql(\"PAID\");",
															"                //    console.log(pm.response.json()[i].items.length)",
															"               if (pm.response.json()[i].items.length === 1){",
															"                   pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                   pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                   pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"                   pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(246);",
															"                   pm.expect(pm.response.json()[i].totalSum).to.eql(246);",
															"               }",
															"               else{",
															"                   pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"                   for(let j in pm.response.json()[i].items){",
															"                        pm.expect(pm.response.json()[i].items[j].type).to.eql(\"CAMERA\");",
															"                        pm.expect(pm.response.json()[i].items[j].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"                        pm.expect(pm.response.json()[i].items[j].totalSum).to.eql(5000);",
															"                   }",
															"                   pm.expect(pm.response.json()[i].totalSum).to.eql(10000);",
															"               }",
															"               pm.expect(pm.response.json()[i].payment.id).to.eql(\"12345\");",
															"            }",
															"            else{",
															"                pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                pm.expect(pm.response.json()[i].status).to.eql(\"DRAFT\");",
															"                pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"                pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(123);",
															"                pm.expect(pm.response.json()[i].totalSum).to.eql(123);",
															"            }",
															"        }",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, status, count, tariffId, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Синхронизация статуса существующего заказа с данными из PayKeeper.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}/synchronizeStatus",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}",
														"synchronizeStatus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление существующего заказа по его Id админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка удаления",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количества заказов\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{access_token}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Инженер TП",
									"item": [
										{
											"name": "Создание заказа.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 1,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam2}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заказов по userId админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количества заказов, а также полей userId, status, count, tariffId, type, entityId, totalSum и payment.id\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(3);",
															"        for(let i in pm.response.json()){",
															"           pm.expect(pm.response.json()[i].userId).to.eql(pm.environment.get(\"id\"));",
															"           if  (pm.response.json()[i].count === 2){",
															"               pm.expect(pm.response.json()[i].status).to.eql(\"PAID\");",
															"                //    console.log(pm.response.json()[i].items.length)",
															"               if (pm.response.json()[i].items.length === 1){",
															"                   pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                   pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                   pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"                   pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(246);",
															"                   pm.expect(pm.response.json()[i].totalSum).to.eql(246);",
															"               }",
															"               else{",
															"                   pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"                   for(let j in pm.response.json()[i].items){",
															"                        pm.expect(pm.response.json()[i].items[j].type).to.eql(\"CAMERA\");",
															"                        pm.expect(pm.response.json()[i].items[j].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"                        pm.expect(pm.response.json()[i].items[j].totalSum).to.eql(5000);",
															"                   }",
															"                   pm.expect(pm.response.json()[i].totalSum).to.eql(10000);",
															"               }",
															"               pm.expect(pm.response.json()[i].payment.id).to.eql(\"12345\");",
															"            }",
															"            else{",
															"                pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                pm.expect(pm.response.json()[i].status).to.eql(\"DRAFT\");",
															"                pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"                pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(123);",
															"                pm.expect(pm.response.json()[i].totalSum).to.eql(123);",
															"            }",
															"        }",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, status, count, tariffId, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Синхронизация статуса существующего заказа с данными из PayKeeper.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    // pm.test(\"Status code is 429\", function () {",
															"    //     pm.response.to.have.status(429);",
															"    // });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}/synchronizeStatus",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}",
														"synchronizeStatus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление существующего заказа по его Id админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка удаления",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количества заказов\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{test_support_1_token}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Контроллер для работы с подписками (acquiring)",
					"item": [
						{
							"name": "Получение списка подписок пользователя.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка количества подписок, а также полей полей type, userId, entityId \", function () {",
											"    // pm.expect(pm.response.json().length).to.eql(4);",
											"    pm.expect(pm.response.json().length).to.eql(3);",
											"    for(let i in pm.response.json()){",
											"        pm.expect(pm.response.json()[i].type).to.eql(\"CAMERA\");",
											"        pm.expect(pm.response.json()[i].userId).to.eql(pm.variables.get(\"id\"));",
											"        if(pm.response.json()[i].entityId === null ){",
											"            pm.environment.set(\"tariffConfigId1\", (pm.response.json()[i].tariffConfigId))",
											"            pm.environment.set(\"subscriptionId1\", pm.response.json()[i].id);",
											"        }",
											"        // С 1.31 демо подписок не существует",
											"        // else if(pm.response.json()[i].tariffConfigId != \"demo_tariff_config_id\"){",
											"        else{",
											"            pm.environment.set(\"tariffConfigId2\", (pm.response.json()[i].tariffConfigId))",
											"            pm.expect(pm.response.json()[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
											"            if (pm.response.json()[i].entityId === pm.environment.get(\"kam0\") ){",
											"                pm.environment.set(\"subscriptionId2\", pm.response.json()[i].id);",
											"            }",
											"            else{",
											"                pm.environment.set(\"subscriptionId3\", pm.response.json()[i].id);",
											"            }",
											"        }",
											"        // С 1.31 демо подписок не существует",
											"        // else{",
											"        //     pm.expect(pm.response.json()[i].entityId).eql(pm.environment.get(\"kam2\"))",
											"        //     pm.environment.set(\"subscriptionId_demo\", pm.response.json()[i].id);",
											"        // }",
											"    }",
											"});",
											"",
											"// entityId не обязательное поле",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"title\": \"A Schema\",",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"type\",",
											"            \"startDate\",",
											"            \"stopDate\",",
											"            \"userId\",",
											"            \"tariffConfigId\"",
											"        ],",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"title\": \"The id Schema\",",
											"                \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"                \"title\": \"The type Schema\",",
											"                \"type\": \"string\"",
											"            },",
											"            \"startDate\": {",
											"                \"title\": \"The startDate Schema\",",
											"                \"type\": \"number\"",
											"            },",
											"            \"stopDate\": {",
											"                \"title\": \"The stopDate Schema\",",
											"                \"type\": \"number\"",
											"            },",
											"            \"entityId\": {",
											"                \"title\": \"The entityId Schema\",",
											"                \"type\": [",
											"                    \"null\",",
											"                    \"string\"",
											"                ]",
											"            },",
											"            \"userId\": {",
											"                \"title\": \"The userId Schema\",",
											"                \"type\": \"string\"",
											"            },",
											"            \"tariffConfigId\": {",
											"                \"title\": \"The tariffConfigId Schema\",",
											"                \"type\": \"string\"",
											"            }",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/subscriptions",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение подписки по entityId.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
											"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
											"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
											"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
											"});",
											"",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"type\",",
											"        \"startDate\",",
											"        \"stopDate\",",
											"        \"entityId\",",
											"        \"userId\",",
											"        \"tariffConfigId\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"title\": \"The id Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"title\": \"The type Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"startDate\": {",
											"            \"title\": \"The startDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"stopDate\": {",
											"            \"title\": \"The stopDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"entityId\": {",
											"            \"title\": \"The entityId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"title\": \"The userId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"tariffConfigId\": {",
											"            \"title\": \"The tariffConfigId Schema\",",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/subscriptions/byEntityId/{{kam0}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions",
										"byEntityId",
										"{{kam0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Применение подписки к другой сущности (камере)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
											"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
											"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
											"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
											"});",
											"",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"type\",",
											"        \"startDate\",",
											"        \"stopDate\",",
											"        \"entityId\",",
											"        \"userId\",",
											"        \"tariffConfigId\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"title\": \"The id Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"title\": \"The type Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"startDate\": {",
											"            \"title\": \"The startDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"stopDate\": {",
											"            \"title\": \"The stopDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"entityId\": {",
											"            \"title\": \"The entityId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"title\": \"The userId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"tariffConfigId\": {",
											"            \"title\": \"The tariffConfigId Schema\",",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/subscriptions/{{subscriptionId1}}/applyForEntity?entityId={{kam0}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions",
										"{{subscriptionId1}}",
										"applyForEntity"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{kam0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение подписки по entityId. (проверка переноса)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
											"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
											"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
											"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
											"});",
											"",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"type\",",
											"        \"startDate\",",
											"        \"stopDate\",",
											"        \"entityId\",",
											"        \"userId\",",
											"        \"tariffConfigId\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"title\": \"The id Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"title\": \"The type Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"startDate\": {",
											"            \"title\": \"The startDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"stopDate\": {",
											"            \"title\": \"The stopDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"entityId\": {",
											"            \"title\": \"The entityId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"title\": \"The userId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"tariffConfigId\": {",
											"            \"title\": \"The tariffConfigId Schema\",",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/subscriptions/byEntityId/{{kam0}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions",
										"byEntityId",
										"{{kam0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение подписки по ее Id. (проверка переноса)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
											"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
											"    pm.expect(pm.response.json().entityId).to.eql(null);",
											"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
											"});",
											"",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"type\",",
											"        \"startDate\",",
											"        \"stopDate\",",
											"        \"entityId\",",
											"        \"userId\",",
											"        \"tariffConfigId\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"title\": \"The id Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"title\": \"The type Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"startDate\": {",
											"            \"title\": \"The startDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"stopDate\": {",
											"            \"title\": \"The stopDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"entityId\": {",
											"            \"title\": \"The entityId Schema\",",
											"            \"type\": \"null\"",
											"        },",
											"        \"userId\": {",
											"            \"title\": \"The userId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"tariffConfigId\": {",
											"            \"title\": \"The tariffConfigId Schema\",",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/subscriptions/{{subscriptionId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions",
										"{{subscriptionId2}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ACCESS_TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Контроллер для работы с подписками (acquiring) для админа и инженера ТП",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "Получение списка подписок по userId админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка количества подписок, а также полей полей id, type, userId, entityId и tariffConfigId\", function () {",
													"    // pm.expect(pm.response.json().length).to.eql(4);",
													"    for(let i in pm.response.json()){",
													"        pm.expect(pm.response.json()[i].type).to.eql(\"CAMERA\");",
													"        pm.expect(pm.response.json()[i].userId).to.eql(pm.variables.get(\"id\"));",
													"        if(pm.response.json()[i].entityId === null ){",
													"            pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId2\"));",
													"            pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId2\"));",
													"        }",
													"        // else if(pm.response.json()[i].tariffConfigId != \"demo_tariff_config_id\"){",
													"        else{",
													"            if (pm.response.json()[i].entityId === pm.environment.get(\"kam0\") ){",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId1\"));",
													"                pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId1\"));",
													"            }",
													"            else{",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId3\"));",
													"                pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId2\"));",
													"            }",
													"        }",
													"        // else{",
													"        //     pm.expect(pm.response.json()[i].entityId).eql(pm.environment.get(\"kam2\"))",
													"        //     pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId_demo\"));",
													"        //     pm.expect(pm.response.json()[i].tariffConfigId).to.eql(\"demo_tariff_config_id\");",
													"        // }",
													"    }",
													"});",
													"",
													"// entityId не обязательное поле",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"array\",",
													"    \"items\": {",
													"        \"title\": \"A Schema\",",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"type\",",
													"            \"startDate\",",
													"            \"stopDate\",",
													"            \"userId\",",
													"            \"tariffConfigId\"",
													"        ],",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"title\": \"The id Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"type\": {",
													"                \"title\": \"The type Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"startDate\": {",
													"                \"title\": \"The startDate Schema\",",
													"                \"type\": \"number\"",
													"            },",
													"            \"stopDate\": {",
													"                \"title\": \"The stopDate Schema\",",
													"                \"type\": \"number\"",
													"            },",
													"            \"entityId\": {",
													"                \"title\": \"The entityId Schema\",",
													"                \"type\": [",
													"                    \"null\",",
													"                    \"string\"",
													"                ]",
													"            },",
													"            \"userId\": {",
													"                \"title\": \"The userId Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"tariffConfigId\": {",
													"                \"title\": \"The tariffConfigId Schema\",",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData = JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions?userId={{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по entityId админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/byEntityId/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"byEntityId",
												"{{kam0}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Применение подписки к другой сущности (камере) админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/{{subscriptionId2}}/applyForEntity?entityId={{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"{{subscriptionId2}}",
												"applyForEntity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{kam0}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по entityId админом или инженером ТП. (проверка переноса)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/byEntityId/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"byEntityId",
												"{{kam0}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по ее Id админом или инженером ТП. (проверка переноса)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(null);",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"null\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/{{subscriptionId1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"{{subscriptionId1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Инженер TП",
							"item": [
								{
									"name": "Получение списка подписок по userId админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка количества подписок, а также полей полей id, type, userId, entityId и tariffConfigId\", function () {",
													"    // pm.expect(pm.response.json().length).to.eql(4);",
													"    for(let i in pm.response.json()){",
													"        pm.expect(pm.response.json()[i].type).to.eql(\"CAMERA\");",
													"        pm.expect(pm.response.json()[i].userId).to.eql(pm.variables.get(\"id\"));",
													"        if(pm.response.json()[i].entityId === null ){",
													"            pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId1\"));",
													"            pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId1\"));",
													"        }",
													"        // else if(pm.response.json()[i].tariffConfigId != \"demo_tariff_config_id\"){",
													"        else{",
													"            if (pm.response.json()[i].entityId === pm.environment.get(\"kam0\") ){",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId2\"));",
													"                pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId2\"));",
													"            }",
													"            else{",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId3\"));",
													"                pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId2\"));",
													"            }",
													"        }",
													"        // else{",
													"        //     pm.expect(pm.response.json()[i].entityId).eql(pm.environment.get(\"kam2\"))",
													"        //     pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId_demo\"));",
													"        //     pm.expect(pm.response.json()[i].tariffConfigId).to.eql(\"demo_tariff_config_id\");",
													"        // }",
													"    }",
													"});",
													"",
													"// entityId не обязательное поле",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"array\",",
													"    \"items\": {",
													"        \"title\": \"A Schema\",",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"type\",",
													"            \"startDate\",",
													"            \"stopDate\",",
													"            \"userId\",",
													"            \"tariffConfigId\"",
													"        ],",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"title\": \"The id Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"type\": {",
													"                \"title\": \"The type Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"startDate\": {",
													"                \"title\": \"The startDate Schema\",",
													"                \"type\": \"number\"",
													"            },",
													"            \"stopDate\": {",
													"                \"title\": \"The stopDate Schema\",",
													"                \"type\": \"number\"",
													"            },",
													"            \"entityId\": {",
													"                \"title\": \"The entityId Schema\",",
													"                \"type\": [",
													"                    \"null\",",
													"                    \"string\"",
													"                ]",
													"            },",
													"            \"userId\": {",
													"                \"title\": \"The userId Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"tariffConfigId\": {",
													"                \"title\": \"The tariffConfigId Schema\",",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData = JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions?userId={{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по entityId админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/byEntityId/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"byEntityId",
												"{{kam0}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Применение подписки к другой сущности (камере) админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/{{subscriptionId1}}/applyForEntity?entityId={{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"{{subscriptionId1}}",
												"applyForEntity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{kam0}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по entityId админом или инженером ТП. (проверка переноса)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/byEntityId/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"byEntityId",
												"{{kam0}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по ее Id админом или инженером ТП. (проверка переноса)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(null);",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"null\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/{{subscriptionId2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"{{subscriptionId2}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Обновление статуса существующего тарифа ( ARCHIVE)",
					"item": [
						{
							"name": "Обновление статуса существующего тарифа ( ARCHIVE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Второй тариф\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Тариф с хорошим качеством\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"ARCHIVE\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"QHIGH\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(5);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(2500);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId2}}/changeStatus?status=ARCHIVE",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId2}}",
										"changeStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "ARCHIVE"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Контроллер для работы с плеером",
					"item": [
						{
							"name": "Управление событиями у камер на временной шкале (EVI_Cloud_Home)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// try{",
											"//     pm.test(\"Status code is 200\", function () {",
											"//         pm.response.to.have.status(200);",
											"//     });",
											"//     pm.test(\"Проверка наличия id в ответе\", function () {",
											"//         pm.expect( pm.response.json().length).to.eql(1)",
											"//         pm.expect( typeof(pm.response.json()[0])).to.eql(\"string\")",
											"//     });",
											"// }",
											"// catch(e)",
											"// {",
											"// // выводим исключение в консоль",
											"//     console.log(e);",
											"// }",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var time_to = Math.round(Date.now()/1000.0)",
											"pm.environment.set(\"time_events_start\", time_to);",
											"pm.environment.set(\"time_events_end\", time_to+1);",
											"console.log(time_to)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"camera_id\":\"{{kam0}}\",\n    \"type\": \"script\",\n    \"start_at\": {{time_events_start}},\n    \"end_at\": {{time_events_end}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EVI_host}}/vsaas/api/v2/events",
									"host": [
										"{{EVI_host}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка событий (на платформу)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка значений полей play_url, record_type и utc_time\", function () {",
											"        // Проверяем в ссылке start_time",
											"        let time = \"start_time=\" + pm.environment.get(\"time_events_start\");        ",
											"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
											"        // Проверяем в ссылке end_time",
											"        time = \"end_time=\" + pm.environment.get(\"time_events_end\");    ",
											"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
											"",
											"        pm.expect( pm.response.json()[0].record_type).to.eql(\"script\");",
											"        time = pm.environment.get(\"time_events_start\") + \"000000\";",
											"        pm.expect( pm.response.json()[0].utc_time).to.eql(Number(time));",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"download_url\",",
											"                \"play_url\",",
											"                \"record_duration\",",
											"                \"record_size\",",
											"                \"record_type\",",
											"                \"utc_time\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"download_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"play_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"record_duration\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"record_size\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"record_type\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"utc_time\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/events/list",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"events",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка событий (на платформу) (с некорректными параметрами)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка размера возращаемого массива (должно быть 0) \", function () {",
											"        pm.expect( pm.response.json().length).to.eql(0);",
											"    });",
											"    ",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);",
											"pm.environment.set(\"incorrect_start_time\", Date.now());",
											"pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/events/list?start_time={{incorrect_start_time}}&end_time={{incorrect_end_time}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"events",
										"list"
									],
									"query": [
										{
											"key": "start_time",
											"value": "{{incorrect_start_time}}"
										},
										{
											"key": "end_time",
											"value": "{{incorrect_end_time}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка событий (на платформу) (с корректными параметрами)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка значений полей play_url, record_type и utc_time\", function () {",
											"        // Проверяем в ссылке start_time",
											"        let time = \"start_time=\" + pm.environment.get(\"time_events_start\");        ",
											"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
											"        // Проверяем в ссылке end_time",
											"        time = \"end_time=\" + pm.environment.get(\"time_events_end\");    ",
											"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
											"",
											"        pm.expect( pm.response.json()[0].record_type).to.eql(\"script\");",
											"        time = pm.environment.get(\"time_events_start\") + \"000000\";",
											"        pm.expect( pm.response.json()[0].utc_time).to.eql(Number(time));",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"download_url\",",
											"                \"play_url\",",
											"                \"record_duration\",",
											"                \"record_size\",",
											"                \"record_type\",",
											"                \"utc_time\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"download_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"play_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"record_duration\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"record_size\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"record_type\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"utc_time\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/events/list?start_time=0&end_time=33242598802000",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"events",
										"list"
									],
									"query": [
										{
											"key": "start_time",
											"value": "0"
										},
										{
											"key": "end_time",
											"value": "33242598802000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка временных диапазонов записей с evi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"start_time\",",
											"                \"end_time\"",
											"            ],",
											"            \"properties\": {",
											"                \"start_time\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"end_time\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/archive/ranges?source=VIDEOSERVER&start_time=0&end_time=33242598802000",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"archive",
										"ranges"
									],
									"query": [
										{
											"key": "source",
											"value": "VIDEOSERVER"
										},
										{
											"key": "start_time",
											"value": "0"
										},
										{
											"key": "end_time",
											"value": "33242598802000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка временных диапазонов записей с evi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"time\",",
											"                \"date\"",
											"            ],",
											"            \"properties\": {",
											"                \"time\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"date\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка значений поля date\", function () {",
											"        // Получаем текущую дату",
											"        const currentDate = new Date();",
											"",
											"        // Устанавливаем ожидаемую дату ",
											"        const expectedDate = new Date(pm.response.json()[0].date);",
											"        ",
											"        // Сравниваем текущую дату с ожидаемой",
											"        pm.expect(expectedDate.getFullYear()).to.eql(currentDate.getFullYear());",
											"        pm.expect(expectedDate.getMonth()).to.eql(currentDate.getMonth());",
											"        pm.expect(expectedDate.getDate()).to.eql(currentDate.getDate());",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/archive/days?source=VIDEOSERVER&start_time=0&end_time=33242598802000",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"archive",
										"days"
									],
									"query": [
										{
											"key": "source",
											"value": "VIDEOSERVER"
										},
										{
											"key": "start_time",
											"value": "0"
										},
										{
											"key": "end_time",
											"value": "33242598802000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Контроллер для работы со всем комплексом сущностей эквайринга для админа и инженера ТП",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id2\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"stri222ng\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string2@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"2\",\n    \"password\": \"2\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token2\", jsonData.access_token);  //записываем в переменную access_token токен",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "2",
													"type": "text"
												},
												{
													"key": "password",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"2\",\n    \"type\": \"HOUSE\",\n    \"address\": \"2\",\n    \"apartment\": \"2\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Попытка перенести подписки и ордера с существующего пользователя",
							"item": [
								{
									"name": "Перенос всех сущностей эквайринга (заказов и подписок) от одного пользователя к другому. (инженер ТП, пользователь не удален)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.json().message).to.eql(\"Unable to move orders and subscriptions of existing user to another user\");",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/acquiring/moveOrphanAcquiringEntities?oldUserId={{id}}&newUserId={{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"acquiring",
												"moveOrphanAcquiringEntities"
											],
											"query": [
												{
													"key": "oldUserId",
													"value": "{{id}}"
												},
												{
													"key": "newUserId",
													"value": "{{id2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос всех сущностей эквайринга (заказов и подписок) от одного пользователя к другому. (инженер ТП, пользователь не удален) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.json().message).to.eql(\"Unable to move orders and subscriptions of existing user to another user\");",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/acquiring/moveOrphanAcquiringEntities?oldUserId={{id}}&newUserId={{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"acquiring",
												"moveOrphanAcquiringEntities"
											],
											"query": [
												{
													"key": "oldUserId",
													"value": "{{id}}"
												},
												{
													"key": "newUserId",
													"value": "{{id2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос всех сущностей эквайринга (заказов и подписок) от одного пользователя к другому. (пользователь,  пользователь не удален)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.json().message).to.eql(\"Access Denied\");",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/acquiring/moveOrphanAcquiringEntities?oldUserId={{id}}&newUserId={{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"acquiring",
												"moveOrphanAcquiringEntities"
											],
											"query": [
												{
													"key": "oldUserId",
													"value": "{{id}}"
												},
												{
													"key": "newUserId",
													"value": "{{id2}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Пользователь удаляет себя сам",
							"item": [
								{
									"name": "Запрос на удаление пользователем своего аккаунта",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/user/deleteyourself/request",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"deleteyourself",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на postman-mongo-proxy (подлкючени к БД)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let host = pm.globals.get(\"host\");",
													"host = host.split(\"/\")[2].split(\":\")[0]",
													"pm.environment.set(\"host_db\", host);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\":\"{{host_db}}\",\n    \"port\":\"{{db_port}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mongo_proxy_host}}/url",
											"host": [
												"{{mongo_proxy_host}}"
											],
											"path": [
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на postman-mongo-proxy вытаскиваем из DB confirmToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"confirmToken\", pm.response.json()[0].token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "db.collection('confirmTokens').find({\"userId\": \"{{id}}\"}).toArray();",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{mongo_proxy_host}}/db/core/search_by_script",
											"host": [
												"{{mongo_proxy_host}}"
											],
											"path": [
												"db",
												"core",
												"search_by_script"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подтверждение удаления пользователем своего аккаунта",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/user/deleteyourself/confirm/{{confirmToken}}/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"deleteyourself",
												"confirm",
												"{{confirmToken}}",
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перенос всех сущностей эквайринга (заказов и подписок) от одного пользователя к другому.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test_support_1_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/acquiring/moveOrphanAcquiringEntities?oldUserId={{id}}&newUserId={{id2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"acquiring",
										"moveOrphanAcquiringEntities"
									],
									"query": [
										{
											"key": "oldUserId",
											"value": "{{id}}"
										},
										{
											"key": "newUserId",
											"value": "{{id2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка переноса orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка смены значения поля userId в БД\", function () {",
											"    for (let i in pm.response.json()){",
											"        if ((pm.response.json()[i].items[0].entityId === pm.environment.get(\"kam0\")) || (pm.response.json()[i].items[0].entityId === pm.environment.get(\"kam1\"))) {",
											"           pm.expect(pm.response.json()[i].userId).to.eql(pm.environment.get(\"id2\"))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dbName\":\"iot-core\",\n    \"collection\":\"orders\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mongo_proxy_host}}/find_all",
									"host": [
										"{{mongo_proxy_host}}"
									],
									"path": [
										"find_all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка переноса subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка смены значения поля userId в БД\", function () {",
											"    for (let i in pm.response.json()){",
											"        pm.expect(pm.response.json()[0].userId).to.eql(pm.environment.get(\"id2\"))        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dbName\":\"iot-core\",\n    \"collection\":\"subscriptions\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mongo_proxy_host}}/find_all",
									"host": [
										"{{mongo_proxy_host}}"
									],
									"path": [
										"find_all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление",
					"item": [
						{
							"name": "Удаление инженера ТП и проверка удаления пользователя",
							"item": [
								{
									"name": "Админ пытается удалить пользователя с активными подписками",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "удалить инженера ТП с платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Пользователь удален (код 204)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{test_support_1_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_support_1_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Пользователь удаляет себя сам",
							"item": [
								{
									"name": "Запрос на удаление пользователем своего аккаунта",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token2}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/user/deleteyourself/request",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"deleteyourself",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на postman-mongo-proxy (подлкючени к БД)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let host = pm.globals.get(\"host\");",
													"host = host.split(\"/\")[2].split(\":\")[0]",
													"pm.environment.set(\"host_db\", host);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\":\"{{host_db}}\",\n    \"port\":\"{{db_port}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mongo_proxy_host}}/url",
											"host": [
												"{{mongo_proxy_host}}"
											],
											"path": [
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на postman-mongo-proxy вытаскиваем из DB confirmToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"confirmToken\", pm.response.json()[0].token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "db.collection('confirmTokens').find({\"userId\": \"{{id2}}\"}).toArray();",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{mongo_proxy_host}}/db/core/search_by_script",
											"host": [
												"{{mongo_proxy_host}}"
											],
											"path": [
												"db",
												"core",
												"search_by_script"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подтверждение удаления пользователем своего аккаунта",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token2}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/user/deleteyourself/confirm/{{confirmToken}}/{{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"deleteyourself",
												"confirm",
												"{{confirmToken}}",
												"{{id2}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "i",
			"value": "0",
			"type": "string"
		}
	]
}