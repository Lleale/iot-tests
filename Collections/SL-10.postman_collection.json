{
	"info": {
		"_postman_id": "c2572a78-5c39-46c9-a10b-e56691a3bd3f",
		"name": "SL-10",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21716455"
	},
	"item": [
		{
			"name": "Подготовка",
			"item": [
				{
					"name": "Проверка состояния симулятора контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.json().devices.length > 0){",
									"    throw new Error('Устройства уже добавлены. Перезапустите симулятор Z-Wave контроллера');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/info",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Сброс SL-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let startTime = Date.now();",
									"",
									"function startRequests() {",
									"    pm.sendRequest({",
									"        url: pm.variables.get(\"host\")+\"/version\",",
									"        method: 'GET'",
									"    }, function (err, res) {",
									"        if (err) {",
									"            console.log(err);",
									"            if ((Date.now()-startTime) > 60000) {",
									"                pm.expect.fail('Платформа все еще не доступна спустя 1 минуту');",
									"            }",
									"            setTimeout(startRequests, 1000);",
									"        }",
									"        else {",
									"            pm.expect(1).to.eq(1);",
									"        }",
									"    });",
									"}",
									"",
									"setTimeout(startRequests, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
									"pm.environment.set('no_api_host', no_api_host);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{no_api_host}}/resettodefault.php",
							"host": [
								"{{no_api_host}}"
							],
							"path": [
								"resettodefault.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Регистрация пользователя после сброса",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь успешно зарегестрирован, статус код 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{sl10_username}}\",\n    \"password\": \"{{sl10_password}}\",\n    \"serialno\": \"{{serial}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/registration",
							"host": [
								"{{host}}"
							],
							"path": [
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Авторизация пользователя после регистрации (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение сервиса Z-Wave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
									"pm.environment.set('no_api_host', no_api_host);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{no_api_host}}/json.htm?type=command&param=iotsettings&iotEnabled=false",
							"host": [
								"{{no_api_host}}"
							],
							"path": [
								"json.htm"
							],
							"query": [
								{
									"key": "type",
									"value": "command"
								},
								{
									"key": "param",
									"value": "iotsettings"
								},
								{
									"key": "iotEnabled",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Включение Telnet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
									"pm.environment.set('no_api_host', no_api_host);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{no_api_host}}/json.htm?type=command&param=telnetsettings&telnetEnabled=true",
							"host": [
								"{{no_api_host}}"
							],
							"path": [
								"json.htm"
							],
							"query": [
								{
									"key": "type",
									"value": "command"
								},
								{
									"key": "param",
									"value": "telnetsettings"
								},
								{
									"key": "telnetEnabled",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка работы с токенами",
			"item": [
				{
					"name": "Авторизация пользователя (OAuth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка токена получением дома (OAuth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отзыв всех токенов (OAuth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth/token/revoke/all",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth",
								"token",
								"revoke",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка токена после отзыва (OAuth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка токена получением дома (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отзыв всех токенов (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token/revoke/all",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token",
								"revoke",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка токена после отзыва (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка сервисных запросов (без авторизации)",
			"item": [
				{
					"name": "Получение версии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"",
									"pm.test(\"Есть версия API\", function () {",
									"  pm.expect(json.api).to.be.a(\"string\");",
									"});",
									"pm.test(\"Есть текущее время\", function () {",
									"  pm.expect(json.currentTime).to.be.a(\"string\");",
									"});",
									"pm.test(\"Есть версия платформы\", function () {",
									"  pm.expect(json.version).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о платформе",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"",
									"pm.test(\"Есть порт для контроллера\", function () {",
									"  pm.expect(json.ctlGatePort).to.be.a(\"number\");",
									"});",
									"pm.test(\"Есть безопасный порт для контроллера\", function () {",
									"  pm.expect(json.ctlGateSecurityPort).to.be.a(\"number\");",
									"});",
									"pm.test(\"Есть имя платформы\", function () {",
									"  pm.expect(json.serverName).to.be.a(\"string\");",
									"});",
									"pm.test(\"Есть порт UI\", function () {",
									"  pm.expect(json.uiPort).to.be.a(\"number\");",
									"});",
									"pm.test(\"Есть схема UI\", function () {",
									"  pm.expect(json.uiScheme).to.be.a(\"string\");",
									"});",
									"pm.test(\"Есть ссылка на политику конфиденциальности\", function () {",
									"  pm.expect(json.privacyPolicyUrl).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/info",
							"host": [
								"{{host}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка сервисных запросов (с авторизацией)",
			"item": [
				{
					"name": "Общие запросы",
					"item": [
						{
							"name": "Авторизация пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка доступности страницы настроек",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SL-Core не офлайн\", function () {",
											"  pm.expect(pm.response.text()).to.not.contain(\"SL-Core Offline\");",
											"});",
											"",
											"pm.test(\"Есть ссылка на сайт Eltex\", function () {",
											"  pm.expect(pm.response.text()).to.contain(\"https://eltex-co.ru/\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
											"pm.environment.set('no_api_host', no_api_host);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{no_api_host}}/#/Setup",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										""
									],
									"hash": "/Setup"
								}
							},
							"response": []
						},
						{
							"name": "Получение информации об авторизации",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"let json = pm.response.json();",
											"",
											"pm.test(\"Получено имя пользователя\", function () {",
											"  pm.expect(json.user).to.be.eq(pm.variables.get(\"sl10_username\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
											"pm.environment.set('no_api_host', no_api_host);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{no_api_host}}/json.htm?type=command&param=getauth",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										"json.htm"
									],
									"query": [
										{
											"key": "type",
											"value": "command"
										},
										{
											"key": "param",
											"value": "getauth"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о настройках",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"let json = pm.response.json();",
											"",
											"pm.test(\"Получено имя платформы\", function () {",
											"  pm.expect(json.Title).to.be.eq(\"SL-Core\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
											"pm.environment.set('no_api_host', no_api_host);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{no_api_host}}/json.htm?type=settings",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										"json.htm"
									],
									"query": [
										{
											"key": "type",
											"value": "settings"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение общего лога",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"let json = pm.response.json();",
											"",
											"pm.test(\"В логе есть записи\", function () {",
											"  pm.expect(json.result.length).to.be.gte(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
											"pm.environment.set('no_api_host', no_api_host);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{no_api_host}}/json.htm?type=command&param=getlog&lastlogtime=0&loglevel=all.log",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										"json.htm"
									],
									"query": [
										{
											"key": "type",
											"value": "command"
										},
										{
											"key": "param",
											"value": "getlog"
										},
										{
											"key": "lastlogtime",
											"value": "0"
										},
										{
											"key": "loglevel",
											"value": "all.log"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Попытка получения данных о платформе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"let json = pm.response.json();",
											"",
											"pm.test(\"Есть MAC адрес\", function () {",
											"  pm.expect(json.mac).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Есть серийный номер\", function () {",
											"  pm.expect(json.serial).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Есть имя устройства\", function () {",
											"  pm.expect(json.title).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/deviceData",
									"host": [
										"{{host}}"
									],
									"path": [
										"deviceData"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Сброс настроек",
					"item": []
				},
				{
					"name": "Бэкап",
					"item": [
						{
							"name": "Авторизация пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание бэкапа",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
											"pm.environment.set('no_api_host', no_api_host);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Размер бэкапа больше нуля\", () => {",
											"    pm.expect(pm.response.size().body).to.be.gt(0);",
											"    console.log(responseBody);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{no_api_host}}/backupdatabase.php",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										"backupdatabase.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка событий в журнале",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let latestEvent = pm.response.json().data[0];",
											"",
											"pm.test(\"Информация о событии верна\", function () {",
											"    pm.expect(latestEvent.color).to.eq('WARNING');",
											"    pm.expect(latestEvent.level).to.eq('SYSTEM');",
											"    pm.expect(latestEvent.message).to.include('создал файл восстановления');",
											"    pm.expect(latestEvent.type).to.eq('system');",
											"});",
											"",
											"pm.test(\"Информация о секции верна\", function () {",
											"    pm.expect(latestEvent.section_type).to.eq('UNDEFINED');",
											"    pm.expect(latestEvent.section_id).to.eq(5);",
											"});",
											"",
											"pm.test(\"Информация об источнике события\", function () {",
											"    pm.expect(latestEvent.origin_type).to.eq('USER');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?houseId=0&limit=50&offset=0&fromMillis=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "houseId",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "fromMillis",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Проверка изменения времени",
			"item": [
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Установка времени на платформе (ранее текущего)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 304\", function () {",
									"  pm.response.to.have.status(304);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeval\": {\n        \"sec\": 1000000\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/setDateTime",
							"host": [
								"{{host}}"
							],
							"path": [
								"setDateTime"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка текущего времени",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"",
									"pm.test(\"Текущее время в настоящем\", function () {",
									"  let parsedTime = Date.parse(json.currentTime.replace(/\\[.+\\]/, \"\"));",
									"",
									"  pm.expect(parsedTime/1000).to.be.greaterThan(2000000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Установка времени на платформе (ранее текущего, принудительно)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeval\": {\n        \"sec\": 1000000\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/setDateTime?force_mode=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"setDateTime"
							],
							"query": [
								{
									"key": "force_mode",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка текущего времени",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"",
									"pm.test(\"Текущее время в прошлом\", function () {",
									"  let parsedTime = Date.parse(json.currentTime.replace(/\\[.+\\]/, \"\"));",
									"",
									"  pm.expect(parsedTime/1000).to.be.lessThan(1000010);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Установка времени на платформе (текущее)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"sl_timestamp\", Math.round(Date.now()/1000 + 5));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeval\": {\n        \"sec\": {{sl_timestamp}}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/setDateTime",
							"host": [
								"{{host}}"
							],
							"path": [
								"setDateTime"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка текущего времени",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"",
									"pm.test(\"Текущее время в настоящем\", function () {",
									"  let parsedTime = Date.parse(json.currentTime.replace(/\\[.+\\]/, \"\"));",
									"",
									"  pm.expect(Math.abs(parsedTime - Date.now())/1000).to.be.lessThan(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка обновлений",
			"item": [
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка проверка обновлений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"let json = pm.response.json();",
									"",
									"pm.test(\"Есть флаг о доступности обновления\", function () {",
									"  pm.expect(json.available).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Есть сообщение о доступности обновления\", function () {",
									"  pm.expect(json.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/checkUpdateAvailable",
							"host": [
								"{{host}}"
							],
							"path": [
								"checkUpdateAvailable"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка настроек уведомлений",
			"item": [
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение настроек пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Нет заглушенных категорий уведомлений\", function () {",
									"    pm.expect(pm.response.json().additionalSettings.mutedEmergencyPushCategories).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/usersettings",
							"host": [
								"{{host}}"
							],
							"path": [
								"usersettings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Заглушение всех категорий уведмолений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"additionalSettings\": {\n        \"mutedEmergencyPushCategories\": [\n            \"GUARD_INTRUSION\",\n            \"LEAKAGE_ALARM\",\n            \"FIRE_ALARM\",\n            \"SMOKE_ALARM\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usersettings",
							"host": [
								"{{host}}"
							],
							"path": [
								"usersettings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка заглушенных категорий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Все категории уведомлений заглушены\", function () {",
									"    pm.expect(pm.response.json().additionalSettings.mutedEmergencyPushCategories).to.have.lengthOf(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/usersettings",
							"host": [
								"{{host}}"
							],
							"path": [
								"usersettings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Включение всех категорий уведомлений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"additionalSettings\": {\n        \"mutedEmergencyPushCategories\": []\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usersettings",
							"host": [
								"{{host}}"
							],
							"path": [
								"usersettings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка включенных категорий уведомлений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Нет заглушенных категорий уведомлений\", function () {",
									"    pm.expect(pm.response.json().additionalSettings.mutedEmergencyPushCategories).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/usersettings",
							"host": [
								"{{host}}"
							],
							"path": [
								"usersettings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Полчение настроек уведомлений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Пуш уведомления включены\", function () {",
									"    pm.expect(pm.response.json().byPush).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение всех типов уведомлений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"byPush\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка отключения пуш уведомлений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Пуш уведомления выключены\", function () {",
									"    pm.expect(pm.response.json().byPush).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Включение пуш уведомлений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"byPush\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка включения пуш уведомлений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Пуш уведомления включены\", function () {",
									"    pm.expect(pm.response.json().byPush).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление токена Firebase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firebaseToken\": \"3531e98c-610d-4db4-baec-75b6ed21f440\",\n  \"mobileDeviceId\": \"{{$guid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/firebase/add",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"firebase",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление токена Firebase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/firebase/3531e98c-610d-4db4-baec-75b6ed21f440",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"firebase",
								"3531e98c-610d-4db4-baec-75b6ed21f440"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление токена APN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"regularDeviceToken\": \"{{$guid}}\",\n    \"voipDeviceToken\": \"{{$guid}}\",\n    \"mobileDeviceId\": \"3531e98c-610d-4db4-baec-75b6ed21f440\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/applePushToken/add",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"applePushToken",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление токена APN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"regularDeviceToken\": \"{{$guid}}\",\n    \"voipDeviceToken\": \"{{$guid}}\",\n    \"mobileDeviceId\": \"{{Postman-Token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/applePushToken/3531e98c-610d-4db4-baec-75b6ed21f440",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"applePushToken",
								"3531e98c-610d-4db4-baec-75b6ed21f440"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Проверка событий",
			"item": [
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение количества непрочитанных событий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Есть непрочитанные события после авторизации\",() => {",
									"  pm.expect(pm.response.json().value).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events/counter?houseId=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"counter"
							],
							"query": [
								{
									"key": "houseId",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление времени последнего прочитанного сообщения",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"event_timestamp\", Date.now() + 10000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//На облаке возвращается количество непрочитанных событий после выполнения запроса, а не время, но приложению плевать, так что пока не проверяем",
									"//TODO: Завести задачу на исправление?",
									"/*",
									"pm.test(\"Нет непрочитанных событий\",() => {",
									"  pm.expect(pm.response.json().value).to.be.equal(0);",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{host}}/events/last?houseId=0&timeMillis={{event_timestamp}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"last"
							],
							"query": [
								{
									"key": "houseId",
									"value": "0"
								},
								{
									"key": "timeMillis",
									"value": "{{event_timestamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Повторная проверка количества событий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Нет непрочитанных событий\",() => {",
									"  pm.expect(pm.response.json().value).to.be.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events/counter?houseId=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"counter"
							],
							"query": [
								{
									"key": "houseId",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка событий и проверка события входа",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let eventType = \"system\";",
									"let messagePart = \"В систему выполнен вход под пользователем\";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Событие записано\", function () {",
									"  pm.expect(pm.response.json().data.any(x => ",
									"    x.type == eventType &&",
									"    x.message.includes(messagePart)",
									"    )).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events/endless?houseId=0&limit=50&offset=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"endless"
							],
							"query": [
								{
									"key": "houseId",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка управления пользователями",
			"item": [
				{
					"name": "Регистрация",
					"item": [
						{
							"name": "Авторизация пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Попытка регистрации пользователя с неправильным серийником",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Введен неверный серийный номер, статус код 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{test_user_login}}\",\n    \"password\": \"{{test_user_login}}\",\n    \"serialno\": \"A{{serial}}B\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registration",
									"host": [
										"{{host}}"
									],
									"path": [
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Попытка регистрации пользователя admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь зарезервирован, статус код 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"admin\",\n    \"password\": \"password\",\n    \"serialno\": \"{{serial}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registration",
									"host": [
										"{{host}}"
									],
									"path": [
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Регистрация нового пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(length=1) {",
											"    let randomString = \"\";",
											"    for (let i = 0; i < length; i++){",
											"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
											"    }",
											"    return randomString;",
											"}",
											"",
											"pm.environment.set('test_user_login', 'test_'+randomString(6));",
											"pm.environment.set('test_user_name', 'test_name_'+randomString(6));",
											"pm.environment.set('test_user_surname', 'test_surname_'+randomString(6));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь успешно зарегестрирован, статус код 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{test_user_login}}\",\n    \"password\": \"{{test_user_login}}\",\n    \"serialno\": \"{{serial}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registration",
									"host": [
										"{{host}}"
									],
									"path": [
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Попытка повторной регистрации пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь уже существует, статус код 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{test_user_login}}\",\n    \"password\": \"{{test_user_login}}\",\n    \"serialno\": \"{{serial}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registration",
									"host": [
										"{{host}}"
									],
									"path": [
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Попытка регистрации с некоррекнтым запросом",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Некорректный запрос, статус код 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{test_user_login}}\",\n    \"password\": \"{{test_user_login}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registration",
									"host": [
										"{{host}}"
									],
									"path": [
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{refresh_token}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Изменение личных данных",
					"item": [
						{
							"name": "Авторизация нового пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"new_access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"new_refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password={{test_user_login}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{test_user_login}}"
										},
										{
											"key": "password",
											"value": "{{test_user_login}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение данных о новом пользователе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"new_user_id\", jsonData.id); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains user ID\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{new_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение данных пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{new_user_id}}\",\n    \"name\": \"{{test_user_name}}\",\n    \"surname\": \"{{test_user_surname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profiles",
									"host": [
										"{{host}}"
									],
									"path": [
										"profiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка изменения данных пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Имя пользователя изменилось\",() => {",
											"  pm.expect(pm.response.json().name).to.be.equal(pm.environment.get(\"test_user_name\"));",
											"  pm.expect(pm.response.json().surname).to.be.equal(pm.environment.get(\"test_user_surname\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profiles/{{new_user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"profiles",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка всех пользователей",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Имя пользователя изменилось\",() => {",
											"  pm.expect(pm.response.json().any(x => x.name == pm.environment.get(\"test_user_name\"))).to.be.true;",
											"  pm.expect(pm.response.json().any(x => x.surname == pm.environment.get(\"test_user_surname\"))).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Чуть более другое изменение данных пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{test_user_surname}}\",\n    \"surname\": \"{{test_user_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{new_user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка изменения данных пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Имя пользователя изменилось\",() => {",
											"  pm.expect(pm.response.json().name).to.be.equal(pm.environment.get(\"test_user_surname\"));",
											"  pm.expect(pm.response.json().surname).to.be.equal(pm.environment.get(\"test_user_name\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profiles/{{new_user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"profiles",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка всех пользователей",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Имя пользователя изменилось\",() => {",
											"  pm.expect(pm.response.json().any(x => x.name == pm.environment.get(\"test_user_surname\"))).to.be.true;",
											"  pm.expect(pm.response.json().any(x => x.surname == pm.environment.get(\"test_user_name\"))).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Изменение пароля",
					"item": [
						{
							"name": "Авторизация пользователя (1 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация пользователя (2 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token_2\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token_2\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация нового пользователя (1 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"new_access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"new_refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password={{test_user_login}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{test_user_login}}"
										},
										{
											"key": "password",
											"value": "{{test_user_login}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация нового пользователя (2 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"new_access_token_2\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"new_refresh_token_2\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password={{test_user_login}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{test_user_login}}"
										},
										{
											"key": "password",
											"value": "{{test_user_login}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение пароля админом (1 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{new_user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации нового пользователя (сессия 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{new_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации нового пользователя (сессия 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{new_access_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации админа (сессия 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации админа (сессия 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена админа (1 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{refresh_token}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена админа (2 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token_2\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token_2\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{refresh_token_2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена пользователя (1 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{new_refresh_token}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{new_refresh_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена пользователя (2 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{new_refresh_token_2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{new_refresh_token_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация пользователя (1 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация пользователя (2 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token_2\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token_2\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация нового пользователя (1 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"new_access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"new_refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password=1234",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{test_user_login}}"
										},
										{
											"key": "password",
											"value": "1234"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация нового пользователя (2 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"new_access_token_2\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"new_refresh_token_2\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password=1234",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{test_user_login}}"
										},
										{
											"key": "password",
											"value": "1234"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение пароля пользователем (1 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{new_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"4321\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{new_user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации нового пользователя (сессия 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{new_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации нового пользователя (сессия 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{new_access_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации админа (сессия 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации админа (сессия 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена админа (1 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{refresh_token}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена админа (2 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token_2\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token_2\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{refresh_token_2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена пользователя (1 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"new_access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"new_refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{new_refresh_token}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{new_refresh_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена пользователя (2 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{new_refresh_token_2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{new_refresh_token_2}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Управление сессиями",
					"item": [
						{
							"name": "Авторизация пользователя (1 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация пользователя (2 сессия) (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token_2\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token_2\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"refresh_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка сессий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"В списке есть текущая сессия\", function () {",
											"    pm.expect(pm.response.json().data.any(x => x.current)).to.be.true;",
											"});",
											"",
											"pm.test(\"В списке есть хотя бы 1 активная сессия\", function () {",
											"    pm.expect(pm.response.json().data.any(x => x.loggedIn)).to.be.true;",
											"});",
											"",
											"pm.test(\"В списке нет локальных сессий\", function () {",
											"    pm.expect(pm.response.json().data.any(x => x.remoteAddress == \"127.0.0.1\")).to.be.false;",
											"});",
											"",
											"let json = pm.response.json();",
											"",
											"let latestSession = json.data[json.data.length - 1];",
											"pm.environment.set(\"latest_session_id\", latestSession.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info/current/user?limit=1000&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info",
										"current",
										"user"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление несуществующей сессии",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info/current/user?loginInfoId=000000",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info",
										"current",
										"user"
									],
									"query": [
										{
											"key": "loginInfoId",
											"value": "000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации админа (сессия 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации админа (сессия 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление последней сессии",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info/current/user?loginInfoId={{latest_session_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info",
										"current",
										"user"
									],
									"query": [
										{
											"key": "loginInfoId",
											"value": "{{latest_session_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации админа (сессия 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка авторизации админа (сессия 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена админа (1 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{refresh_token}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена админа (2 сессия)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{refresh_token_2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token_2}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление пользователей",
					"item": [
						{
							"name": "Авторизация пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление нового пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": [\n        \"{{new_user_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Регистрация нового пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(length=1) {",
											"    let randomString = \"\";",
											"    for (let i = 0; i < length; i++){",
											"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
											"    }",
											"    return randomString;",
											"}",
											"",
											"pm.environment.set('test_user_login', 'test_'+randomString(6));",
											"pm.environment.set('test_user_name', 'test_name_'+randomString(6));",
											"pm.environment.set('test_user_surname', 'test_surname_'+randomString(6));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{test_user_login}}\",\n    \"password\": \"{{test_user_login}}\",\n    \"serialno\": \"{{serial}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registration",
									"host": [
										"{{host}}"
									],
									"path": [
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление токена пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=refresh_token&refresh_token={{refresh_token}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "refresh_token"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация нового пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"new_access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"new_refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password={{test_user_login}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{test_user_login}}"
										},
										{
											"key": "password",
											"value": "{{test_user_login}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление пользователем самого себя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{new_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/user/deleteyourself/request",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"deleteyourself",
										"request"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Проверка внешнего доступа",
			"item": [
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подключение к WebSocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"connect"
							],
							"query": [
								{
									"key": "host",
									"value": "{{host}}/event_ws"
								},
								{
									"key": "token",
									"value": "{{access_token}}"
								},
								{
									"key": "subprotocol",
									"value": "SmartHome"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка состояния внешнего доступа (не активирован)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Внешний доступ не активирован\",() => {",
									"  pm.expect(pm.response.json().state).to.be.equal(\"NOT_ACTIVATED\");",
									"});",
									"",
									"pm.test(\"Нет полей с адресом и UUID\",() => {",
									"  pm.expect(pm.response.json().remoteGatewayURL).to.be.undefined;",
									"  pm.expect(pm.response.json().uuid).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/remote/getConnectionInfo",
							"host": [
								"{{host}}"
							],
							"path": [
								"remote",
								"getConnectionInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение адреса slgate (для корп. сети)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": \"172.16.5.19\",\n    \"host\": \"slgate.eltex-co.ru:4443\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/remote/url",
							"host": [
								"{{host}}"
							],
							"path": [
								"remote",
								"url"
							]
						}
					},
					"response": []
				},
				{
					"name": "Включение внешнего доступа",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@eltex.loc\",\n    \"phone\": \"+79990000000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/remote/activateConnection",
							"host": [
								"{{host}}"
							],
							"path": [
								"remote",
								"activateConnection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание начала включения внешнего доступа",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_state=NOT_READY&C_type=REMOTE_STATE_CHANGED",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_state",
									"value": "NOT_READY"
								},
								{
									"key": "C_type",
									"value": "REMOTE_STATE_CHANGED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка состояния внешнего доступа (до готовности)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Внешний доступ еще не готов\",() => {",
									"  pm.expect(pm.response.json().state).to.be.equal(\"NOT_READY\");",
									"});",
									"",
									"pm.test(\"Есть поля с адресом и UUID\",() => {",
									"  pm.expect(pm.response.json().remoteGatewayURL).to.not.be.undefined;",
									"  pm.expect(pm.response.json().uuid).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/remote/getConnectionInfo",
							"host": [
								"{{host}}"
							],
							"path": [
								"remote",
								"getConnectionInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание готовности внешнего доступа",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_state=^READY&C_type=REMOTE_STATE_CHANGED",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_state",
									"value": "^READY"
								},
								{
									"key": "C_type",
									"value": "REMOTE_STATE_CHANGED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка состояния внешнего доступа (готов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Внешний доступ готов\",() => {",
									"  pm.expect(pm.response.json().state).to.be.equal(\"READY\");",
									"});",
									"",
									"pm.test(\"Есть поля с адресом и UUID\",() => {",
									"  pm.expect(pm.response.json().remoteGatewayURL).to.not.be.undefined;",
									"  pm.expect(pm.response.json().uuid).to.not.be.undefined;",
									"});",
									"",
									"pm.environment.set(\"remote_host\", pm.response.json().remoteGatewayURL+\"/api/v1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/remote/getConnectionInfo",
							"host": [
								"{{host}}"
							],
							"path": [
								"remote",
								"getConnectionInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка доступности платформы извне",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@eltex.loc\",\n    \"phone\": \"+79990000000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remote_host}}/version",
							"host": [
								"{{remote_host}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение внешнего доступа",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@eltex.loc\",\n    \"phone\": \"+79990000000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/remote/deactivateConnection",
							"host": [
								"{{host}}"
							],
							"path": [
								"remote",
								"deactivateConnection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка состояния внешнего доступа (не активирован)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Внешний доступ не активирован\",() => {",
									"  pm.expect(pm.response.json().state).to.be.equal(\"NOT_ACTIVATED\");",
									"});",
									"",
									"pm.test(\"Нет полей с адресом и UUID\",() => {",
									"  pm.expect(pm.response.json().remoteGatewayURL).to.be.undefined;",
									"  pm.expect(pm.response.json().uuid).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/remote/getConnectionInfo",
							"host": [
								"{{host}}"
							],
							"path": [
								"remote",
								"getConnectionInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение от WebSocket",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/disconnect",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"disconnect"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка секций дома",
			"item": [
				{
					"name": "Комфорт",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Авторизация пользователя (OAuth2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
													"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"pm.test(\"Body contains refresh token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"}catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "{{sl10_username}}"
												},
												{
													"key": "password",
													"value": "{{sl10_password}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{access_token}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка секций",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть секция Освещение\",() => {",
													"  pm.expect(pm.response.json().any(x => x.sectionType == \"LIGHT\")).to.be.true;",
													"});",
													"",
													"pm.test(\"Есть секция Комфорт\",() => {",
													"  pm.expect(pm.response.json().any(x => x.sectionType == \"COMFORT\")).to.be.true;",
													"});",
													"",
													"pm.test(\"Есть секция Безопасность\",() => {",
													"  pm.expect(pm.response.json().any(x => x.sectionType == \"GUARD\")).to.be.true;",
													"});",
													"",
													"pm.test(\"Есть секция Камеры\",() => {",
													"  pm.expect(pm.response.json().any(x => x.sectionType == \"CAMERAS\")).to.be.true;",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"light_sectionId\", pm.response.json().find(x => x.sectionType == \"LIGHT\").id);",
													"    pm.environment.set(\"comfort_sectionId\", pm.response.json().find(x => x.sectionType == \"COMFORT\").id);",
													"    pm.environment.set(\"guard_sectionId\", pm.response.json().find(x => x.sectionType == \"GUARD\").id);",
													"    pm.environment.set(\"cameras_sectionId\", pm.response.json().find(x => x.sectionType == \"CAMERAS\").id);",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections?includeItems=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение доступных устройств в секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Нет доступных устройств\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Параметры контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Настройки применены\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"connected\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"mac\": \"ff:ff:ff:ff:ff:ff\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/info",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 6\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/add",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание датчика температуры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"template\": \"sz_air_htq01\",\n    \"nodeId\": 7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/add",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение типа платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"let isSL10 = pm.response.json().version.includes(\"-b\");",
													"",
													"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
													"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
													"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/version",
											"host": [
												"{{host}}"
											],
											"path": [
												"version"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о платформе",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var sdk = require('postman-collection');",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
													"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/info",
											"host": [
												"{{host}}"
											],
											"path": [
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});",
													"",
													"pm.environment.set(\"ctl_connected_timeout\", pm.response.json().status == \"Controller is already connected\" ? 0 : (pm.response.json().status ? 180000 : 5000));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/connect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"connect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса контроллера \"Доступен\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"if(pm.environment.get(\"ctl_connected_timeout\") > 10000)",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout={{ctl_connected_timeout}}",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "CONTROLLER_STATUS"
												},
												{
													"key": "C_status",
													"value": "^CONNECTED"
												},
												{
													"key": "timeout",
													"value": "{{ctl_connected_timeout}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Нет проблем с комфортом\", function () {",
													"    pm.expect(pm.response.json().comfortProblems).to.have.lengthOf(0);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().items .length).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение доступных устройств в секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть хотя бы одно доступное устройство\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"suitable"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проблемы",
							"item": [
								{
									"name": "Сработка датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/6/prop/0/waterLeak",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"6",
												"prop",
												"0",
												"waterLeak"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка событий в журнале Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let latestEvent = pm.response.json().data[0];",
													"",
													"pm.test(\"Информация о событии верна\", function () {",
													"    pm.expect(latestEvent.color).to.eq('DANGER');",
													"    pm.expect(latestEvent.level).to.eq('COMFORT');",
													"    pm.expect(latestEvent.message).to.include('ротечка');",
													"    pm.expect(latestEvent.type).to.eq('comfort');",
													"});",
													"",
													"pm.test(\"Информация о секции верна\", function () {",
													"    pm.expect(latestEvent.section_type).to.eq('COMFORT');",
													"    pm.expect(latestEvent.section_id).to.eq(pm.variables.get('comfort_sectionId'));",
													"});",
													"",
													"pm.test(\"Информация об устройстве верна\", function () {",
													"    pm.expect(latestEvent.origin_type).to.eq('DEVICE');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId=0&limit=50&offset=0&fromMillis=0&sectionId={{comfort_sectionId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "0"
												},
												{
													"key": "sectionId",
													"value": "{{comfort_sectionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика климата",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"1\": {\n        \"temperature\": {\n            \"value\": 50\n        },\n        \"humidity\": {\n            \"value\": 10\n        },\n        \"co2\": {\n            \"value\": 5000\n        },\n        \"voc\": {\n            \"value\": 5000\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/7/prop",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"7",
												"prop"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Обнаружена высокая температура\", function () {",
													"    pm.expect(pm.response.json().comfortProblems.any(x => ",
													"    x.problemType == \"TEMPERATURE_HIGH\" &&",
													"    x.propertyKind == \"TEMPERATURE\" &&",
													"    x.status == \"WARNING\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Обнаружена низкая влажность\", function () {",
													"    pm.expect(pm.response.json().comfortProblems.any(x => ",
													"    x.problemType == \"HUMIDITY_LOW\" &&",
													"    x.propertyKind == \"HUMIDITY\" &&",
													"    x.status == \"WARNING\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Обнаружен высокий уровень VOC\", function () {",
													"    pm.expect(pm.response.json().comfortProblems.any(x => ",
													"    x.problemType == \"VOC_HIGH\" &&",
													"    x.propertyKind == \"VOC\" &&",
													"    x.status == \"WARNING\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Обнаружена протечка\", function () {",
													"    pm.expect(pm.response.json().comfortProblems.any(x => ",
													"    x.problemType == \"LEAK\" &&",
													"    x.propertyKind == \"LEAK\" &&",
													"    x.status == \"ALARM\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Обнаружен высокий уровень CO2\", function () {",
													"    pm.expect(pm.response.json().comfortProblems.any(x => ",
													"    x.problemType == \"CO2_HIGH\" &&",
													"    x.propertyKind == \"CO2\" &&",
													"    x.status == \"WARNING\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение протечки\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"LEAK\" &&",
													"    x.entity.value == \"true\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение температуры\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"TEMPERATURE\" &&",
													"    x.entity.value == \"50.0\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение влажности\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"HUMIDITY\" &&",
													"    x.entity.value == \"10\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение VOC\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"VOC\" &&",
													"    x.entity.value == \"5000\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение VOC\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"CO2\" &&",
													"    x.entity.value == \"5000\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().items .length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/6/prop/0/waterLeak",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"6",
												"prop",
												"0",
												"waterLeak"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка событий в журнале Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let latestEvent = pm.response.json().data[0];",
													"",
													"pm.test(\"Информация о событии верна\", function () {",
													"    pm.expect(latestEvent.color).to.eq('SUCCESS');",
													"    pm.expect(latestEvent.level).to.eq('COMFORT');",
													"    pm.expect(latestEvent.message).to.include('ротечка');",
													"    pm.expect(latestEvent.type).to.eq('comfort');",
													"});",
													"",
													"pm.test(\"Информация о секции верна\", function () {",
													"    pm.expect(latestEvent.section_type).to.eq('COMFORT');",
													"    pm.expect(latestEvent.section_id).to.eq(pm.variables.get('comfort_sectionId'));",
													"});",
													"",
													"pm.test(\"Информация об устройстве верна\", function () {",
													"    pm.expect(latestEvent.origin_type).to.eq('DEVICE');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId=0&limit=50&offset=0&fromMillis=0&sectionId={{comfort_sectionId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "0"
												},
												{
													"key": "sectionId",
													"value": "{{comfort_sectionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика климата",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"1\": {\n        \"temperature\": {\n            \"value\": 20\n        },\n        \"humidity\": {\n            \"value\": 50\n        },\n        \"co2\": {\n            \"value\": 20\n        },\n        \"voc\": {\n            \"value\": 20\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/7/prop",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"7",
												"prop"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Нет проблем с комфортом\", function () {",
													"    pm.expect(pm.response.json().comfortProblems).to.have.lengthOf(0);",
													"});",
													"",
													"pm.test(\"Корректное значение протечки\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"LEAK\" &&",
													"    x.entity.value == \"false\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение температуры\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"TEMPERATURE\" &&",
													"    x.entity.value == \"20.0\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение влажности\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"HUMIDITY\" &&",
													"    x.entity.value == \"50\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение VOC\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"VOC\" &&",
													"    x.entity.value == \"20\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение CO2\", function () {",
													"    pm.expect(pm.response.json().items[0].innerItems.any(x =>",
													"    x.entity.kind == \"CO2\" &&",
													"    x.entity.value == \"20\"",
													"    )).to.be.true;",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Включение в секцию",
							"item": [
								{
									"name": "Проверка наличия включенных в секцию Комфорт устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть доступные устройства\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.gt(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Исключение всех устройств из группы \"Без группы\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"0\",\n        \"innerItemsId\": []\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия включенных в секцию Освещение устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Доступных устройств нет\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка доступных устройств в секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let comfortDevices = pm.response.json().find(x => x.id == \"0\").innerItems.reduce((a,b,i) => a+(i != 0 ? \",\\\"\" : \"\\\"\")+b.id+\"\\\"\", \"\");",
													"pm.environment.set(\"comfort_devices\", comfortDevices);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение всех устройств в группе \"Без группы\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"0\",\n        \"innerItemsId\": [{{comfort_devices}}]\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка наличия включенных в секцию Освещение устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть доступные устройства\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.gt(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Группы",
							"item": [
								{
									"name": "Создание новой группы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"test_group_id\", pm.response.text());",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"houseId\": \"0\",\n\t\"isExpanded\": true,\n\t\"title\": \"{{test_group_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/0/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть два элемента\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Устройство в группе \\\"Без группы\\\"\", function () {",
													"    pm.expect(pm.response.json().items.find(x => x.id == 0).innerItems.length).to.be.eq(5);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перемещение устройств в новую группу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cameraIds\": [],\n    \"deviceIds\": [\n        \"6\"\n    ],\n    \"locationId\": \"{{test_group_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть два элемента\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Устройство в новой группе\", function () {",
													"    pm.expect(pm.response.json().items.find(x => x.id == parseInt(pm.environment.get(\"test_group_id\"))).innerItems.length).to.be.eq(1);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/6/prop/0/waterLeak",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"6",
												"prop",
												"0",
												"waterLeak"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть два элемент\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Устройство в новой группе\", function () {",
													"    pm.expect(pm.response.json().items.find(x => x.id == parseInt(pm.environment.get(\"test_group_id\"))).innerItems.length).to.be.eq(1);",
													"});",
													"",
													"pm.test(\"Обнаружена протечка\", function () {",
													"    pm.expect(pm.response.json().comfortProblems.any(x => ",
													"    x.problemType == \"LEAK\" &&",
													"    x.propertyKind == \"LEAK\" &&",
													"    x.status == \"ALARM\"",
													"    )).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление группы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/0/groups/{{test_group_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0",
												"groups",
												"{{test_group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть только один элемент\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.eq(1);",
													"});",
													"",
													"pm.test(\"Устройство в группе \\\"Без группы\\\"\", function () {",
													"    pm.expect(pm.response.json().items.find(x => x.id == 0).innerItems.length).to.be.eq(5);",
													"});",
													"",
													"pm.test(\"Обнаружена протечка\", function () {",
													"    pm.expect(pm.response.json().comfortProblems.any(x => ",
													"    x.problemType == \"LEAK\" &&",
													"    x.propertyKind == \"LEAK\" &&",
													"    x.status == \"ALARM\"",
													"    )).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/6/prop/0/waterLeak",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"6",
												"prop",
												"0",
												"waterLeak"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть только один элемент\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.eq(1);",
													"});",
													"",
													"pm.test(\"Устройство в группе \\\"Без группы\\\"\", function () {",
													"    pm.expect(pm.response.json().items.find(x => x.id == 0).innerItems.length).to.be.eq(5);",
													"});",
													"",
													"pm.test(\"Протечка не обнаружена\", function () {",
													"    pm.expect(pm.response.json().comfortProblems.any(x => ",
													"    x.problemType == \"LEAK\" &&",
													"    x.propertyKind == \"LEAK\" &&",
													"    x.status == \"ALARM\"",
													"    )).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Аналитика",
							"item": [
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов температуры\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"TEMPERATURE\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(18);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(28);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"    pm.environment.set('test_temp_propId', comparison.propertyId);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов влажности\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"HUMIDITY\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(30);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(60);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"    pm.environment.set('test_humidity_propId', comparison.propertyId);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов VOC\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"VOC\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(0);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(1000);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"    pm.environment.set('test_voc_propId', comparison.propertyId);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов CO2\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"CO2\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(0);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(1000);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"    pm.environment.set('test_co2_propId', comparison.propertyId);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование порогов температуры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"analyticType\": \"COMPARISON\",\n    \"deviation\": 0,\n    \"enabled\": true,\n    \"interval\": {\n        \"max\": 30.0,\n        \"min\": 20.0\n    },\n    \"period\": 0,\n    \"propertyId\": \"{{test_temp_propId}}\",\n    \"status\": \"NORMAL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_temp_propId}}/analytics",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_temp_propId}}",
												"analytics"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование порогов влажности",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"analyticType\": \"COMPARISON\",\n    \"deviation\": 0,\n    \"enabled\": false,\n    \"interval\": {\n        \"max\": 30.0,\n        \"min\": 20.0\n    },\n    \"period\": 0,\n    \"propertyId\": \"{{test_humidity_propId}}\",\n    \"status\": \"NORMAL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_humidity_propId}}/analytics",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_humidity_propId}}",
												"analytics"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование порогов VOC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"analyticType\": \"COMPARISON\",\n    \"deviation\": 0,\n    \"enabled\": true,\n    \"interval\": {\n        \"max\": 20000.0,\n        \"min\": 1000.0\n    },\n    \"period\": 0,\n    \"propertyId\": \"{{test_voc_propId}}\",\n    \"status\": \"NORMAL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_voc_propId}}/analytics",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_voc_propId}}",
												"analytics"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование порогов CO2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"analyticType\": \"COMPARISON\",\n    \"deviation\": 0,\n    \"enabled\": false,\n    \"interval\": {\n        \"max\": 300.0,\n        \"min\": -10.0\n    },\n    \"period\": 0,\n    \"propertyId\": \"{{testco2_propId}}\",\n    \"status\": \"NORMAL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_co2_propId}}/analytics",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_co2_propId}}",
												"analytics"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов температуры\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"TEMPERATURE\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(20);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(30);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение порогов влажности\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"HUMIDITY\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(20);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(30);",
													"    pm.expect(comparison.enabled).to.be.false;",
													"});",
													"",
													"pm.test(\"Корректное значение порогов VOC\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"VOC\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(1000);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(20000);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"});",
													"",
													"pm.test(\"Корректное значение порогов CO2\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"CO2\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(-10);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(300);",
													"    pm.expect(comparison.enabled).to.be.false;",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование порогов температуры Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"analyticType\": \"COMPARISON\",\n    \"deviation\": 0,\n    \"enabled\": true,\n    \"interval\": {\n        \"max\": 28.0,\n        \"min\": 18.0\n    },\n    \"period\": 0,\n    \"propertyId\": \"{{test_temp_propId}}\",\n    \"status\": \"NORMAL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_temp_propId}}/analytics",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_temp_propId}}",
												"analytics"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование порогов влажности",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"analyticType\": \"COMPARISON\",\n    \"deviation\": 0,\n    \"enabled\": true,\n    \"interval\": {\n        \"max\": 60.0,\n        \"min\": 30.0\n    },\n    \"period\": 0,\n    \"propertyId\": \"{{test_humidity_propId}}\",\n    \"status\": \"NORMAL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_humidity_propId}}/analytics",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_humidity_propId}}",
												"analytics"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование порогов VOC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"analyticType\": \"COMPARISON\",\n    \"deviation\": 0,\n    \"enabled\": true,\n    \"interval\": {\n        \"max\": 1000.0,\n        \"min\": 0.0\n    },\n    \"period\": 0,\n    \"propertyId\": \"{{test_voc_propId}}\",\n    \"status\": \"NORMAL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_voc_propId}}/analytics",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_voc_propId}}",
												"analytics"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование порогов CO2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"analyticType\": \"COMPARISON\",\n    \"deviation\": 0,\n    \"enabled\": true,\n    \"interval\": {\n        \"max\": 1000.0,\n        \"min\": 0.0\n    },\n    \"period\": 0,\n    \"propertyId\": \"{{testco2_propId}}\",\n    \"status\": \"NORMAL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_co2_propId}}/analytics",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_co2_propId}}",
												"analytics"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов температуры\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"TEMPERATURE\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(18);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(28);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"    pm.environment.set('test_temp_propId', comparison.propertyId);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов влажности\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"HUMIDITY\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(30);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(60);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"    pm.environment.set('test_humidity_propId', comparison.propertyId);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов VOC\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"VOC\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(0);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(1000);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"    pm.environment.set('test_voc_propId', comparison.propertyId);",
													"});",
													"",
													"pm.test(\"Корректное значение порогов CO2\", function () {",
													"    let comparison = pm.response.json().items[0].innerItems.find(x => x.entity.kind == \"CO2\").entity.analytics.COMPARISON;",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"LT\").limit).to.be.eq(0);",
													"    pm.expect(comparison.limits.find(x => x.comparison == \"GT\").limit).to.be.eq(1000);",
													"    pm.expect(comparison.enabled).to.be.true;",
													"    pm.environment.set('test_co2_propId', comparison.propertyId);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().items.length).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/comfort",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"comfort"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение графика температуры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть как минимум один отсчет\", () => {",
													"    pm.expect(Object.keys(pm.response.json()).length).to.be.gte(1);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_temp_propId}}/history?from=0&to={{$timestamp}}&detail=2&mode=last",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_temp_propId}}",
												"history"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "to",
													"value": "{{$timestamp}}"
												},
												{
													"key": "detail",
													"value": "2"
												},
												{
													"key": "mode",
													"value": "last"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение графика влажности",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть как минимум один отсчет\", () => {",
													"    pm.expect(Object.keys(pm.response.json()).length).to.be.gte(1);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_humidity_propId}}/history?from=0&to={{$timestamp}}&detail=2&mode=last",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_humidity_propId}}",
												"history"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "to",
													"value": "{{$timestamp}}"
												},
												{
													"key": "detail",
													"value": "2"
												},
												{
													"key": "mode",
													"value": "last"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение графика VOC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть как минимум один отсчет\", () => {",
													"    pm.expect(Object.keys(pm.response.json()).length).to.be.gte(1);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_voc_propId}}/history?from=0&to={{$timestamp}}&detail=2&mode=last",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_voc_propId}}",
												"history"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "to",
													"value": "{{$timestamp}}"
												},
												{
													"key": "detail",
													"value": "2"
												},
												{
													"key": "mode",
													"value": "last"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение графика CO2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть как минимум один отсчет\", () => {",
													"    pm.expect(Object.keys(pm.response.json()).length).to.be.gte(1);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{zwave_ctl_id}}/devices/7/props/{{test_co2_propId}}/history?from=0&to={{$timestamp}}&detail=2&mode=last",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{zwave_ctl_id}}",
												"devices",
												"7",
												"props",
												"{{test_co2_propId}}",
												"history"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "to",
													"value": "{{$timestamp}}"
												},
												{
													"key": "detail",
													"value": "2"
												},
												{
													"key": "mode",
													"value": "last"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Удаление устройств",
							"item": [
								{
									"name": "Удаление датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"o7\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/6",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика температуры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"o7\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/7",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"7"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание удаления устройства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_REMOVE&C_nodeId=^7&timeout=15000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_REMOVE"
												},
												{
													"key": "C_nodeId",
													"value": "^7"
												},
												{
													"key": "timeout",
													"value": "15000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание удаления устройства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_REMOVE&C_nodeId=^6&timeout=15000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_REMOVE"
												},
												{
													"key": "C_nodeId",
													"value": "^6"
												},
												{
													"key": "timeout",
													"value": "15000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение доступных устройств в секции Комфорт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Нет доступных устройств\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{comfort_sectionId}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{comfort_sectionId}}",
												"suitable"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Отключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Освещение",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Авторизация пользователя (OAuth2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
													"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"pm.test(\"Body contains refresh token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"}catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "{{sl10_username}}"
												},
												{
													"key": "password",
													"value": "{{sl10_password}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{access_token}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка секций",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть секция Освещение\",() => {",
													"  pm.expect(pm.response.json().any(x => x.sectionType == \"LIGHT\")).to.be.true;",
													"});",
													"",
													"pm.test(\"Есть секция Комфорт\",() => {",
													"  pm.expect(pm.response.json().any(x => x.sectionType == \"COMFORT\")).to.be.true;",
													"});",
													"",
													"pm.test(\"Есть секция Безопасность\",() => {",
													"  pm.expect(pm.response.json().any(x => x.sectionType == \"GUARD\")).to.be.true;",
													"});",
													"",
													"pm.test(\"Есть секция Камеры\",() => {",
													"  pm.expect(pm.response.json().any(x => x.sectionType == \"CAMERAS\")).to.be.true;",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"light_sectionId\", pm.response.json().find(x => x.sectionType == \"LIGHT\").id);",
													"    pm.environment.set(\"comfort_sectionId\", pm.response.json().find(x => x.sectionType == \"COMFORT\").id);",
													"    pm.environment.set(\"guard_sectionId\", pm.response.json().find(x => x.sectionType == \"GUARD\").id);",
													"    pm.environment.set(\"cameras_sectionId\", pm.response.json().find(x => x.sectionType == \"CAMERAS\").id);",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections?includeItems=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть только один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.eq(1);",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"light_locationId\", pm.response.json()[0].id);",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия устройств в секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Доступных устройств нет\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о доме",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"try{",
													"    pm.environment.set(\"mqtt_ctl_id\", pm.response.json().controllers.find(x => x.typeController == \"VirtualMQTT\").id);",
													"}catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/0",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"try{",
													"    pm.environment.set(\"mqtt_broker_url\", pm.response.json().brokerURL);",
													"    pm.environment.set(\"mqtt_broker_login\", pm.response.json().generatedBrokerLogin);",
													"    pm.environment.set(\"mqtt_broker_password\", pm.response.json().generatedBrokerPassword);",
													"    pm.environment.set(\"mqtt_broker_nodeId\", pm.response.json().generatedNodeId);",
													"}catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{mqtt_ctl_id}}/devices/generateMqttBrokerInfo",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{mqtt_ctl_id}}",
												"devices",
												"generateMqttBrokerInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение MQTT устройства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"",
													"let brokerUrl = pm.environment.get(\"mqtt_broker_url\");",
													"if(!brokerUrl.includes(\":\"))",
													"    pm.environment.set(\"mqtt_broker_url\", brokerUrl+\":8883\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/add_node/{{mqtt_broker_nodeId}}?brokerLogin={{mqtt_broker_login}}&brokerPassword={{mqtt_broker_password}}&brokerURL={{mqtt_broker_url}}",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"add_node",
												"{{mqtt_broker_nodeId}}"
											],
											"query": [
												{
													"key": "brokerLogin",
													"value": "{{mqtt_broker_login}}"
												},
												{
													"key": "brokerPassword",
													"value": "{{mqtt_broker_password}}"
												},
												{
													"key": "brokerURL",
													"value": "{{mqtt_broker_url}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание подключения MQTT устройства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_deviceInfo.nodeId={{mqtt_broker_nodeId}}&C_type=DEVICE_ADD&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.nodeId",
													"value": "{{mqtt_broker_nodeId}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_ADD"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение доступных устройств в секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть хотя бы одно доступное устройство\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"suitable"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Управление с платформы",
							"item": [
								{
									"name": "Включение всего освещения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"position\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание включения освещения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_sectionId=1&C_newPosition=true&C_type=GENERAL_SWITCH_CHANGE&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_sectionId",
													"value": "1"
												},
												{
													"key": "C_newPosition",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GENERAL_SWITCH_CHANGE"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка первого канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал включен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/0/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"0",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка второго канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал включен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/1/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"1",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение статуса секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Освещение включено\", function () {",
													"    pm.expect(pm.response.json().position).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Освещение включено\", function () {",
													"    pm.expect(pm.response.json().any(x => x.generalSwitch.position)).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка событий в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let lightOn = true;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let latestEvent = pm.response.json().data[0];",
													"",
													"pm.test(\"Информация о событии верна\", function () {",
													"    pm.expect(latestEvent.color).to.eq('SUCCESS');",
													"    pm.expect(latestEvent.level).to.eq('LIGHT');",
													"    pm.expect(latestEvent.message).to.include(lightOn ? 'Включен' : 'Выключен');",
													"    pm.expect(latestEvent.type).to.eq('light');",
													"});",
													"",
													"pm.test(\"Информация о секции верна\", function () {",
													"    pm.expect(latestEvent.section_type).to.eq('LIGHT');",
													"    pm.expect(latestEvent.section_id).to.eq(pm.variables.get('light_sectionId'));",
													"});",
													"",
													"pm.test(\"Информация об устройстве верна\", function () {",
													"    pm.expect(latestEvent.origin_type).to.eq('DEVICE');",
													"    pm.expect(latestEvent.origin_id).to.eq(pm.variables.get('mqtt_broker_nodeId'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId=0&limit=50&offset=0&fromMillis=0&sectionId={{light_sectionId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "0"
												},
												{
													"key": "sectionId",
													"value": "{{light_sectionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение всего освещения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"position\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание выключения освещения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_sectionId=1&C_newPosition=false&C_type=GENERAL_SWITCH_CHANGE&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_sectionId",
													"value": "1"
												},
												{
													"key": "C_newPosition",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GENERAL_SWITCH_CHANGE"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка первого канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал выключен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/0/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"0",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка второго канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал выключен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/1/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"1",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение статуса секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Освещение выключено\", function () {",
													"    pm.expect(pm.response.json().position).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Освещение выключено\", function () {",
													"    pm.expect(pm.response.json().any(x => x.generalSwitch.position)).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка событий в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let lightOn = false;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let latestEvent = pm.response.json().data[0];",
													"",
													"pm.test(\"Информация о событии верна\", function () {",
													"    pm.expect(latestEvent.color).to.eq('SUCCESS');",
													"    pm.expect(latestEvent.level).to.eq('LIGHT');",
													"    pm.expect(latestEvent.message).to.include(lightOn ? 'Включен' : 'Выключен');",
													"    pm.expect(latestEvent.type).to.eq('light');",
													"});",
													"",
													"pm.test(\"Информация о секции верна\", function () {",
													"    pm.expect(latestEvent.section_type).to.eq('LIGHT');",
													"    pm.expect(latestEvent.section_id).to.eq(pm.variables.get('light_sectionId'));",
													"});",
													"",
													"pm.test(\"Информация об устройстве верна\", function () {",
													"    pm.expect(latestEvent.origin_type).to.eq('DEVICE');",
													"    pm.expect(latestEvent.origin_id).to.eq(pm.variables.get('mqtt_broker_nodeId'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId=0&limit=50&offset=0&fromMillis=0&sectionId={{light_sectionId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "0"
												},
												{
													"key": "sectionId",
													"value": "{{light_sectionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение группы освещения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"position\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items/{{light_locationId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items",
												"{{light_locationId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание включения освещения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_sectionId=1&C_newPosition=true&C_type=GENERAL_SWITCH_CHANGE&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_sectionId",
													"value": "1"
												},
												{
													"key": "C_newPosition",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GENERAL_SWITCH_CHANGE"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка первого канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал включен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/0/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"0",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка второго канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал включен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/1/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"1",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Освещение включено\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == pm.environment.get(\"light_locationId\")).generalSwitch.position).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка событий в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let lightOn = true;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let latestEvent = pm.response.json().data[0];",
													"",
													"pm.test(\"Информация о событии верна\", function () {",
													"    pm.expect(latestEvent.color).to.eq('SUCCESS');",
													"    pm.expect(latestEvent.level).to.eq('LIGHT');",
													"    pm.expect(latestEvent.message).to.include(lightOn ? 'Включен' : 'Выключен');",
													"    pm.expect(latestEvent.type).to.eq('light');",
													"});",
													"",
													"pm.test(\"Информация о секции верна\", function () {",
													"    pm.expect(latestEvent.section_type).to.eq('LIGHT');",
													"    pm.expect(latestEvent.section_id).to.eq(pm.variables.get('light_sectionId'));",
													"});",
													"",
													"pm.test(\"Информация об устройстве верна\", function () {",
													"    pm.expect(latestEvent.origin_type).to.eq('DEVICE');",
													"    pm.expect(latestEvent.origin_id).to.eq(pm.variables.get('mqtt_broker_nodeId'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId=0&limit=50&offset=0&fromMillis=0&sectionId={{light_sectionId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "0"
												},
												{
													"key": "sectionId",
													"value": "{{light_sectionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение группы освещения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"position\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items/{{light_locationId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items",
												"{{light_locationId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание выключения освещения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_sectionId=1&C_newPosition=false&C_type=GENERAL_SWITCH_CHANGE&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_sectionId",
													"value": "1"
												},
												{
													"key": "C_newPosition",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GENERAL_SWITCH_CHANGE"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка первого канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал выключен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/0/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"0",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка второго канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал выключен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/1/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"1",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Освещение включено\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == pm.environment.get(\"light_locationId\")).generalSwitch.position).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка событий в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let lightOn = false;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let latestEvent = pm.response.json().data[0];",
													"",
													"pm.test(\"Информация о событии верна\", function () {",
													"    pm.expect(latestEvent.color).to.eq('SUCCESS');",
													"    pm.expect(latestEvent.level).to.eq('LIGHT');",
													"    pm.expect(latestEvent.message).to.include(lightOn ? 'Включен' : 'Выключен');",
													"    pm.expect(latestEvent.type).to.eq('light');",
													"});",
													"",
													"pm.test(\"Информация о секции верна\", function () {",
													"    pm.expect(latestEvent.section_type).to.eq('LIGHT');",
													"    pm.expect(latestEvent.section_id).to.eq(pm.variables.get('light_sectionId'));",
													"});",
													"",
													"pm.test(\"Информация об устройстве верна\", function () {",
													"    pm.expect(latestEvent.origin_type).to.eq('DEVICE');",
													"    pm.expect(latestEvent.origin_id).to.eq(pm.variables.get('mqtt_broker_nodeId'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId=0&limit=50&offset=0&fromMillis=0&sectionId={{light_sectionId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "0"
												},
												{
													"key": "sectionId",
													"value": "{{light_sectionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Управление с реле",
							"item": [
								{
									"name": "Включение канала 1 на реле",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function () { }, 500);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/0/position/1",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"0",
												"position",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание включения освещения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_sectionId=1&C_newPosition=true&C_type=GENERAL_SWITCH_CHANGE&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_sectionId",
													"value": "1"
												},
												{
													"key": "C_newPosition",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GENERAL_SWITCH_CHANGE"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка первого канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал включен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/0/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"0",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение статуса секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Освещение включено\", function () {",
													"    pm.expect(pm.response.json().position).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Освещение включено\", function () {",
													"    pm.expect(pm.response.json().any(x => x.generalSwitch.position)).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение канала 1 на реле",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function () { }, 500);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/0/position/0",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"0",
												"position",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание выключения освещения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_sectionId=1&C_newPosition=false&C_type=GENERAL_SWITCH_CHANGE&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_sectionId",
													"value": "1"
												},
												{
													"key": "C_newPosition",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GENERAL_SWITCH_CHANGE"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка первого канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал выключен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/0/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"0",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение статуса секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Освещение выключено\", function () {",
													"    pm.expect(pm.response.json().position).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Освещение выключено\", function () {",
													"    pm.expect(pm.response.json().any(x => x.generalSwitch.position)).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение канала 2 на реле",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function () { }, 500);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/1/position/1",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"1",
												"position",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание включения освещения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_sectionId=1&C_newPosition=true&C_type=GENERAL_SWITCH_CHANGE&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_sectionId",
													"value": "1"
												},
												{
													"key": "C_newPosition",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GENERAL_SWITCH_CHANGE"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка второго канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал включен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/1/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"1",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение статуса секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Освещение включено\", function () {",
													"    pm.expect(pm.response.json().position).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Освещение включено\", function () {",
													"    pm.expect(pm.response.json().any(x => x.generalSwitch.position)).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение канала 2 на реле",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function () { }, 500);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"current_time\", Math.floor(Date.now()/1000)*1000);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/1/position/0",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"1",
												"position",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание выключения освещения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_sectionId=1&C_newPosition=false&C_type=GENERAL_SWITCH_CHANGE&timeout=10000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_sectionId",
													"value": "1"
												},
												{
													"key": "C_newPosition",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GENERAL_SWITCH_CHANGE"
												},
												{
													"key": "timeout",
													"value": "10000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка второго канала MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Канал выключен\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq(\"0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/channel/1/state",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"channel",
												"1",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение статуса секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Освещение выключено\", function () {",
													"    pm.expect(pm.response.json().position).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть хотя бы один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Освещение выключено\", function () {",
													"    pm.expect(pm.response.json().any(x => x.generalSwitch.position)).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Включение в секцию",
							"item": [
								{
									"name": "Проверка наличия включенных в секцию Освещение устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть доступные устройства\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.gt(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Исключение всех устройств из группы \"Без группы\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"0\",\n        \"innerItemsId\": []\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия включенных в секцию Освещение устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Доступных устройств нет\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка доступных устрйоств в секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let lightDevices = pm.response.json().find(x => x.id == \"0\").innerItems.reduce((a,b,i) => a+(i != 0 ? \",\\\"\" : \"\\\"\")+b.id+\"\\\"\", \"\");",
													"pm.environment.set(\"light_devices\", lightDevices);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение всех устройств в группе \"Без группы\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"0\",\n        \"innerItemsId\": [{{light_devices}}]\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка наличия включенных в секцию Освещение устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть доступные устройства\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.gt(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Группы",
							"item": [
								{
									"name": "Выключение группы освещения \"Без группы\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"position\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items/{{light_locationId}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items",
												"{{light_locationId}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание новой группы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"test_group_id\", pm.response.text());",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_group_name', 'Group '+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"houseId\": \"0\",\n\t\"isExpanded\": true,\n\t\"title\": \"{{test_group_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/0/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть два элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Устройство в группе \\\"Без группы\\\"\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == 0).innerItems.length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Освещение в группе \\\"Без группы\\\" выключено\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == 0).generalSwitch.position).to.be.false;",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"light_locationId\", pm.response.json()[0].id);",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перемещение устройств в новую группу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cameraIds\": [],\n    \"deviceIds\": [\n        \"{{mqtt_broker_nodeId}}\"\n    ],\n    \"locationId\": \"{{test_group_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть два элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Устройство в новой группе\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == parseInt(pm.environment.get(\"test_group_id\"))).innerItems.length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Освещение в новой группе выключено\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == parseInt(pm.environment.get(\"test_group_id\"))).generalSwitch.position).to.be.false;",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"light_locationId\", pm.response.json()[0].id);",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение новой группы освещения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"position\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items/{{test_group_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items",
												"{{test_group_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции есть два элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Устройство в новой группе\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == parseInt(pm.environment.get(\"test_group_id\"))).innerItems.length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Освещение в новой группе включено\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == parseInt(pm.environment.get(\"test_group_id\"))).generalSwitch.position).to.be.true;",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"light_locationId\", pm.response.json()[0].id);",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление группы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/0/groups/{{test_group_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0",
												"groups",
												"{{test_group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В секции только один элемент\", function () {",
													"    pm.expect(pm.response.json().length).to.be.eq(1);",
													"});",
													"",
													"pm.test(\"Устройство в группе \\\"Без группы\\\"\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == 0).innerItems.length).to.be.eq(2);",
													"});",
													"",
													"pm.test(\"Освещение в группе \\\"Без группы\\\" включено\", function () {",
													"    pm.expect(pm.response.json().find(x => x.id == 0).generalSwitch.position).to.be.true;",
													"});",
													"",
													"try {",
													"    pm.environment.set(\"light_locationId\", pm.response.json()[0].id);",
													"} catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"items"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Удаление устройств",
							"item": [
								{
									"name": "Удаление MQTT устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 500);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{mqtt_ctl_id}}/devices/{{mqtt_broker_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{mqtt_ctl_id}}",
												"devices",
												"{{mqtt_broker_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия устройств в секции Освещение",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Доступных устройств нет\", function () {",
													"    pm.expect(pm.response.json().reduce((acc, x) => acc += x.innerItems.length, 0)).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/0/sections/{{light_sectionId}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"0",
												"sections",
												"{{light_sectionId}}",
												"suitable"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Отключение MQTT устройства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/node/{{mqtt_broker_nodeId}}/disconnect",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"node",
												"{{mqtt_broker_nodeId}}",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Проверка управления домом",
			"item": [
				{
					"name": "Информация о доме",
					"item": [
						{
							"name": "Авторизация пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка домов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"В спсике только 1 дом\", function () {",
											"    pm.expect(pm.response.json().length).to.be.equal(1);",
											"});",
											"",
											"pm.test(\"ID дома равен 0\", function () {",
											"    pm.expect(pm.response.json()[0].id).to.be.equal(\"0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех домов пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"В спсике только 1 дом\", function () {",
											"    pm.expect(pm.response.json().length).to.be.equal(1);",
											"});",
											"",
											"pm.test(\"ID дома равен 0\", function () {",
											"    pm.expect(pm.response.json()[0].id).to.be.equal(\"0\");",
											"});",
											"",
											"pm.test(\"Дом не на охране\", function () {",
											"    pm.expect(pm.response.json()[0].underGuard).to.be.false;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houseInfo",
									"host": [
										"{{host}}"
									],
									"path": [
										"houseInfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Попытка удаления дома",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 304\", function () {",
											"    pm.response.to.have.status(304);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о доме",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"ID дома равен 0\", function () {",
											"    pm.expect(pm.response.json().id).to.be.equal(\"0\");",
											"});",
											"",
											"pm.test(\"Контроллеров 2 или больше\", function () {",
											"    pm.expect(pm.response.json().controllers.length).to.be.gte(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение информации о доме",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(length=1) {",
											"    let randomString = \"\";",
											"    for (let i = 0; i < length; i++){",
											"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
											"    }",
											"    return randomString;",
											"}",
											"",
											"pm.environment.set('test_house_address', 'Address '+randomString(6));",
											"pm.environment.set('test_house_apartment', 'Apart. '+randomString(6));",
											"pm.environment.set('test_house_title', 'House '+randomString(6));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"{{test_house_address}}\",\n    \"apartment\": \"{{test_house_apartment}}\",\n    \"title\": \"{{test_house_title}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/0",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка изменения информации о доме",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Данные изменились\", function () {",
											"    pm.expect(pm.response.json().address).to.be.equal(pm.environment.get(\"test_house_address\"));",
											"    pm.expect(pm.response.json().apartment).to.be.equal(pm.environment.get(\"test_house_apartment\"));",
											"    pm.expect(pm.response.json().title).to.be.equal(pm.environment.get(\"test_house_title\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Переменные дома (houseMode)",
					"item": [
						{
							"name": "Авторизация пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение переменных дома",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Переменных 1 или больше\", function () {",
											"    pm.expect(pm.response.json().length).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Все переменные системные\", function () {",
											"    pm.expect(pm.response.json().every(x => x.system)).to.be.true;",
											"});",
											"",
											"pm.test(\"Все переменные не скрыты\", function () {",
											"    pm.expect(pm.response.json().every(x => !x.hidden)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/vars",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"vars"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение переменной houseMode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"atHome\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/0/vars/houseMode",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"vars",
										"houseMode"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка переменной houseMode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Значение переменной изменилось\", function () {",
											"    pm.expect(pm.response.json().value).to.be.equal(\"atHome\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/vars/houseMode",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"vars",
										"houseMode"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение переменной houseMode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"notAtHome\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/0/vars/houseMode",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"vars",
										"houseMode"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка переменной houseMode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Значение переменной изменилось\", function () {",
											"    pm.expect(pm.response.json().value).to.be.equal(\"notAtHome\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/vars/houseMode",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"vars",
										"houseMode"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Группы устройств",
					"item": [
						{
							"name": "Авторизация пользователя (OAuth2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"pm.test(\"Body contains refresh token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"}catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{sl10_username}}"
										},
										{
											"key": "password",
											"value": "{{sl10_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Подключение к WebSocket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"connect"
									],
									"query": [
										{
											"key": "host",
											"value": "{{host}}/event_ws"
										},
										{
											"key": "token",
											"value": "{{access_token}}"
										},
										{
											"key": "subprotocol",
											"value": "SmartHome"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Параметры контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Настройки применены\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"connected\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mac\": \"ff:ff:ff:ff:ff:ff\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/info",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика протечки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 6\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика температуры",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_air_htq01\",\n    \"nodeId\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение типа платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"let isSL10 = pm.response.json().version.includes(\"-b\");",
											"",
											"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
											"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
											"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/version",
									"host": [
										"{{host}}"
									],
									"path": [
										"version"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о платформе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var sdk = require('postman-collection');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
											"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/info",
									"host": [
										"{{host}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Подключение контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"",
											"pm.environment.set(\"ctl_connected_timeout\", pm.response.json().status == \"Controller is already connected\" ? 0 : (pm.response.json().status ? 180000 : 5000));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/connect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"connect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание статуса контроллера \"Доступен\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 3000);",
											"",
											"if(pm.environment.get(\"ctl_connected_timeout\") > 10000)",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout={{ctl_connected_timeout}}",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_type",
											"value": "CONTROLLER_STATUS"
										},
										{
											"key": "C_status",
											"value": "^CONNECTED"
										},
										{
											"key": "timeout",
											"value": "{{ctl_connected_timeout}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка групп в доме",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    pm.environment.set(\"test_groups_count\", pm.response.json().length);",
											"} catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание новой группы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    pm.environment.set(\"test_group_id\", pm.response.text());",
											"} catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(length=1) {",
											"    let randomString = \"\";",
											"    for (let i = 0; i < length; i++){",
											"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
											"    }",
											"    return randomString;",
											"}",
											"",
											"pm.environment.set('test_group_name', 'Group '+randomString(6));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"houseId\": \"0\",\n\t\"isExpanded\": true,\n\t\"title\": \"{{test_group_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/0/groups",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка групп в доме",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Стало на одну группу больше\", function () {",
											"    pm.expect(pm.response.json()).to.have.lengthOf(pm.environment.get(\"test_groups_count\") + 1);",
											"});",
											"",
											"pm.test(\"Новая группа есть в списке\", function () {",
											"    pm.expect(pm.response.json().any(x => x.id == pm.environment.get(\"test_group_id\"))).to.be.true;",
											"});",
											"",
											"pm.test(\"В группе нет устройств\", function () {",
											"    let group = pm.response.json().find(x => x.id == pm.environment.get(\"test_group_id\"));",
											"",
											"    pm.expect(group.cameraList).to.have.lengthOf(0);",
											"    pm.expect(group.childList).to.have.lengthOf(0);",
											"    pm.expect(group.deviceList).to.have.lengthOf(0);",
											"});",
											"",
											"pm.test(\"Название группы правильное\", function () {",
											"    let group = pm.response.json().find(x => x.id == pm.environment.get(\"test_group_id\"));",
											"",
											"    pm.expect(group.title == pm.environment.get(\"test_group_name\")).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о группе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"В группе нет устройств\", function () {",
											"    pm.expect(pm.response.json().cameraList).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().childList).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().deviceList).to.have.lengthOf(0);",
											"});",
											"",
											"pm.test(\"Название группы правильное\", function () {",
											"    pm.expect(pm.response.json().title == pm.environment.get(\"test_group_name\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups/{{test_group_id}}?flat=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups",
										"{{test_group_id}}"
									],
									"query": [
										{
											"key": "flat",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение информации о группе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(length=1) {",
											"    let randomString = \"\";",
											"    for (let i = 0; i < length; i++){",
											"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
											"    }",
											"    return randomString;",
											"}",
											"",
											"pm.environment.set('test_group_name', 'Group '+randomString(6));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"{{test_group_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/0/groups/{{test_group_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups",
										"{{test_group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о группе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"В группе нет устройств\", function () {",
											"    pm.expect(pm.response.json().cameraList).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().childList).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().deviceList).to.have.lengthOf(0);",
											"});",
											"",
											"pm.test(\"Название группы правильное\", function () {",
											"    pm.expect(pm.response.json().title == pm.environment.get(\"test_group_name\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups/{{test_group_id}}?flat=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups",
										"{{test_group_id}}"
									],
									"query": [
										{
											"key": "flat",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка устройств",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    pm.environment.set(\"test_group_deviceId_1\", pm.response.json()[0].id);",
											"    pm.environment.set(\"test_group_deviceId_2\", pm.response.json()[1].id);",
											"} catch {",
											"    pm.test(\"Тест должен пройти без ошибок\", function () {",
											"        pm.expect(false).to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/devices",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Перемещение устройств в новую группу",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cameraIds\": [],\n    \"deviceIds\": [\n        \"{{test_group_deviceId_1}}\",\n        \"{{test_group_deviceId_2}}\"\n    ],\n    \"locationId\": \"{{test_group_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/devices/changeLocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"devices",
										"changeLocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о группе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"В группе есть два датчика, но нет камер\", function () {",
											"    pm.expect(pm.response.json().cameraList).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().childList).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().deviceList).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"Название группы правильное\", function () {",
											"    pm.expect(pm.response.json().title == pm.environment.get(\"test_group_name\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups/{{test_group_id}}?flat=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups",
										"{{test_group_id}}"
									],
									"query": [
										{
											"key": "flat",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Перемещение устройства из группы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cameraIds\": [],\n    \"deviceIds\": [\n        \"{{test_group_deviceId_1}}\"\n    ],\n    \"locationId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/devices/changeLocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"devices",
										"changeLocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о группе",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"В группе есть один датчик, но нет камер\", function () {",
											"    pm.expect(pm.response.json().cameraList).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().childList).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().deviceList).to.have.lengthOf(1);",
											"});",
											"",
											"pm.test(\"Название группы правильное\", function () {",
											"    pm.expect(pm.response.json().title == pm.environment.get(\"test_group_name\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups/{{test_group_id}}?flat=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups",
										"{{test_group_id}}"
									],
									"query": [
										{
											"key": "flat",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление группы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups/{{test_group_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups",
										"{{test_group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка групп в доме",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Стало на одну группу меньше\", function () {",
											"    pm.expect(pm.response.json()).to.have.lengthOf(pm.environment.get(\"test_groups_count\"));",
											"});",
											"",
											"pm.test(\"Новая группы нет в списке\", function () {",
											"    pm.expect(pm.response.json().any(x => x.id == pm.environment.get(\"test_group_id\"))).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление несуществующей группы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/groups/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"groups",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление датчика протечки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zway_ctl_host}}/devices/6",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление датчика температуры",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 500);",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zway_ctl_host}}/devices/7",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание удаления устройства",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 500);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_REMOVE&C_nodeId=^7&timeout=15000",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_type",
											"value": "DEVICE_REMOVE"
										},
										{
											"key": "C_nodeId",
											"value": "^7"
										},
										{
											"key": "timeout",
											"value": "15000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание удаления устройства",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 500);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_REMOVE&C_nodeId=^6&timeout=15000",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_type",
											"value": "DEVICE_REMOVE"
										},
										{
											"key": "C_nodeId",
											"value": "^6"
										},
										{
											"key": "timeout",
											"value": "15000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/disconnect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"disconnect"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Проверка управления устройствами",
			"item": [
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подключение к WebSocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"connect"
							],
							"query": [
								{
									"key": "host",
									"value": "{{host}}/event_ws"
								},
								{
									"key": "token",
									"value": "{{access_token}}"
								},
								{
									"key": "subprotocol",
									"value": "SmartHome"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Параметры контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Настройки применены\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if(pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"connected\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mac\": \"ff:ff:ff:ff:ff:ff\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/info",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание датчика открытия двери",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if(pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"template\": \"sz_mct\",\n    \"nodeId\": 6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/add",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение типа платформы",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"let isSL10 = pm.response.json().version.includes(\"-b\");",
									"",
									"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
									"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
									"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о платформе",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var sdk = require('postman-collection');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
									"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/info",
							"host": [
								"{{host}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подключение контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.environment.set(\"ctl_connected_timeout\", pm.response.json().status == \"Controller is already connected\" ? 0 : (pm.response.json().status ? 180000 : 5000));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/connect",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"connect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание статуса контроллера \"Доступен\" Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=60000",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "CONTROLLER_STATUS"
								},
								{
									"key": "C_status",
									"value": "^CONNECTED"
								},
								{
									"key": "timeout",
									"value": "60000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка устройств",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"try {",
									"    let doorId = pm.response.json().find(x => x.channels[\"0\"]?.deviceProperties?.any(y => y.kind == \"OPEN_CLOSE\")).id;",
									"",
									"    pm.test(\"Дверь добавлена\", function () {",
									"        pm.expect(doorId).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.environment.set(\"test_door_deviceId\", doorId);",
									"    pm.environment.set(\"test_door_guardPropId\", pm.response.json().find(x => x.id == doorId).channels[\"0\"].deviceProperties.find(x => x.kind == \"GUARD_MODE\").id);",
									"    pm.environment.set(\"test_ctl_id\", pm.response.json().find(x => x.id == doorId).controllerId);",
									"} catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/devices",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сработка датчика (Вскрытие)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"on\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6/prop/0/tamper",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6",
								"prop",
								"0",
								"tamper"
							]
						}
					},
					"response": []
				},
				{
					"name": "Нормализация датчика (Вскрытие)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"off\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6/prop/0/tamper",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6",
								"prop",
								"0",
								"tamper"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка статуса тампера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Тампер был вскрыт\", function () {",
									"    pm.expect(pm.response.json().find(x => x.id == pm.environment.get(\"test_door_deviceId\")).channels[\"0\"].deviceProperties.find(y => y.kind == \"TAMPER\").analytics.TAMPER.status).to.be.equal(\"ALARM\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/devices",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сброс вскрытия корпуса",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/{{test_door_deviceId}}/reset",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"{{test_door_deviceId}}",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка статуса тампера после сброса",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Тампер был вскрыт\", function () {",
									"    pm.expect(pm.response.json().find(x => x.id == pm.environment.get(\"test_door_deviceId\")).channels[\"0\"].deviceProperties.find(y => y.kind == \"TAMPER\").analytics.TAMPER.status).to.be.equal(\"NORMAL\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/devices",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового устройства",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deviceType\": \"Z_WAY_DEVICE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/add",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание начала добавления устройства",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_ASSOCIATION&timeout=15000",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "DEVICE_ASSOCIATION"
								},
								{
									"key": "timeout",
									"value": "15000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание датчика температуры",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if(pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"template\": \"sz_air_htq01\",\n    \"nodeId\": 7\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/add",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание добавления устройства",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_ADD&C_deviceInfo.nodeId=^7&timeout=15000",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "DEVICE_ADD"
								},
								{
									"key": "C_deviceInfo.nodeId",
									"value": "^7"
								},
								{
									"key": "timeout",
									"value": "15000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка добавления датчика температуры",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Датчик температуры присутствует\", function () {",
									"    pm.expect(pm.response.json().find(x => x.channels[\"1\"]?.deviceProperties.any(y => y.kind == \"TEMPERATURE\"))).to.be.a(\"object\");",
									"});",
									"",
									"try {",
									"    let tempId = pm.response.json().find(x => x.channels[\"1\"]?.deviceProperties.any(y => y.kind == \"TEMPERATURE\")).id;",
									"    pm.environment.set(\"test_temp_tempPropId\", pm.response.json().find(x => x.id == tempId).channels[\"1\"]?.deviceProperties.find(y => y.kind == \"TEMPERATURE\").id);",
									"} catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/devices",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика температуры (на платформе)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/7/remove",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"7",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена удаления датчика температуры",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/7/cancel",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"7",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика температуры (на платформе)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/7/remove",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"7",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика температуры (на контроллере)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/7",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание удаления устройства",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_REMOVE&C_nodeId=^7&timeout=15000",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "DEVICE_REMOVE"
								},
								{
									"key": "C_nodeId",
									"value": "^7"
								},
								{
									"key": "timeout",
									"value": "15000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового устройства",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deviceType\": \"Z_WAY_DEVICE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/add",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание начала добавления устройства Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_ASSOCIATION&timeout=15000",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "DEVICE_ASSOCIATION"
								},
								{
									"key": "timeout",
									"value": "15000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена добавления нового устройства",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/7/cancel",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"7",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Выключение охранного режима",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"current_time\", Date.now());",
									"setTimeout(function(){}, 250);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"false\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/6/props/{{test_door_guardPropId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"6",
								"props",
								"{{test_door_guardPropId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание выключения охранного режима на устройстве",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout=15000&C_devicePropertyData.propertyKind=GUARD_MODE&C_devicePropertyData.newValue.value=false",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "PROP_CHANGE"
								},
								{
									"key": "timeout",
									"value": "15000"
								},
								{
									"key": "C_devicePropertyData.propertyKind",
									"value": "GUARD_MODE"
								},
								{
									"key": "C_devicePropertyData.newValue.value",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Включение охранного режима",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"current_time\", Date.now());",
									"setTimeout(function(){}, 250);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/6/props/{{test_door_guardPropId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"6",
								"props",
								"{{test_door_guardPropId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание включения охранного режима на устройстве",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout=15000&C_devicePropertyData.propertyKind=GUARD_MODE&C_devicePropertyData.newValue.value=true",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "PROP_CHANGE"
								},
								{
									"key": "timeout",
									"value": "15000"
								},
								{
									"key": "C_devicePropertyData.propertyKind",
									"value": "GUARD_MODE"
								},
								{
									"key": "C_devicePropertyData.newValue.value",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение питания устройства",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 500);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"current_time\", Date.now());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6/power",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6",
								"power"
							]
						}
					},
					"response": []
				},
				{
					"name": "Принудительное удаление датчика температуры (на платформе)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/6/removedead",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"6",
								"removedead"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание удаления устройства Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 500);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_REMOVE&C_nodeId=^6&timeout=15000",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "DEVICE_REMOVE"
								},
								{
									"key": "C_nodeId",
									"value": "^6"
								},
								{
									"key": "timeout",
									"value": "15000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/disconnect",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"disconnect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика открытия двери (на контроллере)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проверка управления контроллером",
			"item": [
				{
					"name": "Авторизация пользователя (OAuth2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"pm.test(\"Body contains refresh token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"}catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "{{sl10_username}}"
								},
								{
									"key": "password",
									"value": "{{sl10_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подключение к WebSocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"connect"
							],
							"query": [
								{
									"key": "host",
									"value": "{{host}}/event_ws"
								},
								{
									"key": "token",
									"value": "{{access_token}}"
								},
								{
									"key": "subprotocol",
									"value": "SmartHome"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Параметры контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Настройки применены\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if(pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"connected\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mac\": \"ff:ff:ff:ff:ff:ff\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/info",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание датчика протечки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Датчик присутствует\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
									"    if(pm.response.code == 400) {",
									"        pm.expect(pm.response.text()).to.include(\"already exists\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/add",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение типа платформы",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"let isSL10 = pm.response.json().version.includes(\"-b\");",
									"",
									"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
									"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
									"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о платформе",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var sdk = require('postman-collection');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
									"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/info",
							"host": [
								"{{host}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подключение контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.environment.set(\"ctl_connected_timeout\", pm.response.json().status == \"Controller is already connected\" ? 0 : (pm.response.json().status ? 180000 : 5000));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/connect",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"connect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидание статуса контроллера \"Доступен\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=60000",
							"host": [
								"{{websocket_proxy_host}}"
							],
							"path": [
								"await"
							],
							"query": [
								{
									"key": "timeFrom",
									"value": "{{current_time}}"
								},
								{
									"key": "C_type",
									"value": "CONTROLLER_STATUS"
								},
								{
									"key": "C_status",
									"value": "^CONNECTED"
								},
								{
									"key": "timeout",
									"value": "60000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"try {",
									"    pm.environment.set(\"test_ctl_id\", pm.response.json().controllers.find(x => x.typeController == \"Z_WAY\").id);",
									"} catch {",
									"    pm.test(\"Тест должен пройти без ошибок\", function () {",
									"        pm.expect(false).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка наличия контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Контроллер присутствует\", function () {",
									"    pm.expect(pm.response.json().controllers.find(x => x.typeController == \"Z_WAY\")).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Переименование контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New Controller Title\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка нового имени контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Имя контроллера изменилось\", function () {",
									"    pm.expect(pm.response.json().controllers.find(x => x.typeController == \"Z_WAY\").title).to.be.eq(\"New Controller Title\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение контроллера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/disconnect",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"disconnect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление датчика протечки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Видеонаблюдение",
			"item": [
				{
					"name": "Управление камерами",
					"item": [
						{
							"name": "Добавление и удаление камеры",
							"item": [
								{
									"name": "Авторизация пользователя (OAuth2) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
													"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"pm.test(\"Body contains refresh token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"}catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/oauth2/token?grant_type=password&username={{sl10_username}}&password={{sl10_password}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "{{sl10_username}}"
												},
												{
													"key": "password",
													"value": "{{sl10_password}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{access_token}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о доме",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"try{",
													"    pm.environment.set(\"mqtt_ctl_id\", pm.response.json().controllers.find(x => x.typeController == \"VirtualMQTT\").id);",
													"}catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/0",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание первой камеры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"try{",
													"    pm.environment.set(\"mqtt_broker_url\", pm.response.json().brokerURL);",
													"    pm.environment.set(\"mqtt_broker_login\", pm.response.json().generatedBrokerLogin);",
													"    pm.environment.set(\"mqtt_broker_password\", pm.response.json().generatedBrokerPassword);",
													"    pm.environment.set(\"mqtt_broker_nodeId\", pm.response.json().generatedNodeId);",
													"}catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{mqtt_ctl_id}}/devices/generateMqttBrokerInfo",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{mqtt_ctl_id}}",
												"devices",
												"generateMqttBrokerInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение первой камеры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"brokerURL\": \"{{mqtt_broker_url}}\",\n    \"generatedBrokerLogin\": \"{{mqtt_broker_login}}\",\n    \"generatedBrokerPassword\": \"{{mqtt_broker_password}}\",\n    \"generatedNodeId\": \"{{mqtt_broker_nodeId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim_host}}/add",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание подключения первой камеры",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_deviceDto.nodeId={{mqtt_broker_nodeId}}&C_type=DEVICE_CHANGE&C_deviceDto.status=ONLINE&C_deviceDto.deviceType=CAMERA&timeout=30000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceDto.nodeId",
													"value": "{{mqtt_broker_nodeId}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_CHANGE"
												},
												{
													"key": "C_deviceDto.status",
													"value": "ONLINE"
												},
												{
													"key": "C_deviceDto.deviceType",
													"value": "CAMERA"
												},
												{
													"key": "timeout",
													"value": "30000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть активная камеры\", function () {",
													"    pm.expect(pm.response.json().any(x => x.deviceType == \"CAMERA\" && x.status == \"ONLINE\" && x.nodeId == pm.variables.get(\"mqtt_broker_nodeId\"))).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/0/devices?withCameras=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка подключения со стороны симулятора",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть активная камеры\", function () {",
													"    pm.expect(pm.response.json().length).to.be.gte(1);",
													"    pm.expect(pm.response.json()[0]).to.be.eq(pm.variables.get(\"mqtt_broker_nodeId\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cam_sim_host}}/active",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"active"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка значений проперти камеры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let properties = {",
													"    \"/ota/url\": \".*\",",
													"    \"/ota/upgrade\": \"1\",",
													"    \"/stream/0/rtsp/onoff\": \"1\",",
													"    \"/time/tz\": \"Asia/Krasnoyarsk\",",
													"    \"/osd/0/onoff\": \"1\"",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"for (let prop of pm.response.json()?.property_list?.props) {",
													"    if (!properties[prop.mqtt_topic])",
													"        continue;",
													"",
													"    pm.test(\"Проперти \\\"\"+prop.mqtt_topic+\"\\\" корректно\", () => {",
													"        pm.expect(new RegExp(properties[prop.mqtt_topic]).test(prop.value)).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nodeid\": \"{{mqtt_broker_nodeId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim_host}}/info",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление камеры через API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function () { }, 5000);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/cameras/{{mqtt_broker_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{mqtt_broker_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка подключения со стороны симулятора",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Нет активной камеры\", function () {",
													"    pm.expect(pm.response.json().length).to.be.eq(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cam_sim_host}}/active",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"active"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Нет активной камеры\", function () {",
													"    pm.expect(pm.response.json().any(x => x.deviceType == \"CAMERA\" && x.status == \"ONLINE\" && x.nodeId == pm.variables.get(\"mqtt_broker_nodeId\"))).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/0/devices?withCameras=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание второй камеры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"try{",
													"    pm.environment.set(\"mqtt_broker_url\", pm.response.json().brokerURL);",
													"    pm.environment.set(\"mqtt_broker_login\", pm.response.json().generatedBrokerLogin);",
													"    pm.environment.set(\"mqtt_broker_password\", pm.response.json().generatedBrokerPassword);",
													"    pm.environment.set(\"mqtt_broker_nodeId\", pm.response.json().generatedNodeId);",
													"}catch {",
													"    pm.test(\"Тест должен пройти без ошибок\", function () {",
													"        pm.expect(false).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{mqtt_ctl_id}}/devices/generateMqttBrokerInfo",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{mqtt_ctl_id}}",
												"devices",
												"generateMqttBrokerInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение второй камеры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"brokerURL\": \"{{mqtt_broker_url}}\",\n    \"generatedBrokerLogin\": \"{{mqtt_broker_login}}\",\n    \"generatedBrokerPassword\": \"{{mqtt_broker_password}}\",\n    \"generatedNodeId\": \"{{mqtt_broker_nodeId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim_host}}/add",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание подключения второй камеры",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_deviceDto.nodeId={{mqtt_broker_nodeId}}&C_type=DEVICE_CHANGE&C_deviceDto.status=ONLINE&C_deviceDto.deviceType=CAMERA&timeout=30000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceDto.nodeId",
													"value": "{{mqtt_broker_nodeId}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_CHANGE"
												},
												{
													"key": "C_deviceDto.status",
													"value": "ONLINE"
												},
												{
													"key": "C_deviceDto.deviceType",
													"value": "CAMERA"
												},
												{
													"key": "timeout",
													"value": "30000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть активная камеры\", function () {",
													"    pm.expect(pm.response.json().any(x => x.deviceType == \"CAMERA\" && x.status == \"ONLINE\" && x.nodeId == pm.variables.get(\"mqtt_broker_nodeId\"))).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/0/devices?withCameras=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка подключения со стороны симулятора",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Есть активная камеры\", function () {",
													"    pm.expect(pm.response.json().length).to.be.gte(1);",
													"    pm.expect(pm.response.json()[0]).to.be.eq(pm.variables.get(\"mqtt_broker_nodeId\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cam_sim_host}}/active",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"active"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка значений проперти камеры",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let properties = {",
													"    \"/ota/url\": \".*\",",
													"    \"/ota/upgrade\": \"1\",",
													"    \"/stream/0/rtsp/onoff\": \"1\",",
													"    \"/time/tz\": \"Asia/Krasnoyarsk\",",
													"    \"/osd/0/onoff\": \"1\"",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"for (let prop of pm.response.json()?.property_list?.props) {",
													"    if (!properties[prop.mqtt_topic])",
													"        continue;",
													"",
													"    pm.test(\"Проперти \\\"\"+prop.mqtt_topic+\"\\\" корректно\", () => {",
													"        pm.expect(new RegExp(properties[prop.mqtt_topic]).test(prop.value)).to.be.true;",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nodeid\": \"{{mqtt_broker_nodeId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim_host}}/info",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление второй камеры со стороны симулятора",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function () { }, 5000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nodeid\": [\n        \"{{mqtt_broker_nodeId}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim_host}}/remove",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"remove"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка подключения со стороны симулятора",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Нет активной камеры\", function () {",
													"    pm.expect(pm.response.json().length).to.be.eq(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cam_sim_host}}/active",
											"host": [
												"{{cam_sim_host}}"
											],
											"path": [
												"active"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Нет активной камеры\", function () {",
													"    pm.expect(pm.response.json().any(x => x.deviceType == \"CAMERA\" && x.status == \"ONLINE\" && x.nodeId == pm.variables.get(\"mqtt_broker_nodeId\"))).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/0/devices?withCameras=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"0",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка живого потока",
							"item": []
						},
						{
							"name": "Лимит потоков",
							"item": []
						}
					]
				},
				{
					"name": "Проверка архива",
					"item": [
						{
							"name": "Постоянный",
							"item": []
						},
						{
							"name": "По событию",
							"item": []
						},
						{
							"name": "Смешанный",
							"item": []
						},
						{
							"name": "Архив по серийнику",
							"item": []
						},
						{
							"name": "Лимит потоков",
							"item": []
						}
					]
				},
				{
					"name": "Работа с охраной",
					"item": [
						{
							"name": "Группы",
							"item": []
						},
						{
							"name": "Фрагменты",
							"item": []
						},
						{
							"name": "События",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "Проверка уязвимостей",
			"item": [
				{
					"name": "Получение содержимого любого файла в виде лога",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
									"pm.environment.set('no_api_host', no_api_host);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{no_api_host}}/json.htm?type=command&param=getlog&lastlogtime=0&loglevel=../../etc/passwd",
							"host": [
								"{{no_api_host}}"
							],
							"path": [
								"json.htm"
							],
							"query": [
								{
									"key": "type",
									"value": "command"
								},
								{
									"key": "param",
									"value": "getlog"
								},
								{
									"key": "lastlogtime",
									"value": "0"
								},
								{
									"key": "loglevel",
									"value": "../../etc/passwd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Скачивание любого файла в виде лога",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
									"pm.environment.set('no_api_host', no_api_host);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{no_api_host}}/syslog?filename=../../etc/passwd",
							"host": [
								"{{no_api_host}}"
							],
							"path": [
								"syslog"
							],
							"query": [
								{
									"key": "filename",
									"value": "../../etc/passwd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаленное выполнение команд через настройки сети",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 5000);",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
									"pm.environment.set('no_api_host', no_api_host);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{no_api_host}}/json.htm?type=command&param=networksettings&type_settings=static&enabled=true&address=192.168.1.103&netmask=255.255.255.0&gateway=192.168.1.1&dns=192.168.1.1%0Apost-up%20wget%20-O%20-%20%22http%3A%2F%2Ftest_user%3Atest_user%40127.0.0.1%2Fjson.htm%3Ftype%3Dcommand%26param%3Dnetworksettings%26type_settings%3Dstatic%26enabled%3Dfalse%22",
							"host": [
								"{{no_api_host}}"
							],
							"path": [
								"json.htm"
							],
							"query": [
								{
									"key": "type",
									"value": "command"
								},
								{
									"key": "param",
									"value": "networksettings"
								},
								{
									"key": "type_settings",
									"value": "static"
								},
								{
									"key": "enabled",
									"value": "true"
								},
								{
									"key": "address",
									"value": "192.168.1.103"
								},
								{
									"key": "netmask",
									"value": "255.255.255.0"
								},
								{
									"key": "gateway",
									"value": "192.168.1.1"
								},
								{
									"key": "dns",
									"value": "192.168.1.1%0Apost-up%20wget%20-O%20-%20%22http%3A%2F%2Ftest_user%3Atest_user%40127.0.0.1%2Fjson.htm%3Ftype%3Dcommand%26param%3Dnetworksettings%26type_settings%3Dstatic%26enabled%3Dfalse%22"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "sl10_username",
			"value": "test_user",
			"type": "string"
		},
		{
			"key": "sl10_password",
			"value": "test_user",
			"type": "string"
		},
		{
			"key": "serial",
			"value": "VI9F000029",
			"type": "string"
		}
	]
}