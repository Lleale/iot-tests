{
	"info": {
		"_postman_id": "ead78e09-5fbd-40d3-ac45-65a69c42ce7a",
		"name": "SL-10",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36207140"
	},
	"item": [
		{
			"name": "Регистрация пользователя",
			"item": [
				{
					"name": "Registration new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"serialno\": \"VI9F000280\",\n\t\"loginType\": \"EMAIL\",\n\t\"password\": \"testPass\",\n\t\"language\": \"ru\",\n\t\"login\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/registration",
							"host": [
								"{{host}}"
							],
							"path": [
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.environment.set(\"access_token\", pm.response.json().access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic aW9zLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/oauth2/token?grant_type=password&username=test&password=testPass",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "test"
								},
								{
									"key": "password",
									"value": "testPass"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Управление домом",
			"item": [
				{
					"name": "Редактирование дома",
					"item": [
						{
							"name": "Edit default house",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Standart response is null\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"null\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": null,\n\t\"title\": \"Test home\",\n\t\"timeZone\": \"Asia\\/Krasnoyarsk\",\n\t\"apartment\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/0",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check edited house",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Check that response is json object\", () => {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Check that response is json object\", () => {",
											"    pm.expect(pm.response.json().title).to.eql(\"Test home\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List of houses",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses"
							]
						}
					},
					"response": []
				},
				{
					"name": "User house",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"1 house in response\", function () {",
									"    pm.expect(pm.response.json().length).to.be.equal(1);",
									"});",
									"",
									"pm.test(\"House have Id equal 0\", function () {",
									"    pm.expect(pm.response.json()[0].id).to.be.equal(\"0\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houseInfo",
							"host": [
								"{{host}}"
							],
							"path": [
								"houseInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Full info about house",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"address\",",
									"        \"apartment\",",
									"        \"controllers\",",
									"        \"dashboardItems\",",
									"        \"guardStatus\",",
									"        \"guards\",",
									"        \"houseGroups\",",
									"        \"id\",",
									"        \"language\",",
									"        \"ownerId\",",
									"        \"startTime\",",
									"        \"timeZone\",",
									"        \"title\",",
									"        \"type\",",
									"        \"underGuard\",",
									"        \"variables\"",
									"    ],",
									"    \"properties\": {",
									"        \"address\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"apartment\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"controllers\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"additionalInfo\",",
									"                    \"devices\",",
									"                    \"houseAddress\",",
									"                    \"houseApartment\",",
									"                    \"houseId\",",
									"                    \"id\",",
									"                    \"ipAddress\",",
									"                    \"lastActivity\",",
									"                    \"nodeIds\",",
									"                    \"settings\",",
									"                    \"status\",",
									"                    \"title\",",
									"                    \"typeController\",",
									"                    \"virtual\"",
									"                ],",
									"                \"properties\": {",
									"                    \"additionalInfo\": {",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"controllerModel\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"mac\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"model\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"sdkSubVersion\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"serial\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"softwareVersion\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"vendor\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"zwaveSubModule\": {",
									"                                \"type\": \"string\"",
									"                            }",
									"                        }",
									"                    },",
									"                    \"devices\": {",
									"                        \"type\": \"object\",",
									"                        \"required\": [],",
									"                        \"properties\": {}",
									"                    },",
									"                    \"houseAddress\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"houseApartment\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"houseId\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"ipAddress\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"lastActivity\": {",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"nodeIds\": {",
									"                        \"type\": \"array\",",
									"                        \"items\": {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    },",
									"                    \"settings\": {",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"capabilities\": {",
									"                                \"type\": \"array\",",
									"                                \"items\": {",
									"                                    \"type\": \"string\"",
									"                                }",
									"                            },",
									"                            \"homeId\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"nonSmartStartDskList\": {",
									"                                \"type\": \"array\",",
									"                                \"items\": {}",
									"                            },",
									"                            \"provisioningList\": {",
									"                                \"type\": \"array\",",
									"                                \"items\": {}",
									"                            },",
									"                            \"baud_rates\": {",
									"                                \"type\": \"array\",",
									"                                \"items\": {",
									"                                    \"type\": \"integer\"",
									"                                }",
									"                            },",
									"                            \"current_baud_rate\": {",
									"                                \"type\": \"integer\"",
									"                            },",
									"                            \"current_protocol\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"protocols\": {",
									"                                \"type\": \"array\",",
									"                                \"items\": {",
									"                                    \"type\": \"string\"",
									"                                }",
									"                            }",
									"                        }",
									"                    },",
									"                    \"status\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"title\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"typeController\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"virtual\": {",
									"                        \"type\": \"boolean\"",
									"                    }",
									"                }",
									"            }",
									"        },",
									"        \"dashboardItems\": {",
									"            \"type\": \"array\",",
									"            \"items\": {}",
									"        },",
									"        \"guardStatus\": {",
									"            \"type\": \"object\",",
									"            \"required\": [",
									"                \"message\",",
									"                \"status\"",
									"            ],",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"status\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            }",
									"        },",
									"        \"guards\": {",
									"            \"type\": \"array\",",
									"            \"items\": {}",
									"        },",
									"        \"houseGroups\": {",
									"            \"type\": \"array\",",
									"            \"items\": {}",
									"        },",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"language\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"ownerId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"startTime\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"timeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"underGuard\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"variables\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"enumValues\",",
									"                    \"id\",",
									"                    \"showInHeader\",",
									"                    \"system\",",
									"                    \"title\",",
									"                    \"type\",",
									"                    \"value\"",
									"                ],",
									"                \"properties\": {",
									"                    \"enumValues\": {",
									"                        \"type\": \"array\",",
									"                        \"items\": {",
									"                            \"type\": \"object\",",
									"                            \"required\": [",
									"                                \"id\",",
									"                                \"system\",",
									"                                \"title\"",
									"                            ],",
									"                            \"properties\": {",
									"                                \"id\": {",
									"                                    \"type\": \"string\"",
									"                                },",
									"                                \"system\": {",
									"                                    \"type\": \"boolean\"",
									"                                },",
									"                                \"title\": {",
									"                                    \"type\": \"string\"",
									"                                }",
									"                            }",
									"                        }",
									"                    },",
									"                    \"id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"showInHeader\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"system\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"title\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"value\": {",
									"                        \"type\": \"string\"",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Вкл/выкл пуш-уведомлений",
			"item": [
				{
					"name": "Turn off push",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"byEmail\": 0,\n\t\"baseSettings\": {},\n\t\"byPush\": 0,\n\t\"bySms\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check off push",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Push is off\", () => {",
									"    pm.expect(pm.response.json().byPush).to.eql(false);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Turn on push",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"byEmail\": 0,\n\t\"baseSettings\": {},\n\t\"byPush\": 1,\n\t\"bySms\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check on push",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Push is off\", () => {",
									"    pm.expect(pm.response.json().byPush).to.eql(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/newNotificationsV2",
							"host": [
								"{{host}}"
							],
							"path": [
								"newNotificationsV2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Редактирование групп",
			"item": [
				{
					"name": "New group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.environment.set(\"group_id\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Ванная\",\n\t\"parentId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/0/groups",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Кухня\",\n\t\"parentId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/0/groups/{{group_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"groups",
								"{{group_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check group new title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Group title updated\", () => {",
									"    pm.expect(pm.response.json().title).to.eql(\"Кухня\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/groups/{{group_id}}?flat=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"groups",
								"{{group_id}}"
							],
							"query": [
								{
									"key": "flat",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/groups/{{group_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"groups",
								"{{group_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Сценарии (без устройств)",
			"item": [
				{
					"name": "Create script",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.environment.set(\"script_id\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Тестовый сценарий\",\n\t\"actions\": [{\n\t\t\"data\": {\n\t\t\t\"cameraData\": null,\n\t\t\t\"importance\": \"NORMAL\",\n\t\t\t\"message\": \"Пора домой\"\n\t\t},\n\t\t\"type\": \"SEND_NOTIFICATION\"\n\t}],\n\t\"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/0/scripts",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"scripts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add rules for script",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object\", () => {",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"enabled\": \"true\",\n\t\"conditions\": [{\n\t\t\"sourceType\": \"HOUSE_VARIABLE\",\n\t\t\"observableValue\": \"houseMode\",\n\t\t\"comparison\": \"EQ\",\n\t\t\"targetValue\": \"notAtHome\"\n\t}, {\n\t\t\"comparison\": \"EQ\",\n\t\t\"targetValue\": \"2330~1548\",\n\t\t\"sourceType\": \"TIME\",\n\t\t\"observableValue\": \"TIME_OF_DAY\"\n\t}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/0/scripts/{{script_id}}/rules",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"scripts",
								"{{script_id}}",
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove script",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/scripts/{{script_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"scripts",
								"{{script_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "События",
			"item": [
				{
					"name": "Get events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object and total=data.length\", () => {",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"total\");",
									"    pm.expect(pm.response.json()).to.have.property(\"data\");",
									"    pm.expect(pm.response.json().data.length).to.eql(pm.response.json().total)",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"data\",",
									"        \"last_read_event_time_millis\",",
									"        \"next_offset\",",
									"        \"next_time\",",
									"        \"next_time_millis\",",
									"        \"timestamp_unread_event\",",
									"        \"total\"",
									"    ],",
									"    \"properties\": {",
									"        \"data\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"color\",",
									"                    \"created_at\",",
									"                    \"created_at_millis\",",
									"                    \"house_id\",",
									"                    \"icon_name\",",
									"                    \"id\",",
									"                    \"level\",",
									"                    \"links\",",
									"                    \"message\",",
									"                    \"origin_id\",",
									"                    \"origin_type\",",
									"                    \"section_id\",",
									"                    \"section_type\",",
									"                    \"type\",",
									"                    \"user_id\"",
									"                ],",
									"                \"properties\": {",
									"                    \"color\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"created_at\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"created_at_millis\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"house_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"icon_name\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"level\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"links\": {",
									"                        \"type\": \"array\",",
									"                        \"items\": {}",
									"                    },",
									"                    \"message\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"origin_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"origin_type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"section_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"section_type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"user_id\": {",
									"                        \"type\": \"string\"",
									"                    }",
									"                }",
									"            }",
									"        },",
									"        \"last_read_event_time_millis\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"next_offset\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"next_time\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"next_time_millis\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"timestamp_unread_event\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"total\": {",
									"            \"type\": \"integer\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events/endless?fromMillis={{current_time}}&offset=0&limit=50&houseId=0&isAppHub=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"endless"
							],
							"query": [
								{
									"key": "fromMillis",
									"value": "{{current_time}}"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "houseId",
									"value": "0"
								},
								{
									"key": "isAppHub",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 10 events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check that response is json object and total=data.length\", () => {",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"total\");",
									"    pm.expect(pm.response.json()).to.have.property(\"data\");",
									"    pm.expect(pm.response.json().data.length).to.eql(pm.response.json().total)",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"data\",",
									"        \"last_read_event_time_millis\",",
									"        \"next_offset\",",
									"        \"next_time\",",
									"        \"next_time_millis\",",
									"        \"timestamp_unread_event\",",
									"        \"total\"",
									"    ],",
									"    \"properties\": {",
									"        \"data\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"color\",",
									"                    \"created_at\",",
									"                    \"created_at_millis\",",
									"                    \"house_id\",",
									"                    \"icon_name\",",
									"                    \"id\",",
									"                    \"level\",",
									"                    \"links\",",
									"                    \"message\",",
									"                    \"origin_id\",",
									"                    \"origin_type\",",
									"                    \"section_id\",",
									"                    \"section_type\",",
									"                    \"type\",",
									"                    \"user_id\"",
									"                ],",
									"                \"properties\": {",
									"                    \"color\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"created_at\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"created_at_millis\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"house_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"icon_name\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"level\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"links\": {",
									"                        \"type\": \"array\",",
									"                        \"items\": {}",
									"                    },",
									"                    \"message\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"origin_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"origin_type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"section_id\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"section_type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"user_id\": {",
									"                        \"type\": \"string\"",
									"                    }",
									"                }",
									"            }",
									"        },",
									"        \"last_read_event_time_millis\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"next_offset\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"next_time\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"next_time_millis\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"timestamp_unread_event\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"total\": {",
									"            \"type\": \"integer\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});",
									"",
									"pm.test(\"Limit filter correct\", () => {",
									"    pm.expect(pm.response.json().total).to.eql(10);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_time\", Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events/endless?fromMillis={{current_time}}&offset=0&limit=10&houseId=0&isAppHub=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"endless"
							],
							"query": [
								{
									"key": "fromMillis",
									"value": "{{current_time}}"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "houseId",
									"value": "0"
								},
								{
									"key": "isAppHub",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Устройства",
			"item": [
				{
					"name": "Инициализация",
					"item": [
						{
							"name": "Set debug mode for glcp server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accept\": \"any\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/glcpServer",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"glcpServer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение сервиса Z-Wave Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
											"pm.environment.set('no_api_host', no_api_host);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{no_api_host}}/json.htm?type=command&param=zwavesettings&zwaveEnabled=false",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										"json.htm"
									],
									"query": [
										{
											"key": "type",
											"value": "command"
										},
										{
											"key": "param",
											"value": "zwavesettings"
										},
										{
											"key": "zwaveEnabled",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Hub config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Settings confirmed\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"connected\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mac\": \"ff:ff:ff:ff:ff:ff\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/info",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add sz_mct device",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Added device\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_mct\",\n    \"nodeId\": 6\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Platform info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var sdk = require('postman-collection');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
											"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/info",
									"host": [
										"{{host}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Connect hub",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"// Чтобы платформа успела принять подключение контроллера",
											"setTimeout(function(){}, [200]);",
											"",
											"let valid = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"vendor\",",
											"        \"homeId\",",
											"        \"zWaveVersion\",",
											"        \"devices\",",
											"        \"mac\",",
											"        \"serial\",",
											"        \"version\",",
											"        \"model\",",
											"        \"interfaces\"",
											"    ],",
											"    \"properties\": {",
											"        \"vendor\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"homeId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"zWaveVersion\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"devices\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"security\",",
											"                    \"version\",",
											"                    \"manufacturerId\",",
											"                    \"productId\",",
											"                    \"productName\",",
											"                    \"productTypeId\",",
											"                    \"properties\",",
											"                    \"batteryVoltage\",",
											"                    \"poweredOn\",",
											"                    \"guardMode\",",
											"                    \"keepAlivePeriod\",",
											"                    \"guardInitDelay\",",
											"                    \"silent\",",
											"                    \"nodeId\",",
											"                    \"dsk\"",
											"                ],",
											"                \"properties\": {",
											"                    \"security\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"version\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"manufacturerId\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"productId\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"productName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"productTypeId\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"properties\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"endpoint\",",
											"                                \"deviceType\",",
											"                                \"model\",",
											"                                \"value\",",
											"                                \"updateTime\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"endpoint\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"deviceType\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"model\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"value\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"updateTime\": {",
											"                                    \"type\": \"integer\"",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    \"batteryVoltage\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"poweredOn\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"guardMode\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"keepAlivePeriod\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"guardInitDelay\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"silent\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"nodeId\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"dsk\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            }",
											"        },",
											"        \"mac\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"serial\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"version\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"model\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"interfaces\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"string\"",
											"            }",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validate response json\", () => {",
											"    pm.response.to.have.jsonSchema(valid);",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"glcp\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/connect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"connect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ctl id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eq(200);",
											"});",
											"",
											"pm.environment.set(\"test_ctl_id\", pm.response.json().find(x => x.id == 6).controllerId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/0/devices",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"0",
										"devices"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "New location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.environment.set(\"group_id\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Ванная\",\n\t\"parentId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/0/groups",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change device location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deviceIds\": [\"6\"],\n\t\"locationId\": \"{{group_id}}\",\n\t\"cameraIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/devices/changeLocation",
							"host": [
								"{{host}}"
							],
							"path": [
								"devices",
								"changeLocation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check new device location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Location is correct\", () => {",
									"    pm.expect(pm.response.json()[0].deviceLocation[0]).to.eq(pm.environment.get(\"group_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/devices?withCameras=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"devices"
							],
							"query": [
								{
									"key": "withCameras",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change device state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"off\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6/prop/0/tamper",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6",
								"prop",
								"0",
								"tamper"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove device from platform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/ctl/{{test_ctl_id}}/devices/6/remove",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl",
								"{{test_ctl_id}}",
								"devices",
								"6",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove device confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{zway_ctl_host}}/devices/6",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"devices",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/groups/{{group_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"groups",
								"{{group_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключение контроллера от платформы Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable (\"current_time\", Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"glcp\",\n    \"allowMultiple\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{zway_ctl_host}}/ctl/disconnect",
							"host": [
								"{{zway_ctl_host}}"
							],
							"path": [
								"ctl",
								"disconnect"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Сервисная информация",
			"item": [
				{
					"name": "Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eq(200);",
									"});",
									"",
									"pm.test(\"Response is json\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response have version property\", () => {",
									"    pm.expect(pm.response.json()).to.have.property(\"version\");",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"api\",",
									"        \"currentTime\",",
									"        \"version\"",
									"    ],",
									"    \"properties\": {",
									"        \"api\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"currentTime\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"version\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eq(200);",
									"});",
									"",
									"pm.test(\"Response is json\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let valid = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"ctlGatePort\",",
									"        \"ctlGateSecurityPort\",",
									"        \"privacyPolicyUrl\",",
									"        \"serverName\",",
									"        \"uiPort\",",
									"        \"uiScheme\"",
									"    ],",
									"    \"properties\": {",
									"        \"ctlGatePort\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"ctlGateSecurityPort\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"privacyPolicyUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"serverName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"uiPort\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"uiScheme\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Validate response json\", () => {",
									"    pm.response.to.have.jsonSchema(valid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/info",
							"host": [
								"{{host}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Переменные дома",
			"item": [
				{
					"name": "Set at home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"value\": \"atHome\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/0/vars/houseMode",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"vars",
								"houseMode"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set not at home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"value\": \"notAtHome\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/0/vars/houseMode",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"vars",
								"houseMode"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check edit vars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response type is json\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Variable is set as 'notAtHome'\", () => {",
									"    pm.expect(pm.response.json().value).to.eql(\"notAtHome\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/0/vars/houseMode",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"0",
								"vars",
								"houseMode"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Веб",
			"item": [
				{
					"name": "Время",
					"item": [
						{
							"name": "Auth test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.environment.set(\"access_token\", pm.response.json().access_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic aW9zLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username=test&password=testPass",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "test"
										},
										{
											"key": "password",
											"value": "testPass"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка текущего времени Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response type is json and have currentTime property\", () => {",
											"    pm.response.to.be.json;",
											"    pm.expect(pm.response.json()).to.have.property(\"currentTime\");",
											"});",
											"",
											"pm.environment.set(\"current_time\", Date.parse(pm.response.json().currentTime.replace(/\\[.+\\]/, \"\")));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/version",
									"host": [
										"{{host}}"
									],
									"path": [
										"version"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set future time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"sl_timestamp\", Math.round(Date.now()/1000 + 6000));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timeval\": {\n        \"sec\": {{sl_timestamp}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/setDateTime",
									"host": [
										"{{host}}"
									],
									"path": [
										"setDateTime"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка текущего времени Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Setted time is fast\", function () {",
											"  pm.expect(Date.parse(pm.response.json().currentTime.replace(/\\[.+\\]/, \"\"))/1000).to.be.gt(Date.now()/1000+100);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/version",
									"host": [
										"{{host}}"
									],
									"path": [
										"version"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set real time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"sl_timestamp\", Math.round(Date.now()/1000 + 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timeval\": {\n        \"sec\": {{sl_timestamp}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/setDateTime?force_mode=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"setDateTime"
									],
									"query": [
										{
											"key": "force_mode",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Управление пользователями",
					"item": [
						{
							"name": "Auth test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.environment.set(\"access_token\", pm.response.json().access_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic aW9zLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username=test&password=testPass",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "test"
										},
										{
											"key": "password",
											"value": "testPass"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eq(200);",
											"});",
											"",
											"pm.test(\"Response type is json\", () => {",
											"    pm.expect(pm.response).to.be.json;",
											"});",
											"",
											"pm.test(\"Request status is OK\", () => {",
											"    pm.expect(pm.response.json().status).to.eq(\"OK\");",
											"    pm.expect(pm.response.json().title).to.eq(\"AddUser\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serialno\": \"VI9F000280\",\n\t\"loginType\": \"EMAIL\",\n\t\"password\": \"testPass\",\n\t\"language\": \"ru\",\n\t\"login\": \"user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{no_api_host}}/json.htm?type=command&param=adduser&enabled=true&username=user&password=testPass&rights=2&RemoteSharing=false&TabsEnabled=0",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										"json.htm"
									],
									"query": [
										{
											"key": "type",
											"value": "command"
										},
										{
											"key": "param",
											"value": "adduser"
										},
										{
											"key": "enabled",
											"value": "true"
										},
										{
											"key": "username",
											"value": "user"
										},
										{
											"key": "password",
											"value": "testPass"
										},
										{
											"key": "rights",
											"value": "2"
										},
										{
											"key": "RemoteSharing",
											"value": "false"
										},
										{
											"key": "TabsEnabled",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.environment.set(\"access_token\", pm.response.json().access_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic aW9zLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username=user&password=testPass",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "user"
										},
										{
											"key": "password",
											"value": "testPass"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение данных о новом пользователе Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains user ID\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.environment.set(\"new_user_id\", pm.response.json().id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user name and pass",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let no_api_host = pm.variables.get(\"host\").replace(\"/api/v1\", \"\");",
											"pm.environment.set('no_api_host', no_api_host);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eq(200);",
											"});",
											"",
											"pm.test(\"Response type is json\", () => {",
											"    pm.expect(pm.response).to.be.json;",
											"});",
											"",
											"pm.test(\"Request status is OK\", () => {",
											"    pm.expect(pm.response.json().status).to.eq(\"OK\");",
											"    pm.expect(pm.response.json().title).to.eq(\"UpdateUser\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{no_api_host}}/json.htm?type=command&param=updateuser&idx={{new_user_id}}&enabled=true&username=test_new&password=testPass_new&rights=2&RemoteSharing=false&TabsEnabled=0",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										"json.htm"
									],
									"query": [
										{
											"key": "type",
											"value": "command"
										},
										{
											"key": "param",
											"value": "updateuser"
										},
										{
											"key": "idx",
											"value": "{{new_user_id}}"
										},
										{
											"key": "enabled",
											"value": "true"
										},
										{
											"key": "username",
											"value": "test_new"
										},
										{
											"key": "password",
											"value": "testPass_new"
										},
										{
											"key": "rights",
											"value": "2"
										},
										{
											"key": "RemoteSharing",
											"value": "false"
										},
										{
											"key": "TabsEnabled",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.environment.set(\"access_token\", pm.response.json().access_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic aW9zLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/oauth2/token?grant_type=password&username=test&password=testPass",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "test"
										},
										{
											"key": "password",
											"value": "testPass"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eq(200);",
											"});",
											"",
											"pm.test(\"Response type is json\", () => {",
											"    pm.expect(pm.response).to.be.json;",
											"});",
											"",
											"pm.test(\"Request status is OK\", () => {",
											"    pm.expect(pm.response.json().status).to.eq(\"OK\");",
											"    pm.expect(pm.response.json().title).to.eq(\"DeleteUser\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{no_api_host}}/json.htm?type=command&param=deleteuser&idx={{new_user_id}}",
									"host": [
										"{{no_api_host}}"
									],
									"path": [
										"json.htm"
									],
									"query": [
										{
											"key": "type",
											"value": "command"
										},
										{
											"key": "param",
											"value": "deleteuser"
										},
										{
											"key": "idx",
											"value": "{{new_user_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Deauth test user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"Status code is 200\", () => {",
							"//   pm.response.to.have.status(200);",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [1000]);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"token\": \"{{access_token}}\",\n\t\"token_type_hint\": \"access_token\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/oauth2/token/revoke",
					"host": [
						"{{host}}"
					],
					"path": [
						"oauth2",
						"token",
						"revoke"
					]
				}
			},
			"response": []
		}
	]
}