{
	"info": {
		"_postman_id": "13a4d62d-48fa-48a0-9524-ffa7dc88787c",
		"name": "EVI_Cloud_Home_v1.1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16511326"
	},
	"item": [
		{
			"name": "EVI_Cloud_Home_v1.1.0",
			"item": [
				{
					"name": "0. Создать пользователя и т.д.",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (user, ATc1a2m3era)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mailATc1a2m3era.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"ATc1a2m3era\",\n    \"password\": \"ATc1a2m3era\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"ATc1a2m3era\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "ATc1a2m3era",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ATc1a2m3era",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"variables\",",
											"        \"dashboardItems\",",
											"        \"houseGroups\",",
											"        \"guards\",",
											"        \"title\",",
											"        \"ownerId\",",
											"        \"address\",",
											"        \"apartment\",",
											"        \"timeZone\",",
											"        \"type\",",
											"        \"startTime\",",
											"        \"guardStatus\",",
											"        \"underGuard\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"variables\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"dashboardItems\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"houseGroups\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"guards\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"ownerId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"apartment\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"timeZone\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"startTime\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"guardStatus\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"underGuard\": {",
											"            \"type\": \"boolean\"",
											"        }",
											"    }",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful request (checking the code)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "EVI_Cloud_Home",
					"item": [
						{
							"name": "Проверка доступности ESCC",
							"item": [
								{
									"name": "version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Проверка наличия поля commit\", function () {",
													"    pm.expect(pm.response.json().commit).to.string;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/version",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"version"
											]
										}
									},
									"response": []
								},
								{
									"name": "apidoc_ESCC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Проверка Content-Type в headers\", function () {",
													"    pm.expect( pm.response.headers.get('Content-Type')).to.eql(\"text/html\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/apidoc",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"apidoc"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка доступа до видеоплатформы (на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/v2",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"v2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка функционала прямой авторизации (sessionId получается сразу в ответе на запрос, по логину и паролю, а не через токен)",
							"item": [
								{
									"name": "(admin)Запрос на получение sessionId, который используется для авторизации в остальных запросах. (на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"// let split = responseBody.split('\"', 5)",
													"// console.log(split[3])",
													"// postman.setEnvironmentVariable (\"session_id_EVI\", split[3]);",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/auth/login?login=admin&password=admin",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"auth",
												"login"
											],
											"query": [
												{
													"key": "login",
													"value": "admin"
												},
												{
													"key": "password",
													"value": "admin"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(admin)Запрос на получение sessionId, можно выполнить несколько раз ?(на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"// let split = responseBody.split('\"', 5)",
													"// console.log(split[3])",
													"// postman.setEnvironmentVariable (\"session_id_EVI\", split[3]);",
													"postman.setEnvironmentVariable (\"session_id_EVI\", pm.response.json().session_id);",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/auth/login?login=admin&password=admin",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"auth",
												"login"
											],
											"query": [
												{
													"key": "login",
													"value": "admin"
												},
												{
													"key": "password",
													"value": "admin"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "whoami (admin) (EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Проверка авторизации\", function () {",
													"    pm.expect(pm.response.json().can_edit_settings).to.eql(true);",
													"    pm.expect(pm.response.json().id).to.eql(1);",
													"    pm.expect(pm.response.json().is_domain_admin).to.eql(true);",
													"    pm.expect(pm.response.json().login).to.eql(\"admin\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/auth/whoami",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"auth",
												"whoami"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка функционала добавления пользователя и его обновления",
							"item": [
								{
									"name": "Получение информации о пользователе EVI (на iot)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    postman.setEnvironmentVariable (\"EVI_UserId\", pm.response.json().eviUserId);",
													"    ",
													"    pm.test(\"Проверка полей canEditOrganizations, canEditSettings, canViewOrganizations\", function () {",
													"        pm.expect(pm.response.json().canEditOrganizations).to.eql(true);",
													"        pm.expect(pm.response.json().canEditSettings).to.eql(false);",
													"        pm.expect(pm.response.json().canViewOrganizations).to.eql(true);",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/evi/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"evi",
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление пользователя (на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"EVI_UserId\", jsonData.id);",
													"",
													"        pm.test(\"Проверка полей login, is_admin, enabled, external_id, can_edit_organizations, can_edit_settings, can_view_organizations\", function () {",
													"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era\");",
													"        pm.expect(pm.response.json().is_admin).to.eql(false);",
													"        pm.expect(pm.response.json().enabled).to.eql(true);",
													"        pm.expect(pm.response.json().external_id).to.eql(pm.environment.get(\"id\"));",
													"        pm.expect(pm.response.json().can_edit_organizations).to.eql(true);",
													"        pm.expect(pm.response.json().can_edit_settings).to.eql(true);",
													"        pm.expect(pm.response.json().can_view_organizations).to.eql(true);",
													"        ",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"domain_id\",",
													"            \"login\",",
													"            \"apikey\",",
													"            \"is_admin\",",
													"            \"authorized_ip\",",
													"            \"enabled\",",
													"            \"readonly\",",
													"            \"monitoring\",",
													"            \"name\",",
													"            \"locale\",",
													"            \"note\",",
													"            \"phone\",",
													"            \"notification_email\",",
													"            \"external_id\",",
													"            \"max_sessions\",",
													"            \"can_edit_organizations\",",
													"            \"can_edit_settings\",",
													"            \"can_view_organizations\",",
													"            \"organizations\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"domain_id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"login\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"apikey\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"is_admin\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"authorized_ip\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"enabled\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"readonly\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"monitoring\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"name\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"locale\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"note\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"phone\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"notification_email\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"external_id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"max_sessions\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"can_edit_organizations\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_edit_settings\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_view_organizations\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"organizations\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"can_view_organizations\":true,\n\"can_edit_organizations\":true,\n\"can_edit_settings\":true,\n\"name\":\"ATc1a2m3era\",\n\"external_id\":\"{{id}}\",\n\"enabled\":true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/users/{{EVI_UserId}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"users",
												"{{EVI_UserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос пользователя (на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проврка обновления пользователя (поле name и can_edit_settings)\", function () {",
													"        pm.expect(pm.response.json().name).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().can_edit_settings).to.eql(true)",
													"    });",
													"",
													"    pm.test(\"Проврка полей id, login, external_id \", function () {",
													"        pm.expect(pm.response.json().id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().external_id).to.eql(pm.environment.get(\"id\"))",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"domain_id\",",
													"            \"login\",",
													"            \"apikey\",",
													"            \"is_admin\",",
													"            \"authorized_ip\",",
													"            \"enabled\",",
													"            \"readonly\",",
													"            \"monitoring\",",
													"            \"name\",",
													"            \"locale\",",
													"            \"note\",",
													"            \"phone\",",
													"            \"notification_email\",",
													"            \"external_id\",",
													"            \"max_sessions\",",
													"            \"can_edit_organizations\",",
													"            \"can_edit_settings\",",
													"            \"can_view_organizations\",",
													"            \"organizations\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"domain_id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"login\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"apikey\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"is_admin\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"authorized_ip\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"enabled\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"readonly\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"monitoring\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"name\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"locale\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"note\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"phone\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"notification_email\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"external_id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"max_sessions\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"can_edit_organizations\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_edit_settings\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_view_organizations\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"organizations\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    };",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/users/{{EVI_UserId}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"users",
												"{{EVI_UserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск пользователя по логину (для синхронизации пользователя) (на EVI_host)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    for (let i in pm.response.json()[0].organizations){",
													"        if (pm.response.json()[0].organizations[i] != 1 ) postman.setEnvironmentVariable (\"organizationId_EVI\", pm.response.json()[0].organizations[i]);",
													"    }",
													"",
													"    pm.test(\"Проврка полей name, id, login, external_id и can_edit_settings \", function () {",
													"        pm.expect(pm.response.json()[0].name).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json()[0].id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json()[0].login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json()[0].external_id).to.eql(pm.environment.get(\"id\"))",
													"        pm.expect(pm.response.json()[0].can_edit_settings).to.eql(true)",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"domain_id\",",
													"                \"login\",",
													"                \"apikey\",",
													"                \"is_admin\",",
													"                \"authorized_ip\",",
													"                \"enabled\",",
													"                \"readonly\",",
													"                \"monitoring\",",
													"                \"name\",",
													"                \"locale\",",
													"                \"note\",",
													"                \"phone\",",
													"                \"notification_email\",",
													"                \"external_id\",",
													"                \"max_sessions\",",
													"                \"can_edit_organizations\",",
													"                \"can_edit_settings\",",
													"                \"can_view_organizations\",",
													"                \"organizations\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"domain_id\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"login\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"apikey\": {",
													"                    \"type\": \"null\"",
													"                },",
													"                \"is_admin\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"authorized_ip\": {",
													"                    \"type\": \"null\"",
													"                },",
													"                \"enabled\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"readonly\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"monitoring\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"name\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"locale\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"note\": {",
													"                    \"type\": \"null\"",
													"                },",
													"                \"phone\": {",
													"                    \"type\": \"null\"",
													"                },",
													"                \"notification_email\": {",
													"                    \"type\": \"null\"",
													"                },",
													"                \"external_id\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"max_sessions\": {",
													"                    \"type\": \"null\"",
													"                },",
													"                \"can_edit_organizations\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"can_edit_settings\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"can_view_organizations\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"organizations\": {",
													"                    \"type\": \"array\",",
													"                    \"additionalItems\": true,",
													"                    \"items\": {",
													"                        \"type\": \"integer\"",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/users?login=ATc1a2m3era",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "login",
													"value": "ATc1a2m3era"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка функционала связанного с организациями и авторизацией",
							"item": [
								{
									"name": "Обновление организации (на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проврка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit\", function () {",
													"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
													"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
													"        pm.expect(pm.response.json().user_limit).to.eql(3)",
													"        pm.expect(pm.response.json().camera_limit).to.eql(10)",
													"    });",
													"        var schema =  {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"camera_count\",",
													"                \"camera_limit\",",
													"                \"can_edit_cameras\",",
													"                \"can_edit_users\",",
													"                \"can_view_stats\",",
													"                \"dvr_limit\",",
													"                \"id\",",
													"                \"is_default\",",
													"                \"is_member\",",
													"                \"mosaic_count\",",
													"                \"owner\",",
													"                \"owner_id\",",
													"                \"title\",",
													"                \"user_count\",",
													"                \"user_limit\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"camera_count\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"camera_limit\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"can_edit_cameras\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"can_edit_users\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"can_view_stats\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"dvr_limit\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"id\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"is_default\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"is_member\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"mosaic_count\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"owner\": {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"id\",",
													"                        \"login\"",
													"                    ],",
													"                    \"additionalProperties\": true,",
													"                    \"properties\": {",
													"                        \"id\": {",
													"                            \"type\": \"integer\"",
													"                        },",
													"                        \"login\": {",
													"                            \"type\": \"string\"",
													"                        }",
													"                    }",
													"                },",
													"                \"owner_id\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"title\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"user_count\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"user_limit\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dvr_limit\": 1000,\n    \"title\": \"ATc1a2m3era_organization\",\n    \"owner_id\": {{EVI_UserId}},\n    \"user_limit\": 3,\n    \"camera_limit\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/{{organizationId_EVI}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												"{{organizationId_EVI}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос организации (на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit, а так же user_count и camera_count\", function () {",
													"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
													"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
													"        pm.expect(pm.response.json().user_limit).to.eql(3)",
													"        pm.expect(pm.response.json().camera_limit).to.eql(10)",
													"",
													"        pm.expect(pm.response.json().user_count).to.eql(1)",
													"        pm.expect(pm.response.json().camera_count).to.eql(0)",
													"",
													"    });",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"is_default\",",
													"            \"can_edit_cameras\",",
													"            \"dvr_limit\",",
													"            \"user_count\",",
													"            \"camera_count\",",
													"            \"owner\",",
													"            \"can_edit_users\",",
													"            \"title\",",
													"            \"mosaic_count\",",
													"            \"activity_events_lifetime_days\",",
													"            \"can_view_stats\",",
													"            \"is_member\",",
													"            \"domain\",",
													"            \"user_limit\",",
													"            \"camera_limit\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"is_default\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_edit_cameras\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"dvr_limit\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"user_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"camera_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"owner\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"id\",",
													"                    \"login\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"login\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            },",
													"            \"can_edit_users\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"mosaic_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"activity_events_lifetime_days\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"can_view_stats\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"is_member\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"domain\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"title\",",
													"                    \"id\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"title\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    }",
													"                }",
													"            },",
													"            \"user_limit\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"camera_limit\": {",
													"                \"type\": \"integer\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/{{organizationId_EVI}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												"{{organizationId_EVI}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user, ATc1a2m3era2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id2\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mailATc1a2m3era2.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"ATc1a2m3era2\",\n    \"password\": \"ATc1a2m3era2\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"ATc1a2m3era2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Генерация token'а пользователя для получения sessionId. Полученное в ответе тело отсылается в запрос на sessionId. (на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"autologin_token\", jsonData.autologin_token);",
													"",
													"    // pm.environment.set(\"request_autologin\", pm.info.requestId);",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"autologin_token\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"autologin_token\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"    // postman.setNextRequest();",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"ATc1a2m3era\",\n    \"external_id\": \"{{id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/auth/generate-autologin-token",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"auth",
												"generate-autologin-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "(user, ATc1a2m3era)Запрос на получение sessionId (на EVI_Cloud_Home) (sessionId в куках)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    postman.setEnvironmentVariable (\"session_id_EVI_user\", pm.cookies.get('v2session'));",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "autologin_token",
													"value": "{{autologin_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/autologin",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"autologin"
											]
										}
									},
									"response": []
								},
								{
									"name": "whoami (user, ATc1a2m3era) (EVI_Cloud_Home) проверка получения sessionId, а также наличия organizations (задача 253186 )",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проврка полей id, login, can_edit_settings, is_domain_admin,  \", function () {",
													"        pm.expect(pm.response.json().id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().can_edit_settings).to.eql(true)",
													"        pm.expect(pm.response.json().is_domain_admin).to.eql(false)",
													"    });",
													"",
													"    pm.test(\"Проверка organizations \", function () {",
													"        let org_exists = false;",
													"        for( let i in pm.response.json().organizations){",
													"            if (pm.response.json().organizations[i].id === Number(pm.environment.get(\"organizationId_EVI\"))){",
													"                org_exists = true;",
													"                pm.expect(pm.response.json().organizations[i].title).to.eql(\"ATc1a2m3era_organization\");",
													"            }",
													"",
													"        }        ",
													"        pm.expect(org_exists).to.eql(true);",
													"    });",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/auth/whoami",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"auth",
												"whoami"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск пользователя по логину (на EVI_host)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.set( \"EVI_UserId2\", pm.response.json()[0].id);",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/users?login=ATc1a2m3era2",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "login",
													"value": "ATc1a2m3era2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление прав пользователю к организации (EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проврка полей user_id, can_view_organization_plists, can_view_organization_stats, can_edit_organization_users,can_edit_organization_cameras, can_edit_organization_plists\", function () {",
													"        pm.expect(pm.response.json().user_id).to.eql(Number(pm.environment.get(\"EVI_UserId2\")))",
													"        pm.expect(pm.response.json().can_view_organization_plists).to.eql(true)",
													"        pm.expect(pm.response.json().can_view_organization_stats).to.eql(false)",
													"        pm.expect(pm.response.json().can_edit_organization_users).to.eql(false)",
													"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era2\")",
													"        pm.expect(pm.response.json().can_edit_organization_cameras).to.eql(true)",
													"        pm.expect(pm.response.json().can_edit_organization_cameras).to.eql(true)",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"user_id\",",
													"            \"can_view_organization_plists\",",
													"            \"can_view_organization_stats\",",
													"            \"can_edit_organization_users\",",
													"            \"notification_email\",",
													"            \"login\",",
													"            \"folders_permissions\",",
													"            \"can_edit_organization_cameras\",",
													"            \"can_edit_organization_plists\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"user_id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"can_view_organization_plists\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_view_organization_stats\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_edit_organization_users\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"notification_email\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"login\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"folders_permissions\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"can_edit_organization_cameras\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_edit_organization_plists\": {",
													"                \"type\": \"boolean\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": {{EVI_UserId2}},\n    \"can_edit_organization_cameras\":true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/{{organizationId_EVI}}/users",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												"{{organizationId_EVI}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос организации (на EVI_Cloud_Home) (проверка изменений)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit, а так же user_count и camera_count\", function () {",
													"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
													"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
													"        pm.expect(pm.response.json().user_limit).to.eql(3)",
													"        pm.expect(pm.response.json().camera_limit).to.eql(10)",
													"",
													"        pm.expect(pm.response.json().user_count).to.eql(2)",
													"        pm.expect(pm.response.json().camera_count).to.eql(0)",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"is_default\",",
													"            \"can_edit_cameras\",",
													"            \"dvr_limit\",",
													"            \"user_count\",",
													"            \"camera_count\",",
													"            \"owner\",",
													"            \"can_edit_users\",",
													"            \"title\",",
													"            \"mosaic_count\",",
													"            \"activity_events_lifetime_days\",",
													"            \"can_view_stats\",",
													"            \"is_member\",",
													"            \"domain\",",
													"            \"user_limit\",",
													"            \"camera_limit\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"is_default\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_edit_cameras\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"dvr_limit\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"user_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"camera_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"owner\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"id\",",
													"                    \"login\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"login\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            },",
													"            \"can_edit_users\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"mosaic_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"activity_events_lifetime_days\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"can_view_stats\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"is_member\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"domain\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"title\",",
													"                    \"id\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"title\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    }",
													"                }",
													"            },",
													"            \"user_limit\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"camera_limit\": {",
													"                \"type\": \"integer\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/{{organizationId_EVI}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												"{{organizationId_EVI}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление пользователя из организации (на EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"success = true ?\", function () {",
													"        pm.expect(pm.response.json().success).to.eql(true)       ",
													"    });",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/{{organizationId_EVI}}/users/{{EVI_UserId2}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												"{{organizationId_EVI}}",
												"users",
												"{{EVI_UserId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление пользователя с EVI_Cloud_Home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"success = true ?\", function () {",
													"        pm.expect(pm.response.json().success).to.eql(true)       ",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/users/{{EVI_UserId2}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"users",
												"{{EVI_UserId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "удалить пользователя с платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Пользователь удален (код 204)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос организации (на EVI_Cloud_Home) (проверка удаления)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit, а так же user_count и camera_count\", function () {",
													"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
													"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
													"        pm.expect(pm.response.json().user_limit).to.eql(3)",
													"        pm.expect(pm.response.json().camera_limit).to.eql(10)",
													"",
													"        pm.expect(pm.response.json().user_count).to.eql(1)",
													"        pm.expect(pm.response.json().camera_count).to.eql(0)",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"is_default\",",
													"            \"can_edit_cameras\",",
													"            \"dvr_limit\",",
													"            \"user_count\",",
													"            \"camera_count\",",
													"            \"owner\",",
													"            \"can_edit_users\",",
													"            \"title\",",
													"            \"mosaic_count\",",
													"            \"activity_events_lifetime_days\",",
													"            \"can_view_stats\",",
													"            \"is_member\",",
													"            \"domain\",",
													"            \"user_limit\",",
													"            \"camera_limit\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"is_default\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"can_edit_cameras\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"dvr_limit\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"user_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"camera_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"owner\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"id\",",
													"                    \"login\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"login\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            },",
													"            \"can_edit_users\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"mosaic_count\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"activity_events_lifetime_days\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"can_view_stats\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"is_member\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"domain\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"title\",",
													"                    \"id\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"title\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    }",
													"                }",
													"            },",
													"            \"user_limit\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"camera_limit\": {",
													"                \"type\": \"integer\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/{{organizationId_EVI}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												"{{organizationId_EVI}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка функционала связанного с камерами MQTT",
							"item": [
								{
									"name": "Лимит камер 3 (запрос на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newLimit\": 3,\n    \"platformType\": \"ELTEX\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"limit",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Узнать id контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=1&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "1"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить логин и пароль для устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo?deviceType=camera",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											],
											"query": [
												{
													"key": "deviceType",
													"value": "camera"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавить mqtt устройство методом сопряжения.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
													"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
													"        pm.expect(pm.response.json().title).to.include(\"MQTT_CAM_simulator\");",
													"        pm.expect(pm.response.json().muted).to.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.eql(false);",
													"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
													"    });",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"console.log(Date.now())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"MQTT_CAM_simulator\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на симулятор (добавление устройства)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var time_to = Math.round(Date.now()/1000.0)",
													"pm.environment.set(\"time_to\", time_to);",
													"console.log(time_to)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{res}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim}}/add",
											"host": [
												"{{cam_sim}}"
											],
											"path": [
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события добавления устройства Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=ADD_ELTEX_CAMERA_QR&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.controllerId",
													"value": "{{controllerId}}",
													"disabled": true
												},
												{
													"key": "C_type",
													"value": "ADD_ELTEX_CAMERA_QR"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос камер пользователя (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.set(\"rtmpStream\", pm.response.json()[0].rtspStream);",
													"    pm.environment.set(\"cam_id\", pm.response.json()[0].id);",
													"    // postman.setNextRequest(pm.environment.get(\"request_autologin\"));",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [10000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Генерация token'а пользователя для получения sessionId. Полученное в ответе тело отсылается в запрос на sessionId. (на EVI_Cloud_Home) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"autologin_token\", jsonData.autologin_token);",
													"",
													"    // pm.environment.set(\"request_autologin\", pm.info.requestId);",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"autologin_token\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"autologin_token\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"    // postman.setNextRequest();",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"ATc1a2m3era\",\n    \"external_id\": \"{{id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/auth/generate-autologin-token",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"auth",
												"generate-autologin-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "(user, ATc1a2m3era)Запрос на получение sessionId (на EVI_Cloud_Home) (sessionId в куках) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    postman.setEnvironmentVariable (\"session_id_EVI_user\", pm.cookies.get('v2session'));",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "autologin_token",
													"value": "{{autologin_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/autologin",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"autologin"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос камер пользователя (EVI_Cloud_Home) (проверка добавления камеры)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.set(\"cameraToken\", pm.response.json()[0].playback_config.token);",
													"",
													"    pm.test(\"Проверка количества камер у пользователя (размер возвращаемого массива), а также полей dvr_depth, dvr_lock_days, dvr_space, enabled, organization_id, name,  title и stream_url\", function () {",
													"        // pm.expect(pm.response.json().length).to.eql(1)",
													"        // pm.expect(pm.response.json()[0].dvr_depth).to.eql(1.0)",
													"        // pm.expect(pm.response.json()[0].dvr_lock_days).to.eql(1)",
													"        // pm.expect(pm.response.json()[0].dvr_space).to.eql(1)",
													"        pm.expect(pm.response.json()[0].enabled).to.eql(true)",
													"        pm.expect(pm.response.json()[0].organization_id).to.eql(Number(pm.environment.get(\"organizationId_EVI\")))",
													"        pm.expect(pm.response.json()[0].name).to.eql(pm.environment.get(\"cam_id\"))",
													"        pm.expect(pm.response.json()[0].title).to.include(\"MQTT_CAM_simulator\")",
													"        pm.expect(pm.response.json()[0].stream_url).to.eql(pm.environment.get(\"rtmpStream\"))        ",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [8000]);",
													"// // иначе не проходит проверка по схеме"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/cameras",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка получения скриншотов",
							"item": [
								{
									"name": "Базовый функционал скриншотов",
									"item": [
										{
											"name": "Ссылка на скриншот с камеры (EVI_Cloud_Home) (preview.mp4)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try{",
															"    // setTimeout(function(){}, [12000]);",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"// Данный метод не поддерживается в текущей версии. Раскоментить как будет поддержан.",
															"// Раскоментировал, что то возвращается",
															"    pm.test(\"Проверка Content-Type в headers\", function () {",
															"        pm.expect( pm.response.headers.get('Content-Type')).to.eql(\"video/mp4\")",
															"    });",
															"}",
															"catch(e)",
															"{",
															"// выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, [15000]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{session_id_EVI_user}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "x-vsaas-session",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{EVI_host}}/{{cam_id}}/preview.mp4?token={{cameraToken}}",
													"host": [
														"{{EVI_host}}"
													],
													"path": [
														"{{cam_id}}",
														"preview.mp4"
													],
													"query": [
														{
															"key": "token",
															"value": "{{cameraToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Cкриншот с камеры  jpeg (EVI_Cloud_Home) (preview.jpeg)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try{",
															"    // setTimeout(function(){}, [12000]);",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"// Данный метод не поддерживается в текущей версии. Раскоментить как будет поддержан.",
															"// Раскоментировал, что то возвращается",
															"    pm.test(\"Проверка Content-Type в headers\", function () {",
															"        pm.expect( pm.response.headers.get('Content-Type')).to.eql(\"image/jpeg\")",
															"    });",
															"}",
															"catch(e)",
															"{",
															"// выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// setTimeout(function(){}, [15000]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{session_id_EVI_user}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "x-vsaas-session",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{EVI_host}}/{{cam_id}}/preview.jpeg?token={{cameraToken}}",
													"host": [
														"{{EVI_host}}"
													],
													"path": [
														"{{cam_id}}",
														"preview.jpeg"
													],
													"query": [
														{
															"key": "token",
															"value": "{{cameraToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Cкриншот с архива камеры  jpeg (EVI_Cloud_Home)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// try{",
															"//     // setTimeout(function(){}, [12000]);",
															"//     pm.test(\"Status code is 200\", function () {",
															"//         pm.response.to.have.status(200);",
															"//     });",
															"// // Данный метод не поддерживается в текущей версии. Раскоментить как будет поддержан.",
															"// // Раскоментировал, что то возвращается",
															"//     pm.test(\"Проверка Content-Type в headers\", function () {",
															"//         pm.expect( pm.response.headers.get('Content-Type')).to.eql(\"image/jpeg\")",
															"//     });",
															"// }",
															"// catch(e)",
															"// {",
															"// // выводим исключение в консоль",
															"//     console.log(e);",
															"// }"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Получаем текущее время",
															"var time_to = Math.round(Date.now())",
															"console.log(time_to)",
															"// Получаем дату",
															"var dateFormat = new Date(time_to);",
															"console.log(dateFormat)",
															"// Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
															"function zero_plus(num){",
															"    if (num.toString().length === 1){",
															"        num = 0 + num.toString()",
															"    }",
															"    return num",
															"}",
															"// Вытаскиваем из даты год",
															"pm.environment.set(\"Year\", dateFormat.getUTCFullYear());",
															"console.log(\"Year\", dateFormat.getUTCFullYear())",
															"// Вытаскиваем из даты месяц",
															"var Month = dateFormat.getUTCMonth() + 1",
															"Month = zero_plus(Month)",
															"pm.environment.set(\"Month\", Month);",
															"console.log(\"Month\", Month)",
															"//  Вытаскиваем из даты день",
															"var Day = dateFormat.getUTCDate()",
															"Day = zero_plus(Day)",
															"pm.environment.set(\"Day\", Day)",
															"console.log(\"Day\", Day)",
															"//  Вытаскиваем из даты часы",
															"var Hours = dateFormat.getUTCHours() ",
															"Hours = zero_plus(Hours)",
															"pm.environment.set(\"Hours\", Hours)",
															"console.log(\"Hours\", Hours)",
															"//  Вытаскиваем из даты минуты",
															"var Minutes  = dateFormat.getUTCMinutes()",
															"Minutes = zero_plus(Minutes)",
															"pm.environment.set(\"Minutes\", Minutes)",
															"console.log(\"Minutes\", Minutes)",
															"//  Вытаскиваем из даты секунды",
															"var Seconds = dateFormat.getUTCSeconds()",
															"Seconds = zero_plus(Seconds)",
															"pm.environment.set(\"Seconds\", Seconds)",
															"console.log(\"Seconds\", Seconds)",
															"// Чтобы получить скриншот, актуальный секунду назад ждем секунду",
															"setTimeout(function(){}, [1000]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{session_id_EVI_user}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "x-vsaas-session",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{EVI_host}}/{{cam_id}}/{{Year}}/{{Month}}/{{Day}}/{{Hours}}/{{Minutes}}/{{Seconds}}-preview.jpeg?token={{cameraToken}}",
													"host": [
														"{{EVI_host}}"
													],
													"path": [
														"{{cam_id}}",
														"{{Year}}",
														"{{Month}}",
														"{{Day}}",
														"{{Hours}}",
														"{{Minutes}}",
														"{{Seconds}}-preview.jpeg"
													],
													"query": [
														{
															"key": "token",
															"value": "{{cameraToken}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Функционал скриншотов охраны (iot)",
									"item": [
										{
											"name": "Подготовка контроллера и дома с другой тайм-зоной",
											"item": [
												{
													"name": "Подготовка контроллера",
													"item": [
														{
															"name": "Параметры контроллера",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Настройки применены\", function () {",
																			"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
																			"    if(pm.response.code == 400) {",
																			"        pm.expect(pm.response.text()).to.include(\"connected\");",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{zway_ctl_host}}/ctl/info",
																	"host": [
																		"{{zway_ctl_host}}"
																	],
																	"path": [
																		"ctl",
																		"info"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Получение типа платформы",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"  pm.response.to.have.status(200);",
																			"});",
																			"",
																			"let isSL10 = pm.response.json().version.includes(\"-b\");",
																			"",
																			"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
																			"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
																			"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"",
																			"postman.setEnvironmentVariable (\"current_time\", Date.now());"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{host}}/version",
																	"host": [
																		"{{host}}"
																	],
																	"path": [
																		"version"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Получение информации о платформе",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var sdk = require('postman-collection');",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"  pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
																			"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"",
																			"postman.setEnvironmentVariable (\"current_time\", Date.now());"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{host}}/info",
																	"host": [
																		"{{host}}"
																	],
																	"path": [
																		"info"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Создание датчика открытия двери",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Датчик присутствует\", function () {",
																			"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
																			"    if(pm.response.code == 400) {",
																			"        pm.expect(pm.response.text()).to.include(\"already exists\");",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"template\": \"sz_mct\",\n    \"nodeId\": 7\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{zway_ctl_host}}/devices/add",
																	"host": [
																		"{{zway_ctl_host}}"
																	],
																	"path": [
																		"devices",
																		"add"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Подключение контроллера",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
																			"});",
																			"// Чтобы платформа успела принять подключение контроллера",
																			"setTimeout(function(){}, [200]);"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"",
																			"postman.setEnvironmentVariable (\"current_time\", Date.now());"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{zway_ctl_host}}/ctl/connect",
																	"host": [
																		"{{zway_ctl_host}}"
																	],
																	"path": [
																		"ctl",
																		"connect"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Создать дом и добавить контроллер",
													"item": [
														{
															"name": "Создать дом с часовым поясом +9",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"postman.setEnvironmentVariable (\"houseId2\", pm.response.json().id);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{ACCESS_TOKEN}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"title\": \"Мой_дом_в_Якутске\",\n    \"address\": \"Улица Пушкина, дом Кукушкина\",\n    \"apartment\": \"666\",\n    \"timeZone\": \"Asia/Yakutsk\",\n    \"type\": \"HOUSE\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{host}}/houses",
																	"host": [
																		"{{host}}"
																	],
																	"path": [
																		"houses"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Подключение к WebSocket (абонент 1)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"  pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"setTimeout(function(){}, [5000]);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
																	"host": [
																		"{{websocket_proxy_host}}"
																	],
																	"path": [
																		"connect"
																	],
																	"query": [
																		{
																			"key": "host",
																			"value": "{{host}}/event_ws"
																		},
																		{
																			"key": "token",
																			"value": "{{ACCESS_TOKEN}}"
																		},
																		{
																			"key": "subprotocol",
																			"value": "SmartHome"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Добавление контроллера.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"try {",
																			"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
																			"setTimeout(function(){}, [2500]); ",
																			"}",
																			"catch(e) {",
																			"    // выводим исключение в консоль",
																			"    console.log(e);",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"postman.setEnvironmentVariable (\"current_time\", Date.now());",
																			"console.log(Date.now())"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{ACCESS_TOKEN}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"houseId\": \"{{houseId2}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{host}}/ctl",
																	"host": [
																		"{{host}}"
																	],
																	"path": [
																		"ctl"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Ожидание события добавления устройства",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"  pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&timeout=180000&C_newStatus=ONLINE",
																	"host": [
																		"{{websocket_proxy_host}}"
																	],
																	"path": [
																		"await"
																	],
																	"query": [
																		{
																			"key": "timeFrom",
																			"value": "{{current_time}}"
																		},
																		{
																			"key": "C_controllerId",
																			"value": "{{ctl_id}}"
																		},
																		{
																			"key": "C_type",
																			"value": "DEVICE_STATUS_CHANGE"
																		},
																		{
																			"key": "C_deviceInfo.nodeId",
																			"value": "ZWAVE_ELTEX_9",
																			"disabled": true
																		},
																		{
																			"key": "timeout",
																			"value": "180000"
																		},
																		{
																			"key": "C_newStatus",
																			"value": "ONLINE"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Отключение от WebSocket",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{websocket_proxy_host}}/disconnect",
																	"host": [
																		"{{websocket_proxy_host}}"
																	],
																	"path": [
																		"disconnect"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Подготовить пользователя и добавление камеры",
											"item": [
												{
													"name": "Получит пользователя видеоплатформы (На платформу)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {",
																	"    pm.environment.set(\"eviUser_in_iot\", pm.response.json().id);",
																	"",
																	"    pm.test(\" Проверка полей canAddAgentCamera, а также userId и eviUserId, enabled и отсутствия organizations\",  () => {",
																	"        pm.expect(pm.response.json().canAddAgentCamera).to.be.eql(false);",
																	"        pm.expect(pm.response.json().userId).to.be.eql(pm.environment.get(\"id\"));",
																	"        pm.expect(pm.response.json().eviUserId).to.be.eql(Number(pm.environment.get(\"EVI_UserId\")));",
																	"        pm.expect(pm.response.json().enabled).to.be.eql(true);",
																	"        pm.expect(pm.response.json().organizations).to.be.eql(null);",
																	"    });",
																	"",
																	"    pm.test(\" Проверка лимитов (cameraLimits) \",  () => {",
																	"        pm.expect(pm.response.json().cameraLimits.ELTEX.cameraLimit).to.be.eql(3);",
																	"        pm.expect(pm.response.json().cameraLimits.FLUSSONIC.cameraLimit).to.be.eql(0);",
																	"    });",
																	"    ",
																	"",
																	"} ",
																	"catch(e) {",
																	"    // выводим исключение в консоль",
																	"    console.log(e);",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{access_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/evi/users/{{id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"evi",
																"users",
																"{{id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Обновление пользователя EVI с сохранением данных на EVI. (запрос на платформу)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {",
																	"    var schema = {",
																	"        \"type\": \"object\",",
																	"        \"required\": [",
																	"            \"id\",",
																	"            \"userId\",",
																	"            \"eviUserId\",",
																	"            \"canEditOrganizations\",",
																	"            \"canViewOrganizations\",",
																	"            \"canEditSettings\",",
																	"            \"enabled\",",
																	"            \"organizations\",",
																	"            \"canAddAgentCamera\",",
																	"            \"cameraLimits\"",
																	"        ],",
																	"        \"additionalProperties\": true,",
																	"        \"properties\": {",
																	"            \"id\": {",
																	"                \"type\": \"string\"",
																	"            },",
																	"            \"userId\": {",
																	"                \"type\": \"string\"",
																	"            },",
																	"            \"eviUserId\": {",
																	"                \"type\": \"integer\"",
																	"            },",
																	"            \"canEditOrganizations\": {",
																	"                \"type\": \"boolean\"",
																	"            },",
																	"            \"canViewOrganizations\": {",
																	"                \"type\": \"boolean\"",
																	"            },",
																	"            \"canEditSettings\": {",
																	"                \"type\": \"boolean\"",
																	"            },",
																	"            \"enabled\": {",
																	"                \"type\": \"boolean\"",
																	"            },",
																	"            \"organizations\": {",
																	"                \"type\": \"null\"",
																	"            },",
																	"            \"canAddAgentCamera\": {",
																	"                \"type\": \"boolean\"",
																	"            },",
																	"            \"cameraLimits\": {",
																	"                \"type\": \"null\"",
																	"            }",
																	"        }",
																	"    };",
																	"    ",
																	"    var JsoneData = JSON.parse(responseBody);",
																	"    pm.test('Schema is valid', function () {        ",
																	"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
																	"    });",
																	"",
																	"    pm.test(\" Проверка полей canAddAgentCamera, а также id, userId и eviUserId, а также настроек (поля canEditOrganizations, canViewOrganizations, canEditSettings, enabled) и отсутствия organizations\",  () => {",
																	"        pm.expect(pm.response.json().canAddAgentCamera).to.be.eql(true);",
																	"        pm.expect(pm.response.json().id).to.be.eql(pm.environment.get(\"eviUser_in_iot\"));",
																	"        pm.expect(pm.response.json().userId).to.be.eql(pm.environment.get(\"id\"));",
																	"        pm.expect(pm.response.json().eviUserId).to.be.eql(Number(pm.environment.get(\"EVI_UserId\")));",
																	"        pm.expect(pm.response.json().canEditOrganizations).to.be.eql(true);",
																	"        pm.expect(pm.response.json().canViewOrganizations).to.be.eql(true);",
																	"        pm.expect(pm.response.json().canEditSettings).to.be.eql(true);",
																	"        pm.expect(pm.response.json().enabled).to.be.eql(true);",
																	"        pm.expect(pm.response.json().organizations).to.be.eql(null);",
																	"    });",
																	"    ",
																	"",
																	"} ",
																	"catch(e) {",
																	"    // выводим исключение в консоль",
																	"    console.log(e);",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{access_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"id\": \"{{eviUser_in_iot}}\",\n    \"userId\": \"{{id}}\",\n    \"eviUserId\": {{EVI_UserId}},\n    \"canEditOrganizations\": true,\n    \"canViewOrganizations\": true,\n    \"canEditSettings\": true,\n    \"enabled\": true,\n    \"canAddAgentCamera\": true,\n    \"cameraLimits\": {\n        \"ELTEX\": {\n            \"cameraLimit\": 3\n        },\n        \"FLUSSONIC\": {\n            \"cameraLimit\": 0\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/evi/users/{{id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"evi",
																"users",
																"{{id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Добавить еще одну камеру",
											"item": [
												{
													"name": "Узнать id контроллера",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {",
																	"    var jsonData = JSON.parse(responseBody);",
																	"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"} ",
																	"catch(e) {",
																	"    // выводим исключение в консоль",
																	"    console.log(e);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{access_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/ctl?houseTitle=Мой_дом_в_Якутске&includeVirtual=true&limit=20&offset=0&title=MQTT",
															"host": [
																"{{host}}"
															],
															"path": [
																"ctl"
															],
															"query": [
																{
																	"key": "houseTitle",
																	"value": "Мой_дом_в_Якутске"
																},
																{
																	"key": "includeVirtual",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "20"
																},
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "title",
																	"value": "MQTT"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получить логин и пароль для устройства",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {",
																	"",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    var jsonData = JSON.parse(responseBody);",
																	"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
																	"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
																	"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
																	"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
																	"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
																	"",
																	"    var scheme = {",
																	"        \"type\": \"object\",",
																	"        \"required\": [",
																	"            \"brokerURL\",",
																	"            \"generatedBrokerLogin\",",
																	"            \"generatedBrokerPassword\",",
																	"            \"generatedNodeId\"",
																	"        ],",
																	"        \"additionalProperties\": true,",
																	"        \"properties\": {",
																	"            \"brokerURL\": {",
																	"                \"type\": \"string\"",
																	"            },",
																	"            \"generatedBrokerLogin\": {",
																	"                \"type\": \"string\"",
																	"            },",
																	"            \"generatedBrokerPassword\": {",
																	"                \"type\": \"string\"",
																	"            },",
																	"            \"generatedNodeId\": {",
																	"                \"type\": \"string\"",
																	"            }",
																	"        }",
																	"    };",
																	"    pm.test('JSON is valid', function () {",
																	"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
																	"    });",
																	"",
																	"} ",
																	"catch(e) {",
																	"    // выводим исключение в консоль",
																	"    console.log(e);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(function(){}, [1000]);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo?deviceType=camera",
															"host": [
																"{{host}}"
															],
															"path": [
																"ctl",
																"{{controllerId}}",
																"devices",
																"generateMqttBrokerInfo"
															],
															"query": [
																{
																	"key": "deviceType",
																	"value": "camera"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Подключение к WebSocket (абонент 1) Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
															"host": [
																"{{websocket_proxy_host}}"
															],
															"path": [
																"connect"
															],
															"query": [
																{
																	"key": "host",
																	"value": "{{host}}/event_ws"
																},
																{
																	"key": "token",
																	"value": "{{ACCESS_TOKEN}}"
																},
																{
																	"key": "subprotocol",
																	"value": "SmartHome"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Запрос на симулятор (добавление устройства)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{res}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{cam_sim}}/add",
															"host": [
																"{{cam_sim}}"
															],
															"path": [
																"add"
															]
														}
													},
													"response": []
												},
												{
													"name": "Добавить mqtt устройство методом сопряжения.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    ",
																	"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
																	"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
																	"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId2\"));",
																	"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
																	"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
																	"        pm.expect(pm.response.json().title).to.include(\"guard_cam\");",
																	"        pm.expect(pm.response.json().muted).to.eql(false);",
																	"        pm.expect(pm.response.json().disabled).to.eql(false);",
																	"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
																	"    });",
																	"",
																	"    // var scheme = {",
																	"    //     \"type\": \"object\",",
																	"    //     \"required\": [",
																	"    //         \"id\",",
																	"    //         \"deviceType\",",
																	"    //         \"houseId\",",
																	"    //         \"nodeId\",",
																	"    //         \"controllerId\",",
																	"    //         \"title\",",
																	"    //         \"muted\",",
																	"    //         \"disabled\",",
																	"    //         \"networkAddress\",",
																	"    //         \"password\",",
																	"    //         \"serial\",",
																	"    //         \"status\",",
																	"    //         \"deviceLocation\",",
																	"    //         \"lastActivity\",",
																	"    //         \"version\",",
																	"    //         \"channels\",",
																	"    //         \"actions\",",
																	"    //         \"configs\",",
																	"    //         \"settings\",",
																	"    //         \"classType\"",
																	"    //     ],",
																	"    //     \"additionalProperties\": true,",
																	"    //     \"properties\": {",
																	"    //         \"id\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"deviceType\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"houseId\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"nodeId\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"controllerId\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"title\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"muted\": {",
																	"    //             \"type\": \"boolean\"",
																	"    //         },",
																	"    //         \"disabled\": {",
																	"    //             \"type\": \"boolean\"",
																	"    //         },",
																	"    //         \"networkAddress\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"password\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"serial\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"status\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"deviceLocation\": {",
																	"    //             \"type\": \"array\",",
																	"    //             \"additionalItems\": true,",
																	"    //             \"items\": {}",
																	"    //         },",
																	"    //         \"lastActivity\": {",
																	"    //             \"type\": \"number\"",
																	"    //         },",
																	"    //         \"version\": {",
																	"    //             \"type\": \"string\"",
																	"    //         },",
																	"    //         \"channels\": {",
																	"    //             \"type\": \"object\",",
																	"    //             \"required\": [],",
																	"    //             \"additionalProperties\": true,",
																	"    //             \"properties\": {}",
																	"    //         },",
																	"    //         \"actions\": {",
																	"    //             \"type\": \"object\",",
																	"    //             \"required\": [],",
																	"    //             \"additionalProperties\": true,",
																	"    //             \"properties\": {}",
																	"    //         },",
																	"    //         \"configs\": {",
																	"    //             \"type\": \"array\",",
																	"    //             \"additionalItems\": true,",
																	"    //             \"items\": {}",
																	"    //         },",
																	"    //         \"settings\": {",
																	"    //             \"type\": \"object\",",
																	"    //             \"required\": [",
																	"    //                 \"className\",",
																	"    //                 \"macAddress\",",
																	"    //                 // \"ssid\",",
																	"    //                 \"manufacturerId\",",
																	"    //                 \"productId\",",
																	"    //                 \"productTypeId\"",
																	"    //             ],",
																	"    //             \"additionalProperties\": true,",
																	"    //             \"properties\": {",
																	"    //                 \"className\": {",
																	"    //                     \"type\": \"string\"",
																	"    //                 },",
																	"    //                 \"macAddress\": {",
																	"    //                     \"type\": \"string\"",
																	"    //                 },",
																	"    //                 // \"ssid\": {",
																	"    //                 //     \"type\": \"null\"",
																	"    //                 // },",
																	"    //                 \"manufacturerId\": {",
																	"    //                     \"type\": \"string\"",
																	"    //                 },",
																	"    //                 \"productId\": {",
																	"    //                     \"type\": \"string\"",
																	"    //                 },",
																	"    //                 \"productTypeId\": {",
																	"    //                     \"type\": \"string\"",
																	"    //                 }",
																	"    //             }",
																	"    //         },",
																	"    //         \"classType\": {",
																	"    //             \"type\": \"string\"",
																	"    //         }",
																	"    //     }",
																	"    // };",
																	"    // pm.test('JSON is valid', function () {",
																	"    //     var jsonData = JSON.parse(responseBody);",
																	"    //     pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
																	"    // });",
																	"} ",
																	"catch(e) {",
																	"    // выводим исключение в консоль",
																	"    console.log(e);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"postman.setEnvironmentVariable (\"current_time\", Date.now());",
																	"console.log(Date.now())"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"guard_cam\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
															"host": [
																"{{host}}"
															],
															"path": [
																"ctl",
																"{{controllerId}}",
																"devices",
																"add",
																"mqtt",
																"pairing"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ожидание события добавления устройства Copy",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=ADD_ELTEX_CAMERA_QR&timeout=180000",
															"host": [
																"{{websocket_proxy_host}}"
															],
															"path": [
																"await"
															],
															"query": [
																{
																	"key": "timeFrom",
																	"value": "{{current_time}}"
																},
																{
																	"key": "C_deviceInfo.controllerId",
																	"value": "{{controllerId}}",
																	"disabled": true
																},
																{
																	"key": "C_type",
																	"value": "ADD_ELTEX_CAMERA_QR"
																},
																{
																	"key": "timeout",
																	"value": "180000"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Запрос камер пользователя (на платформу)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    for(let i in pm.response.json()){",
																	"        if(pm.response.json()[i].houseId === pm.environment.get(\"houseId2\")){",
																	"            pm.environment.set(\"guard_kam\", pm.response.json()[i].id);",
																	"        }            ",
																	"    }             ",
																	"} ",
																	"catch(e) {",
																	"    // выводим исключение в консоль",
																	"    console.log(e);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// setTimeout(function(){}, [10000]);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/video/cameras",
															"host": [
																"{{host}}"
															],
															"path": [
																"video",
																"cameras"
															]
														}
													},
													"response": []
												},
												{
													"name": "Отключение от WebSocket",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{websocket_proxy_host}}/disconnect",
															"host": [
																"{{websocket_proxy_host}}"
															],
															"path": [
																"disconnect"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Проверка ссылок на скриншоты в событиях сработки охраны",
											"item": [
												{
													"name": "Поставить дом на охрану",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(function(){}, [80000]);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{host}}/guard/devices/zone/arm/?houseId={{houseId2}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"guard",
																"devices",
																"zone",
																"arm",
																""
															],
															"query": [
																{
																	"key": "houseId",
																	"value": "{{houseId2}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Сработка датчика (Вскрытие)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"setTimeout(function(){}, 2000);",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	"postman.setEnvironmentVariable (\"current_time\", Date.now());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"value\": \"on\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{zway_ctl_host}}/devices/7/prop/0/tamper",
															"host": [
																"{{zway_ctl_host}}"
															],
															"path": [
																"devices",
																"7",
																"prop",
																"0",
																"tamper"
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение охранных событий",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"try {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    pm.test(\"Проверка источника скриншота (в .jpeg должна быть платформа, см. задачу #260140)\", function () {",
																	"        for (let i in pm.response.json().data) {",
																	"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
																	"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
																	"                let evi_host = pm.globals.get(\"EVI_host\").split('/', 4)[2].split(':', 2)[0];",
																	"                console.log(\"platform_host\", evi_host)",
																	"                console.log(\"platform_host\", platform_host)",
																	"                for (let key in pm.response.json().data[i].links[0]) {",
																	"                    if (key.includes(\"inkPhoto\")) {",
																	"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
																	"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(evi_host)",
																	"                        }",
																	"                        else{",
																	"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
																	"                        }",
																	"                    }",
																	"                }",
																	"            }",
																	"        }",
																	"    });",
																	"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
																	"    function time_converter(str_time_at_millis) {",
																	"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
																	"        function zero_plus(num) {",
																	"            if (num.toString().length === 1) {",
																	"                num = 0 + num.toString()",
																	"            }",
																	"            return num",
																	"        }",
																	"        // Получаем дату",
																	"        var dateFormat = new Date(Number(str_time_at_millis));",
																	"        // Составляем строку из даты (в формате как в url) точность до часов",
																	"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
																	"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
																	"            //  + zero_plus(dateFormat.getUTCMinutes()) ",
																	"            // + \"/\" + zero_plus(dateFormat.getUTCSeconds());",
																	"        console.log(\"dateNewFormat\", dateNewFormat);",
																	"        return dateNewFormat;",
																	"    }",
																	"    pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
																	"        for (let i in pm.response.json().data) {",
																	"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
																	"                let time = pm.response.json().data[i].created_at_millis",
																	"                let dateURLFormat = time_converter(time)",
																	"                for (let key in pm.response.json().data[i].links[0]) {",
																	"                    // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
																	"                    if (key.includes(\"inkVideo\")) {",
																	"                        pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
																	"                    }",
																	"                    if (key.includes(\"inkPhoto\")) {",
																	"                        if(key.includes(\"linkPhotoMp4\")) {",
																	"                            // Проверка времени в ссылках, должно быть корректное время в UTC",
																	"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
																	"                        }",
																	"                        else{",
																	"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpeg\")",
																	"                        }",
																	"                    }",
																	"                }",
																	"            }",
																	"        }",
																	"    });",
																	"",
																	"}",
																	"catch (e) {",
																	"    // выводим исключение в консоль",
																	"    console.log(e);",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(function(){}, [40000]);",
																	"// Чтобы были все ссылки",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/events/endless?limit=50&offset=0&fromMillis=9999999999999&language=ru&houseId={{houseId2}}&level=SECURITY",
															"host": [
																"{{host}}"
															],
															"path": [
																"events",
																"endless"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "50"
																},
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "fromMillis",
																	"value": "9999999999999"
																},
																{
																	"key": "language",
																	"value": "ru"
																},
																{
																	"key": "houseId",
																	"value": "{{houseId2}}"
																},
																{
																	"key": "level",
																	"value": "SECURITY"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Снять дом с охраны",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(function(){}, [1000]);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{host}}/guard/devices/zone/disarm/?houseId={{houseId2}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"guard",
																"devices",
																"zone",
																"disarm",
																""
															],
															"query": [
																{
																	"key": "houseId",
																	"value": "{{houseId2}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Удалить созданные в рамках тесткейса сущности",
											"item": [
												{
													"name": "Отключение контроллера",
													"item": [
														{
															"name": "Отключение контроллера от платформы",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"",
																			"postman.setEnvironmentVariable (\"current_time\", Date.now());"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{zway_ctl_host}}/ctl/disconnect",
																	"host": [
																		"{{zway_ctl_host}}"
																	],
																	"path": [
																		"ctl",
																		"disconnect"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Удаление датчика открытия двери",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Датчик присутствует\", function () {",
																			"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
																			"    if(pm.response.code == 400) {",
																			"        pm.expect(pm.response.text()).to.include(\"already exists\");",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{zway_ctl_host}}/devices/7",
																	"host": [
																		"{{zway_ctl_host}}"
																	],
																	"path": [
																		"devices",
																		"7"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Удалить контроллер",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {",
																			"    pm.response.to.have.status(204);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{access_token}}",
																			"type": "string"
																		}
																	]
																},
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{host}}/ctl/{{ctl_id}}/remove",
																	"host": [
																		"{{host}}"
																	],
																	"path": [
																		"ctl",
																		"{{ctl_id}}",
																		"remove"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Удаление дома",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(function(){}, [5000]);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{host}}/houses/{{houseId2}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"houses",
																"{{houseId2}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Проверка функционала ranges",
							"item": [
								{
									"name": "Генерация token'а пользователя для получения sessionId. Полученное в ответе тело отсылается в запрос на sessionId. (на EVI_Cloud_Home) Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"autologin_token\", jsonData.autologin_token);",
													"",
													"    // pm.environment.set(\"request_autologin\", pm.info.requestId);",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"autologin_token\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"autologin_token\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"    // postman.setNextRequest();",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"ATc1a2m3era\",\n    \"external_id\": \"{{id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/auth/generate-autologin-token",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"auth",
												"generate-autologin-token"
											]
										}
									},
									"response": []
								},
								{
									"name": "(user, ATc1a2m3era)Запрос на получение sessionId (на EVI_Cloud_Home) (sessionId в куках) Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    postman.setEnvironmentVariable (\"session_id_EVI_user\", pm.cookies.get('v2session'));",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "autologin_token",
													"value": "{{autologin_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/autologin",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"autologin"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка временных диапазонов записей  (EVI_Cloud_Home) (без параметров)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка значений полей start_time и end_time\", function () {",
													"        let time_to = String(pm.environment.get(\"time_to\"));",
													"        console.log(time_to.replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''), \"time_to - 5 знаков\")",
													"        console.log(String(Math.round(Date.now()/1000.0)).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''), \"Date.now() - 5 знаков\")",
													"        console.log(pm.response.json()[0].start_time, \"start_time\")",
													"        console.log(pm.response.json()[0].end_time, \"end_time\")",
													"        ",
													"        // Проверяем значение",
													"        pm.expect( String(pm.response.json()[0].end_time)).to.include(String(Math.round(Date.now()/1000.0)).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''));",
													"        pm.expect( String(pm.response.json()[0].start_time)).to.include(String(time_to).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''));",
													"    });",
													"    ",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"end_time\",",
													"                \"start_time\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"end_time\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"start_time\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [5000]);",
													"// Чтобы временной промежуток был создан на момент запроса"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/archive/{{cam_id}}/ranges",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"archive",
												"{{cam_id}}",
												"ranges"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение временных промежутков (на платформу) (без параметров)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка значений полей start_time и end_time\", function () {",
													"        let time_to = String(pm.environment.get(\"time_to\"));",
													"        console.log(time_to.replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''), \"time_to - 5 знаков\")",
													"        console.log(String(Math.round(Date.now()/1000.0)).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''), \"Date.now() -  5 знаков\")",
													"        console.log(pm.response.json()[0].start_time, \"start_time\")",
													"        console.log(pm.response.json()[0].end_time, \"end_time\")",
													"        ",
													"        // Проверяем значение",
													"        pm.expect( String(pm.response.json()[0].end_time)).to.include(String(Math.round(Date.now()/1000.0)).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''));",
													"        pm.expect( String(pm.response.json()[0].start_time)).to.include(String(time_to).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''));",
													"    });",
													"    ",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"end_time\",",
													"                \"start_time\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"end_time\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"start_time\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/player/{{cam_id}}/archive/ranges",
											"host": [
												"{{host}}"
											],
											"path": [
												"player",
												"{{cam_id}}",
												"archive",
												"ranges"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка временных диапазонов записей  (EVI_Cloud_Home) (с некорректными параметрами)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка размера возращаемого массива (должно быть 0) \", function () {",
													"        pm.expect( pm.response.json().length).to.eql(0);",
													"    });",
													"    ",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);",
													"pm.environment.set(\"incorrect_start_time\", Date.now());",
													"pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/archive/{{cam_id}}/ranges?start_time={{incorrect_start_time}}&end_time={{incorrect_end_time}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"archive",
												"{{cam_id}}",
												"ranges"
											],
											"query": [
												{
													"key": "start_time",
													"value": "{{incorrect_start_time}}"
												},
												{
													"key": "end_time",
													"value": "{{incorrect_end_time}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение временных промежутков (на платформу) (с некорректными параметрами)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка размера возращаемого массива (должно быть 0) \", function () {",
													"        pm.expect( pm.response.json().length).to.eql(0);",
													"    });",
													"    ",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);",
													"// pm.environment.set(\"incorrect_start_time\", Date.now());",
													"// pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/player/{{cam_id}}/archive/ranges?start_time={{incorrect_start_time}}&end_time={{incorrect_end_time}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"player",
												"{{cam_id}}",
												"archive",
												"ranges"
											],
											"query": [
												{
													"key": "start_time",
													"value": "{{incorrect_start_time}}"
												},
												{
													"key": "end_time",
													"value": "{{incorrect_end_time}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка временных диапазонов записей  (EVI_Cloud_Home) (с корректеными параметрами)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка значений полей start_time и end_time\", function () {",
													"        let time_to = String(pm.environment.get(\"time_to\"));",
													"        console.log(time_to.replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''), \"time_to - 5 знаков\")",
													"        console.log(String(Math.round(Date.now()/1000.0)).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''), \"Date.now() - 5 знаков\")",
													"        console.log(pm.response.json()[0].start_time, \"start_time\")",
													"        console.log(pm.response.json()[0].end_time, \"end_time\")",
													"        ",
													"        // Проверяем значение",
													"        pm.expect( String(pm.response.json()[0].end_time)).to.include(String(Math.round(Date.now()/1000.0)).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''));",
													"        pm.expect( String(pm.response.json()[0].start_time)).to.include(String(time_to).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''));",
													"    });",
													"    ",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"end_time\",",
													"                \"start_time\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"end_time\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"start_time\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);",
													"pm.environment.set(\"incorrect_start_time\", Date.now());",
													"pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/archive/{{cam_id}}/ranges?start_time=0&end_time=33242598802000",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"archive",
												"{{cam_id}}",
												"ranges"
											],
											"query": [
												{
													"key": "start_time",
													"value": "0"
												},
												{
													"key": "end_time",
													"value": "33242598802000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение временных промежутков (на платформу) (с корректными параметрами)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка значений полей start_time и end_time\", function () {",
													"        let time_to = String(pm.environment.get(\"time_to\"));",
													"        console.log(time_to.replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''), \"time_to - 5 знаков\")",
													"        console.log(String(Math.round(Date.now()/1000.0)).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''), \"Date.now() - 5 знаков\")",
													"        console.log(pm.response.json()[0].start_time, \"start_time\")",
													"        console.log(pm.response.json()[0].end_time, \"end_time\")",
													"        ",
													"        // Проверяем значение",
													"        pm.expect( String(pm.response.json()[0].end_time)).to.include(String(Math.round(Date.now()/1000.0)).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''));",
													"        pm.expect( String(pm.response.json()[0].start_time)).to.include(String(time_to).replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, '').replace(/.$/, ''));",
													"    });",
													"    ",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"end_time\",",
													"                \"start_time\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"end_time\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"start_time\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);",
													"// pm.environment.set(\"incorrect_start_time\", Date.now());",
													"// pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/player/{{cam_id}}/archive/ranges?start_time=0&end_time=33242598802000",
											"host": [
												"{{host}}"
											],
											"path": [
												"player",
												"{{cam_id}}",
												"archive",
												"ranges"
											],
											"query": [
												{
													"key": "start_time",
													"value": "0"
												},
												{
													"key": "end_time",
													"value": "33242598802000"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка функционала events",
							"item": [
								{
									"name": "Управление событиями у камер на временной шкале (EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"// Данный метод не поддерживается в текущей версии. Раскоментить как будет поддержан.",
													"// Что то возвращается, вероятно метод поддержан",
													"    pm.test(\"Проверка наличия id в ответе\", function () {",
													"        pm.expect( pm.response.json().length).to.eql(1)",
													"        pm.expect( typeof(pm.response.json()[0])).to.eql(\"string\")",
													"    });",
													"    ",
													"    // var schema =  {",
													"    //     \"type\": \"array\",",
													"    //     \"additionalItems\": true,",
													"    //     \"items\": {",
													"    //         \"type\": \"string\"",
													"    //     }",
													"    // }",
													"",
													"    // pm.test('Schema is valid', function () {",
													"    //     var JsoneData=JSON.parse(responseBody);",
													"    //     pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    // });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var time_to = Math.round(Date.now()/1000.0)",
													"pm.environment.set(\"time_events_start\", time_to);",
													"pm.environment.set(\"time_events_end\", time_to+1);",
													"console.log(time_to)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"camera_id\":\"{{cam_id}}\",\n    \"type\": \"motion\",\n    \"start_at\": {{time_events_start}},\n    \"end_at\": {{time_events_end}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/events",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка событий (EVI)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка значений полей play_url, record_type и utc_time\", function () {",
													"        // Проверяем в ссылке start_time",
													"        let time = \"start_time=\" + pm.environment.get(\"time_events_start\");        ",
													"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
													"        // Проверяем в ссылке end_time",
													"        time = \"end_time=\" + pm.environment.get(\"time_events_end\");    ",
													"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
													"",
													"        pm.expect( pm.response.json()[0].record_type).to.eql(\"video\");",
													"        time = pm.environment.get(\"time_events_start\") + \"000000\";",
													"        pm.expect( pm.response.json()[0].utc_time).to.eql(Number(time));",
													"    });",
													"    ",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"download_url\",",
													"                \"play_url\",",
													"                \"record_duration\",",
													"                \"record_size\",",
													"                \"record_type\",",
													"                \"utc_time\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"download_url\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"play_url\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"record_duration\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"record_size\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"record_type\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"utc_time\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [5000]);",
													"// Чтобы ивент был создан на момент запроса"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/events/{{cam_id}}/list",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"events",
												"{{cam_id}}",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка событий (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка значений полей play_url, record_type и utc_time\", function () {",
													"        // Проверяем в ссылке start_time",
													"        let time = \"start_time=\" + pm.environment.get(\"time_events_start\");        ",
													"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
													"        // Проверяем в ссылке end_time",
													"        time = \"end_time=\" + pm.environment.get(\"time_events_end\");    ",
													"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
													"",
													"        pm.expect( pm.response.json()[0].record_type).to.eql(\"video\");",
													"        time = pm.environment.get(\"time_events_start\") + \"000000\";",
													"        pm.expect( pm.response.json()[0].utc_time).to.eql(Number(time));",
													"    });",
													"    ",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"download_url\",",
													"                \"play_url\",",
													"                \"record_duration\",",
													"                \"record_size\",",
													"                \"record_type\",",
													"                \"utc_time\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"download_url\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"play_url\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"record_duration\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"record_size\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"record_type\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"utc_time\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/player/{{cam_id}}/events/list",
											"host": [
												"{{host}}"
											],
											"path": [
												"player",
												"{{cam_id}}",
												"events",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка событий (EVI) (с некорректными параметрами)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка размера возращаемого массива (должно быть 0) \", function () {",
													"        pm.expect( pm.response.json().length).to.eql(0);",
													"    });",
													"    ",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [500]);",
													"pm.environment.set(\"incorrect_start_time\", Date.now());",
													"pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/events/{{cam_id}}/list?start_time={{incorrect_start_time}}&end_time={{incorrect_end_time}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"events",
												"{{cam_id}}",
												"list"
											],
											"query": [
												{
													"key": "start_time",
													"value": "{{incorrect_start_time}}"
												},
												{
													"key": "end_time",
													"value": "{{incorrect_end_time}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка событий (на платформу) (с некорректными параметрами)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка размера возращаемого массива (должно быть 0) \", function () {",
													"        pm.expect( pm.response.json().length).to.eql(0);",
													"    });",
													"    ",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);",
													"pm.environment.set(\"incorrect_start_time\", Date.now());",
													"pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/player/{{cam_id}}/events/list?start_time={{incorrect_start_time}}&end_time={{incorrect_end_time}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"player",
												"{{cam_id}}",
												"events",
												"list"
											],
											"query": [
												{
													"key": "start_time",
													"value": "{{incorrect_start_time}}"
												},
												{
													"key": "end_time",
													"value": "{{incorrect_end_time}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка событий (EVI) (с корректными параметрами)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка значений полей play_url, record_type и utc_time\", function () {",
													"        // Проверяем в ссылке start_time",
													"        let time = \"start_time=\" + pm.environment.get(\"time_events_start\");        ",
													"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
													"        // Проверяем в ссылке end_time",
													"        time = \"end_time=\" + pm.environment.get(\"time_events_end\");    ",
													"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
													"",
													"        pm.expect( pm.response.json()[0].record_type).to.eql(\"video\");",
													"        time = pm.environment.get(\"time_events_start\") + \"000000\";",
													"        pm.expect( pm.response.json()[0].utc_time).to.eql(Number(time));",
													"    });",
													"    ",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"download_url\",",
													"                \"play_url\",",
													"                \"record_duration\",",
													"                \"record_size\",",
													"                \"record_type\",",
													"                \"utc_time\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"download_url\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"play_url\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"record_duration\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"record_size\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"record_type\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"utc_time\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);",
													"pm.environment.set(\"incorrect_start_time\", Date.now());",
													"pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/events/{{cam_id}}/list?start_time=0&end_time=33242598802000",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"events",
												"{{cam_id}}",
												"list"
											],
											"query": [
												{
													"key": "start_time",
													"value": "0"
												},
												{
													"key": "end_time",
													"value": "33242598802000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка событий (на платформу) (с корректными параметрами)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка значений полей play_url, record_type и utc_time\", function () {",
													"        // Проверяем в ссылке start_time",
													"        let time = \"start_time=\" + pm.environment.get(\"time_events_start\");        ",
													"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
													"        // Проверяем в ссылке end_time",
													"        time = \"end_time=\" + pm.environment.get(\"time_events_end\");    ",
													"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
													"",
													"        pm.expect( pm.response.json()[0].record_type).to.eql(\"video\");",
													"        time = pm.environment.get(\"time_events_start\") + \"000000\";",
													"        pm.expect( pm.response.json()[0].utc_time).to.eql(Number(time));",
													"    });",
													"    ",
													"    var schema =  {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"download_url\",",
													"                \"play_url\",",
													"                \"record_duration\",",
													"                \"record_size\",",
													"                \"record_type\",",
													"                \"utc_time\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"download_url\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"play_url\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"record_duration\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"record_size\": {",
													"                    \"type\": \"integer\"",
													"                },",
													"                \"record_type\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"utc_time\": {",
													"                    \"type\": \"integer\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/player/{{cam_id}}/events/list?start_time=0&end_time=33242598802000",
											"host": [
												"{{host}}"
											],
											"path": [
												"player",
												"{{cam_id}}",
												"events",
												"list"
											],
											"query": [
												{
													"key": "start_time",
													"value": "0"
												},
												{
													"key": "end_time",
													"value": "33242598802000"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка запросов связанных с добавлением MQTT камер (без добавления)",
							"item": [
								{
									"name": "Creating a home 2 (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId2\", jsonData.id);",
													"",
													"   var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"2\",\n    \"type\": \"HOUSE\",\n    \"address\": \"2\",\n    \"apartment\": \"2\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Узнать id  MQTT контроллера (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id);  ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=2&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "2"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Генерация QR кода для добавления камеры (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"    ",
													"    var schema = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// let broker = pm.globals.get(\"host\").split(\"/\", 3)[2] + \":8883\"",
													"// console.log(broker)",
													"// // pm.environment.set(\"broker\", broker);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление камеры Eltex по QR коду (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.set(\"id_camera_qr\", pm.response.json().id);",
													"",
													"    pm.test(\" Проверка полей deviceType, а также nodeId, controllerId и title, muted, disabled и status\",  () => {",
													"        pm.expect(pm.response.json().deviceType).to.be.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().nodeId).to.be.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.be.eql(pm.environment.get(\"controllerId\"));",
													"        pm.expect(pm.response.json().title).to.include(\"QR_KAM\");",
													"        pm.expect(pm.response.json().muted).to.be.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.be.eql(false);",
													"        pm.expect(pm.response.json().status).to.be.eql(\"VIRTUAL\");",
													"    });",
													"    ",
													"    // var schema = {",
													"    //     \"type\": \"object\",",
													"    //     \"required\": [",
													"    //         \"id\",",
													"    //         \"deviceType\",",
													"    //         \"houseId\",",
													"    //         \"nodeId\",",
													"    //         \"controllerId\",",
													"    //         \"title\",",
													"    //         \"muted\",",
													"    //         \"disabled\",",
													"    //         \"networkAddress\",",
													"    //         \"password\",",
													"    //         \"serial\",",
													"    //         \"status\",",
													"    //         \"deviceLocation\",",
													"    //         \"lastActivity\",",
													"    //         \"version\",",
													"    //         \"channels\",",
													"    //         \"configs\",",
													"    //         \"settings\",",
													"    //         \"cron\",",
													"    //         \"guardInclude\"",
													"    //     ],",
													"    //     \"additionalProperties\": true,",
													"    //     \"properties\": {",
													"    //         \"id\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"deviceType\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"houseId\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"nodeId\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"controllerId\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"title\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"muted\": {",
													"    //             \"type\": \"boolean\"",
													"    //         },",
													"    //         \"disabled\": {",
													"    //             \"type\": \"boolean\"",
													"    //         },",
													"    //         \"networkAddress\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"password\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"serial\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"status\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"deviceLocation\": {",
													"    //             \"type\": \"array\",",
													"    //             \"additionalItems\": true,",
													"    //             \"items\": {}",
													"    //         },",
													"    //         \"lastActivity\": {",
													"    //             \"type\": \"number\"",
													"    //         },",
													"    //         \"version\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"channels\": {",
													"    //             \"type\": \"object\",",
													"    //             \"required\": [],",
													"    //             \"additionalProperties\": true,",
													"    //             \"properties\": {}",
													"    //         },",
													"    //         \"configs\": {",
													"    //             \"type\": \"array\",",
													"    //             \"additionalItems\": true,",
													"    //             \"items\": {}",
													"    //         },",
													"    //         \"settings\": {",
													"    //             \"type\": \"object\",",
													"    //             \"required\": [",
													"    //                 \"className\",",
													"    //                 \"macAddress\",",
													"    //                 // \"ssid\",",
													"    //                 \"manufacturerId\",",
													"    //                 \"productId\",",
													"    //                 \"productTypeId\"",
													"    //             ],",
													"    //             \"additionalProperties\": true,",
													"    //             \"properties\": {",
													"    //                 \"className\": {",
													"    //                     \"type\": \"string\"",
													"    //                 },",
													"    //                 \"macAddress\": {",
													"    //                     \"type\": \"null\"",
													"    //                 },",
													"    //                 // \"ssid\": {",
													"    //                 //     \"type\": \"null\"",
													"    //                 // },",
													"    //                 \"manufacturerId\": {",
													"    //                     \"type\": \"string\"",
													"    //                 },",
													"    //                 \"productId\": {",
													"    //                     \"type\": \"string\"",
													"    //                 },",
													"    //                 \"productTypeId\": {",
													"    //                     \"type\": \"string\"",
													"    //                 }",
													"    //             }",
													"    //         },",
													"    //         \"cron\": {",
													"    //             \"type\": \"null\"",
													"    //         },",
													"    //         \"guardInclude\": {",
													"    //             \"type\": \"null\"",
													"    //         }",
													"    //     }",
													"    // };",
													"",
													"    // pm.test('Schema is valid', function () {",
													"    //     var JsoneData=JSON.parse(responseBody);",
													"    //     pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    // });",
													"",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n    \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n    \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n    \"nodeId\": \"{{generatedNodeId}}\",\n    \"title\": \"QR_KAM\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "whoami (user, ATc1a2m3era) (EVI_Cloud_Home) Узнать id организации",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проврка полей id, login, can_edit_settings, is_domain_admin,  \", function () {",
													"        pm.expect(pm.response.json().id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json().login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().can_edit_settings).to.eql(true)",
													"        pm.expect(pm.response.json().is_domain_admin).to.eql(false)",
													"    });",
													"",
													"    pm.test(\"Проверка organizations \", function () {",
													"        let org_exists = false;",
													"        for( let i in pm.response.json().organizations){",
													"            if (pm.response.json().organizations[i].id === Number(pm.environment.get(\"organizationId_EVI\"))){",
													"                org_exists = true;",
													"                pm.expect(pm.response.json().organizations[i].title).to.eql(\"ATc1a2m3era_organization\");",
													"            }",
													"            if (pm.response.json().organizations[i].title === \"2\"){",
													"                pm.environment.set(\"organizationId_EVI2\", pm.response.json().organizations[i].id);",
													"            }",
													"        }        ",
													"        pm.expect(org_exists).to.eql(true);",
													"    });",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/auth/whoami",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"auth",
												"whoami"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление MQTT камеры agent-activation-tokens  (EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.set(\"token_kam_evi\", pm.response.json().token);",
													"    // var schema = {",
													"    //     \"type\": \"object\",",
													"    //     \"required\": [",
													"    //         \"token\",",
													"    //         \"url\",",
													"    //         \"valid_till\"",
													"    //     ],",
													"    //     \"additionalProperties\": true,",
													"    //     \"properties\": {",
													"    //         \"token\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"url\": {",
													"    //             \"type\": \"string\"",
													"    //         },",
													"    //         \"valid_till\": {",
													"    //             \"type\": \"integer\"",
													"    //         }",
													"    //     }",
													"    // };",
													"",
													"    // pm.test('Schema is valid', function () {",
													"    //     var JsoneData=JSON.parse(responseBody);",
													"    //     pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    // });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"organization_id\": {{organizationId_EVI2}},\n    \"name\": \"{{id_camera_qr}}\",\n    \"title\": \"{{QR_KAM}}\",\n    \"static\": true,\n    \"preset_id\": 1,\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/agent-activation-tokens",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"agent-activation-tokens"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отправка ивента об успешном добавлении камеры на платформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var time_to = Math.round(Date.now())",
													"pm.environment.set(\"time_to\", Math.round(Date.now()));",
													"console.log(time_to)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"eventid\": 71,\n        \"motionid\": \"1\",\n        \"loglevel\":\"info\",\n        \"utcMs\": {{time_to}},\n        \"token\": \"{{token_kam_evi}}\",\n        \"media\": \"media\",\n        \"event\": \"agent_connected\"\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/evi/event",
											"host": [
												"{{host}}"
											],
											"path": [
												"evi",
												"event"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка функционала удаления",
							"item": [
								{
									"name": "Удаление камеры  (EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"success = true ?\", function () {",
													"        pm.expect(pm.response.json().success).to.eql(true)       ",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/cameras/{{cam_id}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"cameras",
												"{{cam_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление организации (на EVI_Cloud_Home) (создать организации с одинковым title задача 253807 )",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"organizationId_EVI2\", jsonData.id);",
													"",
													"    pm.test(\"Проврка полей dvr_limit, owner/id, owner/login, title, user_limit, camera_limit\", function () {",
													"        pm.expect(pm.response.json().dvr_limit).to.eql(1000)",
													"        pm.expect(pm.response.json().owner.id).to.eql(Number(pm.environment.get(\"EVI_UserId\")))",
													"        pm.expect(pm.response.json().owner.login).to.eql(\"ATc1a2m3era\")",
													"        pm.expect(pm.response.json().title).to.eql(\"ATc1a2m3era_organization\")",
													"        pm.expect(pm.response.json().user_limit).to.eql(3)",
													"        pm.expect(pm.response.json().camera_limit).to.eql(100)",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"dvr_limit\",",
													"            \"owner\",",
													"            \"title\",",
													"            \"domain\",",
													"            \"user_limit\",",
													"            \"camera_limit\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"dvr_limit\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"owner\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"id\",",
													"                    \"login\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"login\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"domain\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"title\",",
													"                    \"id\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"title\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    }",
													"                }",
													"            },",
													"            \"user_limit\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"camera_limit\": {",
													"                \"type\": \"integer\"",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{session_id_EVI_user}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-vsaas-session",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dvr_limit\": 1000,\n    \"title\": \"ATc1a2m3era_organization\",\n    \"owner_id\": {{EVI_UserId}},\n    \"user_limit\": 3,\n    \"camera_limit\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление организации (EVI_Cloud_Home)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"success = true ?\", function () {",
													"        pm.expect(pm.response.json().success).to.eql(true)       ",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "force",
												"value": "1",
												"type": "text"
											},
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/{{organizationId_EVI}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												"{{organizationId_EVI}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление пользователя с EVI_Cloud_Home (у пользователя есть организация его можно удалить ? задача 253326 )",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"success = true ?\", function () {",
													"        pm.expect(pm.response.json().success).to.eql(true)       ",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/users/{{EVI_UserId}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"users",
												"{{EVI_UserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос организации (на EVI_Cloud_Home) (проверка удаления и кода ошибки задача 253951 )",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"    });",
													"  ",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/organizations/{{organizationId_EVI2}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"organizations",
												"{{organizationId_EVI2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка кода ошибки в случае когда идентификатор не найден (задача 253328)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}",
													"catch(e)",
													"{",
													"// выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vsaas-Api-Key",
												"value": "000000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{EVI_host}}/vsaas/api/v2/users/{{EVI_UserId}}",
											"host": [
												"{{EVI_host}}"
											],
											"path": [
												"vsaas",
												"api",
												"v2",
												"users",
												"{{EVI_UserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "удалить пользователя с платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Пользователь удален (код 204)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}