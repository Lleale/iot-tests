{
	"info": {
		"_postman_id": "72fd539a-d1f8-4c2b-aec9-7e163a997de4",
		"name": "automation-api-controller",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Создать пользователя и т.д.",
			"item": [
				{
					"name": "/oauth/token(admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"var admin_js = {",
									"\"required\": [",
									"        \"access_token\",",
									"        \"token_type\",",
									"        \"refresh_token\",",
									"        \"expires_in\",",
									"        \"scope\"",
									"    ],",
									"    \"properties\": {",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"token_type\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"refresh_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"expires_in\": {",
									"            \"type\": \"integer\",",
									"        },",
									"        \"scope\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"};",
									"pm.test('JSON is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
									"});",
									"",
									"} ",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test18plat34Form",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a user (user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable (\"id\", jsonData.id);",
									"pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"});",
									"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json().id).to.string    ",
									"});",
									"    pm.test(\"Пользователь создан\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"} ",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/oauth/token (user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
									"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
									"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains access token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"access_token\");",
									"});",
									"",
									"var admin_js = {",
									"\"required\": [",
									"        \"access_token\",",
									"        \"token_type\",",
									"        \"refresh_token\",",
									"        \"expires_in\",",
									"        \"scope\"",
									"    ],",
									"    \"properties\": {",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"token_type\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"refresh_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"expires_in\": {",
									"            \"type\": \"integer\",",
									"        },",
									"        \"scope\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"};",
									"pm.test('JSON is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
									"});",
									"} ",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "123",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/oauth/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating a home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
									"",
									"   var schema =  {",
									"       \"required\": [",
									"        \"id\",",
									"        \"variables\",",
									"        \"dashboardItems\",",
									"        \"houseGroups\",",
									"        \"guards\",",
									"        \"title\",",
									"        \"ownerId\",",
									"        \"address\",",
									"        \"apartment\",",
									"        \"language\",",
									"        \"timeZone\",",
									"        \"type\",",
									"        \"startTime\",",
									"        \"guardStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"variables\": {",
									"            \"type\": \"array\",",
									"        },",
									"        \"dashboardItems\": {",
									"            \"type\": \"array\",",
									"        },",
									"        \"houseGroups\": {",
									"            \"type\": \"array\",",
									"",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"anyOf\": [",
									"                    {",
									"                        \"type\": \"object\",",
									"",
									"                        \"required\": [",
									"                            \"id\",",
									"                            \"houseId\",",
									"                            \"title\",",
									"                            \"parentId\",",
									"                            \"plan\",",
									"                            \"childList\",",
									"                            \"deviceList\",",
									"                            \"cameraList\"",
									"                        ],",
									"                        \"properties\": {",
									"                            \"id\": {",
									"                                \"type\": \"string\",",
									"    ",
									"                            },",
									"                            \"houseId\": {",
									"                                \"type\": \"string\",",
									"                            },",
									"                            \"title\": {",
									"                                \"type\": \"string\",",
									"",
									"                            },",
									"                            \"parentId\": {",
									"                                \"type\": \"string\",",
									"",
									"                            },",
									"                            \"plan\": {",
									"                                \"type\": \"object\",",
									"",
									"                                \"required\": [",
									"                                    \"id\",",
									"                                    \"imageId\",",
									"                                    \"zones\",",
									"                                    \"points\"",
									"                                ],",
									"                                \"properties\": {",
									"                                    \"id\": {",
									"                                        \"type\": \"string\",",
									"",
									"                                    },",
									"                                    \"imageId\": {",
									"                                        \"type\": \"string\",",
									"",
									"                                    },",
									"                                    \"zones\": {",
									"                                        \"type\": \"object\",",
									"",
									"                                        \"required\": [],",
									"                                        \"additionalProperties\": true",
									"                                    },",
									"                                    \"points\": {",
									"                                        \"type\": \"object\",",
									"",
									"                                        \"required\": [],",
									"                                        \"additionalProperties\": true",
									"                                    }",
									"                                },",
									"                                \"additionalProperties\": true",
									"                            },",
									"                            \"childList\": {",
									"                                \"type\": \"array\",",
									"",
									"                                \"additionalItems\": true,",
									"",
									"                            },",
									"                            \"deviceList\": {",
									"                                \"type\": \"array\",",
									"",
									"                            },",
									"                            \"cameraList\": {",
									"                                \"type\": \"array\",",
									"",
									"                            }",
									"                        },",
									"                        \"additionalProperties\": true",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"guards\": {",
									"            \"type\": \"array\",",
									"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\",",
									"",
									"        },",
									"        \"ownerId\": {",
									"            \"type\": \"string\",",
									"",
									"        },",
									"        \"address\": {",
									"            \"type\": \"string\",",
									"",
									"        },",
									"        \"apartment\": {",
									"            \"type\": \"string\",",
									"",
									"        },",
									"        \"language\": {",
									"            \"type\": \"string\",",
									"",
									"        },",
									"        \"timeZone\": {",
									"            \"type\": \"string\",",
									"",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"",
									"        },",
									"        \"startTime\": {",
									"            \"type\": \"integer\",",
									"",
									"        },",
									"        \"guardStatus\": {",
									"           ",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"",
									"",
									"",
									"    pm.test('Schema is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление контроллера.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
									"    setTimeout(function(){}, [1000]); ",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"RG-5440G-WZ\",\n        \"ctlMac\": \"{{RG-5440G-WZ_mac}}\",\n        \"offline\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ctl",
							"host": [
								"{{host}}"
							],
							"path": [
								"ctl"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "automation-api-controller",
			"item": [
				{
					"name": "Получить все pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"    var schema = {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"patternsByCategory\"",
									"        ],",
									"        \"additionalProperties\": true,",
									"        \"properties\": {",
									"            \"patternsByCategory\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"LIGHT_CONTROL\",",
									"                    \"DEVICE_CONTROL\",",
									"                    \"CLIMATE_CONTROL\",",
									"                    \"GUARD_AND_MONITORING\"",
									"                ],",
									"                \"additionalProperties\": true,",
									"                \"properties\": {",
									"                    \"LIGHT_CONTROL\": {",
									"                        \"type\": \"object\",",
									"                        \"required\": [",
									"                            \"icon\",",
									"                            \"name\",",
									"                            \"description\",",
									"                            \"patterns\"",
									"                        ],",
									"                        \"additionalProperties\": true,",
									"                        \"properties\": {",
									"                            \"icon\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"name\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"description\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"patterns\": {",
									"                                \"type\": \"array\",",
									"                                \"additionalItems\": true,",
									"                                \"items\": {",
									"                                    \"type\": \"object\",",
									"                                    \"required\": [",
									"                                        \"patternId\",",
									"                                        \"category\",",
									"                                        \"icon\",",
									"                                        \"title\",",
									"                                        \"description\",",
									"                                        \"availability\"",
									"                                    ],",
									"                                    \"additionalProperties\": true,",
									"                                    \"properties\": {",
									"                                        \"patternId\": {",
									"                                            \"type\": \"string\"",
									"                                        },",
									"                                        \"category\": {",
									"                                            \"type\": \"string\"",
									"                                        },",
									"                                        \"icon\": {",
									"                                            \"type\": \"string\"",
									"                                        },",
									"                                        \"title\": {",
									"                                            \"type\": \"string\"",
									"                                        },",
									"                                        \"description\": {",
									"                                            \"type\": \"string\"",
									"                                        },",
									"                                        \"availability\": {",
									"                                            \"type\": \"object\",",
									"                                            \"required\": [",
									"                                                \"available\"",
									"                                            ],",
									"                                            \"additionalProperties\": true,",
									"                                            \"properties\": {",
									"                                                \"available\": {",
									"                                                    \"type\": \"boolean\"",
									"                                                }",
									"                                            }",
									"                                        }",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                    },",
									"                    \"DEVICE_CONTROL\": {",
									"                        \"type\": \"object\",",
									"                        \"required\": [",
									"                            \"icon\",",
									"                            \"name\",",
									"                            \"description\",",
									"                            \"patterns\"",
									"                        ],",
									"                        \"additionalProperties\": true,",
									"                        \"properties\": {",
									"                            \"icon\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"name\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"description\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"patterns\": {",
									"                                \"type\": \"null\"",
									"                            }",
									"                        }",
									"                    },",
									"                    \"CLIMATE_CONTROL\": {",
									"                        \"type\": \"object\",",
									"                        \"required\": [",
									"                            \"icon\",",
									"                            \"name\",",
									"                            \"description\",",
									"                            \"patterns\"",
									"                        ],",
									"                        \"additionalProperties\": true,",
									"                        \"properties\": {",
									"                            \"icon\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"name\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"description\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"patterns\": {",
									"                                \"type\": \"null\"",
									"                            }",
									"                        }",
									"                    },",
									"                    \"GUARD_AND_MONITORING\": {",
									"                        \"type\": \"object\",",
									"                        \"required\": [",
									"                            \"icon\",",
									"                            \"name\",",
									"                            \"description\",",
									"                            \"patterns\"",
									"                        ],",
									"                        \"additionalProperties\": true,",
									"                        \"properties\": {",
									"                            \"icon\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"name\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"description\": {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"patterns\": {",
									"                                \"type\": \"null\"",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    };",
									"",
									"    pm.test('Schema is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"    ",
									"",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto/patterns?language=ru",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto",
								"patterns"
							],
							"query": [
								{
									"key": "language",
									"value": "ru"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Вызов wizard (отправляется в начале создания автоматизации)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.environment.set(\"step1_auto\", JSON.stringify(pm.response.json().steps[0].parameters[0].selectableItems));",
									"    pm.environment.set(\"step3_auto\", JSON.stringify(pm.response.json().steps[2].parameters[0].selectableItems[0]));",
									"",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto/patterns/ENABLE_LIGHT_BY_MOTION/wizard?language=ru",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto",
								"patterns",
								"ENABLE_LIGHT_BY_MOTION",
								"wizard"
							],
							"query": [
								{
									"key": "language",
									"value": "ru"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создать автоматизацию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"    pm.environment.set(\"automationId\", pm.response.json().id);",
									"",
									"    var schema = {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"id\",",
									"            \"patternId\",",
									"            \"type\",",
									"            \"houseId\",",
									"            \"name\",",
									"            \"icons\",",
									"            \"enabled\"",
									"        ],",
									"        \"additionalProperties\": true,",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"patternId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"type\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"houseId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"icons\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"enabled\": {",
									"                \"type\": \"boolean\"",
									"            }",
									"        }",
									"    };",
									"",
									"    pm.test('Schema is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Проверка полей patternId, type, houseId, name и enabled\",() => {",
									"        pm.expect(pm.response.json().patternId).to.eql(\"ENABLE_LIGHT_BY_MOTION\");",
									"        pm.expect(pm.response.json().type).to.eql(\"LIGHT_CONTROL\");",
									"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));   ",
									"        pm.expect(pm.response.json().name).to.eql(\"Включение освещения по движению\");",
									"        pm.expect(pm.response.json().enabled).to.eql(true);        ",
									"    });",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patternId\": \"ENABLE_LIGHT_BY_MOTION\",\n    \"allStepsResponse\": {\n        \"1\": {\n            \"stepId\": \"1\",\n            \"parameters\": {\n                \"lightSelector\": {\n                    \"type\": \"CHECK_BOX_LIST\",\n                    \"selectedItems\": {{step1_auto}}\n                }\n            }\n        },\n        \"2\": {\n            \"stepId\": \"2\",\n            \"parameters\": {\n                \"activationDuration\": {\n                    \"type\": \"DELAY_SECONDS\",\n                    \"value\": 10\n                }\n            }\n        },\n        \"3\": {\n            \"stepId\": \"3\",\n            \"parameters\": {\n                \"motionSensorSelector\": {\n                    \"type\": \"DROP_DOWN_LIST\",\n                    \"selectedItem\": {{step3_auto}}\n                }\n            }\n        },\n        \"4\": {\n            \"stepId\": \"4\",\n            \"parameters\": {}\n        }\n    },\n    \"automationName\": \"Включение освещения по движению\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить все автоматизации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"    var schema = {",
									"        \"type\": \"array\",",
									"        \"additionalItems\": true,",
									"        \"items\": {",
									"            \"type\": \"object\",",
									"            \"required\": [",
									"                \"id\",",
									"                \"patternId\",",
									"                \"type\",",
									"                \"houseId\",",
									"                \"name\",",
									"                \"icons\",",
									"                \"enabled\"",
									"            ],",
									"            \"additionalProperties\": true,",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"patternId\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"type\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"houseId\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"icons\": {",
									"                    \"type\": \"null\"",
									"                },",
									"                \"enabled\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            }",
									"        }",
									"    };",
									"",
									"    pm.test('Schema is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Проверка полей patternId, type, houseId, name и enabled, id, а также провека количества автоматизаций\",() => {",
									"        pm.expect(pm.response.json()[0].patternId).to.eql(\"ENABLE_LIGHT_BY_MOTION\");",
									"        pm.expect(pm.response.json()[0].type).to.eql(\"LIGHT_CONTROL\");",
									"        pm.expect(pm.response.json()[0].houseId).to.eql(pm.environment.get(\"houseId\"));   ",
									"        pm.expect(pm.response.json()[0].name).to.eql(\"Включение освещения по движению\");",
									"        pm.expect(pm.response.json()[0].enabled).to.eql(true);",
									"        pm.expect(pm.response.json()[0].id).to.eql(pm.environment.get(\"automationId\"));",
									"",
									"        pm.expect(pm.response.json().length).to.eql(1);",
									"    });",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отключить автоматизацию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"    var schema = {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"id\",",
									"            \"patternId\",",
									"            \"type\",",
									"            \"houseId\",",
									"            \"name\",",
									"            \"icons\",",
									"            \"enabled\"",
									"        ],",
									"        \"additionalProperties\": true,",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"patternId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"type\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"houseId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"icons\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"enabled\": {",
									"                \"type\": \"boolean\"",
									"            }",
									"        }",
									"    };",
									"",
									"    pm.test('Schema is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Проверка полей id, patternId, type, houseId, name\",() => {",
									"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"automationId\"));",
									"        pm.expect(pm.response.json().patternId).to.eql(\"ENABLE_LIGHT_BY_MOTION\");",
									"        pm.expect(pm.response.json().type).to.eql(\"LIGHT_CONTROL\");",
									"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));   ",
									"        pm.expect(pm.response.json().name).to.eql(\"Включение освещения по движению\"); ",
									"    });",
									"    pm.test(\"Проверка поля enabled (автоматизация отключилась?)\",() => {",
									"        pm.expect(pm.response.json().enabled).to.eql(false);        ",
									"    });",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto/{{automationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto",
								"{{automationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить автоматизацию по id (вызов визарада)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"    pm.test(\"Проверка всех полей (сравнение всех полей с образцом)\",  () => {",
									"    var body = {",
									"        \"patternId\": \"ENABLE_LIGHT_BY_MOTION\",",
									"        \"category\": \"LIGHT_CONTROL\",",
									"        \"wizardType\": \"BY_ONE_REQUEST\",",
									"        \"icon\": \"enableLightByMotionIcon\",",
									"        \"title\": \"Включение освещения по движению\",",
									"        \"description\": \"В зависимости от состояния сенсора датчика движения включается освещение\",",
									"        \"steps\": [",
									"            {",
									"                \"patternId\": \"ENABLE_LIGHT_BY_MOTION\",",
									"                \"stepId\": \"1\",",
									"                \"icon\": \"enableLightByMotionStep1Icon\",",
									"                \"title\": \"Выберите устройства отвечающие за освещение\",",
									"                \"description\": \"На данном шаге из списка доступных устройств освещения, выбираются выключатели необходимые пользователю\",",
									"                \"parameters\": [",
									"                    {",
									"                        \"type\": \"CHECK_BOX_LIST\",",
									"                        \"id\": \"lightSelector\",",
									"                        \"name\": \"Устройства освещения\",",
									"                        \"hint\": \"В качестве устройств освещения могут быть выбраны умное реле или розетка с подключенными осветительными приборами\",",
									"                        \"required\": true,",
									"                        \"selectableItems\": [                            ",
									"                        ],",
									"                        \"multiple\": true",
									"                    }",
									"                ],",
									"                \"responseTemplate\": {",
									"                    \"stepId\": \"1\",",
									"                    \"parameters\": {",
									"                        \"lightSelector\": {",
									"                            \"type\": \"CHECK_BOX_LIST\",",
									"                            \"selectedItems\": [                                ",
									"                            ],",
									"                            \"type\": \"CHECK_BOX_LIST\"",
									"                        }",
									"                    }",
									"                }",
									"            },",
									"            {",
									"                \"patternId\": \"ENABLE_LIGHT_BY_MOTION\",",
									"                \"stepId\": \"2\",",
									"                \"icon\": \"enableLightByMotionStep2Icon\",",
									"                \"title\": \"Выберите время включения освещения\",",
									"                \"description\": \"На данном шаге предлагается временной интервал запуска автоматизации для включения освещения (не обязательно)\",",
									"                \"parameters\": [",
									"                    {",
									"                        \"type\": \"DELAY_SECONDS\",",
									"                        \"id\": \"activationDuration\",",
									"                        \"name\": \"Время выключения освещения\",",
									"                        \"hint\": \"Выберите желаемый интервал запуска автоматизации\",",
									"                        \"required\": true,",
									"                        \"min\": 10,",
									"                        \"max\": 3600",
									"                    }",
									"                ],",
									"                \"responseTemplate\": {",
									"                    \"stepId\": \"2\",",
									"                    \"parameters\": {",
									"                        \"activationDuration\": {",
									"                            \"type\": \"DELAY_SECONDS\",",
									"                            \"value\": 10,",
									"                            \"type\": \"DELAY_SECONDS\"",
									"                        }",
									"                    }",
									"                }",
									"            },",
									"            {",
									"                \"patternId\": \"ENABLE_LIGHT_BY_MOTION\",",
									"                \"stepId\": \"3\",",
									"                \"icon\": \"enableLightByMotionStep3Icon\",",
									"                \"title\": \"Выберите датчик движения\",",
									"                \"description\": \"На данном шаге из списка датчиков движения, выбирается необходимый пользователю\",",
									"                \"parameters\": [",
									"                    {",
									"                        \"type\": \"DROP_DOWN_LIST\",",
									"                        \"id\": \"motionSensorSelector\",",
									"                        \"name\": \"Датчик движения\",",
									"                        \"hint\": \"В качестве датчика движения может быть выбрано одно устройство с сенсором движения\",",
									"                        \"required\": true,",
									"                        \"selectableItems\": [",
									"                        ]",
									"                    }",
									"                ],",
									"                \"responseTemplate\": {",
									"                    \"stepId\": \"3\",",
									"                    \"parameters\": {",
									"                        \"motionSensorSelector\": {",
									"                            \"type\": \"DROP_DOWN_LIST\",",
									"                            \"selectedItem\": {",
									"                                \"type\": \"\",",
									"                                \"title\": \"\",",
									"                                \"id\": \"\"",
									"                            },",
									"                            \"type\": \"DROP_DOWN_LIST\"",
									"                        }",
									"                    }",
									"                }",
									"            },",
									"            {",
									"                \"patternId\": \"ENABLE_LIGHT_BY_MOTION\",",
									"                \"stepId\": \"4\",",
									"                \"icon\": \"enableLightByMotionStep4Icon\",",
									"                \"title\": \"Дополнительные ограничения\",",
									"                \"description\": \"Какие-то дополнительные ограничения\",",
									"                \"parameters\": [",
									"                    {",
									"                        \"type\": \"TIME_SCHEDULE\",",
									"                        \"id\": \"timeSchedule\",",
									"                        \"name\": \"Расписание выполнения\",",
									"                        \"hint\": \"Задайте время в которое автоматизация будет активна\",",
									"                        \"required\": false,",
									"                        \"availableTypes\": [",
									"                            \"PERIODIC\",",
									"                            \"MANUAL\"",
									"                        ]",
									"                    }",
									"                ],",
									"                \"responseTemplate\": {",
									"                    \"stepId\": \"4\",",
									"                    \"parameters\": {}",
									"                }",
									"            }",
									"        ],",
									"        \"automationName\": \"Включение освещения по движению\"",
									"    };",
									"    function compareValues(a, b) {",
									"",
									"        //if a and b aren't the same type, they can't be equal",
									"        if (typeof a !== typeof b) {",
									"            return false;",
									"        }",
									"",
									"        if (typeof a === 'object') {",
									"            var keysA = Object.keys(a).sort(),",
									"                keysB = Object.keys(b).sort();",
									"",
									"            //if a and b are objects with different no of keys, unequal",
									"            if (keysA.length !== keysB.length) {",
									"                return false;",
									"            }",
									"",
									"            //if keys aren't all the same, unequal",
									"            if (!keysA.every(function(k, i) { return k === keysB[i];})) {",
									"                return false;",
									"            }",
									"",
									"            //recurse on the values for each key",
									"            return keysA.every(function(key) {",
									"                //if we made it here, they have identical keys",
									"                return compareValues(a[key], b[key]);",
									"            });",
									"",
									"        //for primitives just use a straight up check",
									"        } else {",
									"            return a === b;",
									"        }",
									"    }",
									"",
									"    let step1_auto = JSON.parse(pm.environment.get(\"step1_auto\"))",
									"    body.steps[0].parameters[0].selectableItems.push(step1_auto[0])",
									"    body.steps[0].parameters[0].selectableItems.push(step1_auto[1])",
									"    body.steps[0].responseTemplate.parameters.lightSelector.selectedItems.push(step1_auto[0])",
									"    body.steps[0].responseTemplate.parameters.lightSelector.selectedItems.push(step1_auto[1])",
									"    let step3_auto = JSON.parse(pm.environment.get(\"step3_auto\"))",
									"    body.steps[2].parameters[0].selectableItems.push(step3_auto)",
									"    body.steps[2].responseTemplate.parameters.motionSensorSelector.selectedItem[\"type\"] = step3_auto[\"type\"]",
									"    body.steps[2].responseTemplate.parameters.motionSensorSelector.selectedItem.title = step3_auto.title",
									"    body.steps[2].responseTemplate.parameters.motionSensorSelector.selectedItem.id = step3_auto.id",
									"",
									"    if(compareValues(body,pm.response.json()) != true){",
									"        body.steps[0].parameters[0].selectableItems.reverse()",
									"    }",
									"    pm.expect(compareValues(body,pm.response.json())).to.be.true;",
									"",
									"});",
									"   ",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto/{{automationId}}/wizard",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto",
								"{{automationId}}",
								"wizard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Редактировать автоматизацию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"    var schema = {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"id\",",
									"            \"patternId\",",
									"            \"type\",",
									"            \"houseId\",",
									"            \"name\",",
									"            \"icons\",",
									"            \"enabled\"",
									"        ],",
									"        \"additionalProperties\": true,",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"patternId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"type\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"houseId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"icons\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"enabled\": {",
									"                \"type\": \"boolean\"",
									"            }",
									"        }",
									"    };",
									"",
									"    pm.test('Schema is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Проверка полей id, patternId, type, houseId, name и enabled\",() => {",
									"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"automationId\"));",
									"        pm.expect(pm.response.json().patternId).to.eql(\"ENABLE_LIGHT_BY_MOTION\");",
									"        pm.expect(pm.response.json().type).to.eql(\"LIGHT_CONTROL\");",
									"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));   ",
									"        pm.expect(pm.response.json().name).to.eql(\"Включение освещения по движению (имя изменено)\"); ",
									"        pm.expect(pm.response.json().enabled).to.eql(false);        ",
									"    });",
									"",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patternId\": \"ENABLE_LIGHT_BY_MOTION\",\n    \"allStepsResponse\": {\n        \"1\": {\n            \"stepId\": \"1\",\n            \"parameters\": {\n                \"lightSelector\": {\n                    \"type\": \"CHECK_BOX_LIST\",\n                    \"selectedItems\": {{step1_auto}}\n                }\n            }\n        },\n        \"2\": {\n            \"stepId\": \"2\",\n            \"parameters\": {\n                \"activationDuration\": {\n                    \"type\": \"DELAY_SECONDS\",\n                    \"value\": 15\n                }\n            }\n        },\n        \"3\": {\n            \"stepId\": \"3\",\n            \"parameters\": {\n                \"motionSensorSelector\": {\n                    \"type\": \"DROP_DOWN_LIST\",\n                    \"selectedItem\": {{step3_auto}}\n                }\n            }\n        },\n        \"4\": {\n            \"stepId\": \"4\",\n            \"parameters\": {\n                \"timeSchedule\": {\n                    \"type\": \"TIME_SCHEDULE\",\n                    \"selectedScheduleMode\": \"PERIODIC\",\n                    \"manual\": null,\n                    \"periodic\": {\n                        \"daysOfMonth\": null,\n                        \"daysOfWeek\": [\n                            \"SATURDAY\",\n                            \"SUNDAY\"\n                        ],\n                        \"timePeriods\": [\n                            {\n                                \"timeFrom\": \"01:01\",\n                                \"durationOfPeriod\": 45\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    },\n    \"automationName\": \"Включение освещения по движению (имя изменено)\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto/{{automationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto",
								"{{automationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить автоматизацию по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"    var schema = {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"id\",",
									"            \"patternId\",",
									"            \"type\",",
									"            \"houseId\",",
									"            \"name\",",
									"            \"icons\",",
									"            \"enabled\"",
									"        ],",
									"        \"additionalProperties\": true,",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"patternId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"type\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"houseId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"icons\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"enabled\": {",
									"                \"type\": \"boolean\"",
									"            }",
									"        }",
									"    };",
									"",
									"    pm.test('Schema is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Проверка полей patternId, type, houseId, name и enabled\",() => {",
									"        pm.expect(pm.response.json().patternId).to.eql(\"ENABLE_LIGHT_BY_MOTION\");",
									"        pm.expect(pm.response.json().type).to.eql(\"LIGHT_CONTROL\");",
									"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));   ",
									"        pm.expect(pm.response.json().name).to.eql(\"Включение освещения по движению (имя изменено)\");",
									"        pm.expect(pm.response.json().enabled).to.eql(false);        ",
									"    });",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto/{{automationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto",
								"{{automationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Включить автоматизацию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    pm.test(\"Status is ok, response is json\", function () {",
									"      pm.response.to.be.json; // проверка формата",
									"    });",
									"",
									"    var schema = {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"id\",",
									"            \"patternId\",",
									"            \"type\",",
									"            \"houseId\",",
									"            \"name\",",
									"            \"icons\",",
									"            \"enabled\"",
									"        ],",
									"        \"additionalProperties\": true,",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"patternId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"type\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"houseId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"icons\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"enabled\": {",
									"                \"type\": \"boolean\"",
									"            }",
									"        }",
									"    };",
									"",
									"    pm.test('Schema is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Проверка полей id, patternId, type, houseId, name\",() => {",
									"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"automationId\"));",
									"        pm.expect(pm.response.json().patternId).to.eql(\"ENABLE_LIGHT_BY_MOTION\");",
									"        pm.expect(pm.response.json().type).to.eql(\"LIGHT_CONTROL\");",
									"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));   ",
									"        pm.expect(pm.response.json().name).to.eql(\"Включение освещения по движению (имя изменено)\"); ",
									"    });",
									"    pm.test(\"Проверка поля enabled (автоматизация включилась?)\",() => {",
									"        pm.expect(pm.response.json().enabled).to.eql(true);        ",
									"    });",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto/{{automationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto",
								"{{automationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить автоматизацию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"",
									"    pm.test(\"Status code is 204\", function () {",
									"        pm.response.to.have.status(204);",
									"    });",
									"",
									"}",
									"catch(e) {",
									"    // выводим исключение в консоль",
									"    console.log(e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patternId\": \"ENABLE_LIGHT_BY_MOTION\",\n    \"allStepsResponse\": {\n        \"1\": {\n            \"stepId\": \"1\",\n            \"parameters\": {\n                \"lightSelector\": {\n                    \"type\": \"CHECK_BOX_LIST\",\n                    \"selectedItems\": {{step1_auto}}\n                }\n            }\n        },\n        \"2\": {\n            \"stepId\": \"2\",\n            \"parameters\": {\n                \"activationDuration\": {\n                    \"type\": \"DELAY_SECONDS\",\n                    \"value\": 15\n                }\n            }\n        },\n        \"3\": {\n            \"stepId\": \"3\",\n            \"parameters\": {\n                \"motionSensorSelector\": {\n                    \"type\": \"DROP_DOWN_LIST\",\n                    \"selectedItem\": {{step3_auto}}\n                }\n            }\n        },\n        \"4\": {\n            \"stepId\": \"4\",\n            \"parameters\": {\n                \"timeSchedule\": {\n                    \"type\": \"TIME_SCHEDULE\",\n                    \"selectedScheduleMode\": \"PERIODIC\",\n                    \"manual\": null,\n                    \"periodic\": {\n                        \"daysOfMonth\": null,\n                        \"daysOfWeek\": [\n                            \"SATURDAY\",\n                            \"SUNDAY\"\n                        ],\n                        \"timePeriods\": [\n                            {\n                                \"timeFrom\": \"01:01\",\n                                \"durationOfPeriod\": 45\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    },\n    \"automationName\": \"Включение освещения по движению (имя изменено)\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/houses/{{houseId}}/auto/{{automationId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"houses",
								"{{houseId}}",
								"auto",
								"{{automationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "удалить пользователя с платформы",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Пользователь удален (код 204)\", function () {",
							"    pm.expect(pm.response.code).to.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/users/{{id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//Устройства MQTT SW-RLY01",
					"//Устройства Zway датчик движения"
				]
			}
		}
	]
}