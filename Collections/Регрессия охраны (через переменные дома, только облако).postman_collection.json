{
	"info": {
		"_postman_id": "6429b170-3e73-49b1-a25f-cca42b70362f",
		"name": "Регрессия охраны (через переменные дома, только облако)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21716455"
	},
	"item": [
		{
			"name": "Камеры",
			"item": [
				{
					"name": "(229743) Камера не попадает в сервис охраны",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Получение токена (для админа)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_login', 'test_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для абонента)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"       \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"language\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\",",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"anyOf\": [",
													"                    {",
													"                        \"type\": \"object\",",
													"",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"houseId\",",
													"                            \"title\",",
													"                            \"parentId\",",
													"                            \"plan\",",
													"                            \"childList\",",
													"                            \"deviceList\",",
													"                            \"cameraList\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\",",
													"    ",
													"                            },",
													"                            \"houseId\": {",
													"                                \"type\": \"string\",",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"parentId\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"plan\": {",
													"                                \"type\": \"object\",",
													"",
													"                                \"required\": [",
													"                                    \"id\",",
													"                                    \"imageId\",",
													"                                    \"zones\",",
													"                                    \"points\"",
													"                                ],",
													"                                \"properties\": {",
													"                                    \"id\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"imageId\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"zones\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    },",
													"                                    \"points\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    }",
													"                                },",
													"                                \"additionalProperties\": true",
													"                            },",
													"                            \"childList\": {",
													"                                \"type\": \"array\",",
													"",
													"                                \"additionalItems\": true,",
													"",
													"                            },",
													"                            \"deviceList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            },",
													"                            \"cameraList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"language\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\",",
													"",
													"        },",
													"        \"guardStatus\": {",
													"           ",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1d\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Тест",
							"item": [
								{
									"name": "Добавление пользователя на видеоплатформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение лимита камер на 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newLimit\": 2,\n  \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"limit",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление камеры с DVR на платформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string;",
													"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://193.19.103.188:1935/live/PlPimenova.stream\");",
													"    pm.expect(pm.response.json().token).to.string;",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": null,\n    \"title\": \"DVR\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"enabled\": true,\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://193.19.103.188:1935/live/PlPimenova.stream\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": false,\n    \"motionDelay\": null,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление камеры без DVR на платформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string;",
													"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://193.19.103.188:1935/live/PlPimenova.stream\");",
													"    pm.expect(pm.response.json().token).to.string;",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": null,\n    \"title\": \"NO DVR\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://193.19.103.188:1935/live/PlPimenova.stream\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": null,\n        \"dvrSpace\": null,\n        \"dvrLockDays\": null\n    },\n    \"motionDetectorEnabled\": false,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
													"setTimeout(function(){}, [1000]); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"RG-35-WZ\",\n        \"ctlMac\": \"{{RG-35-WZ_mac}}\",\n        \"offline\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/add",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события добавления камеры в охрану",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"add_camera_in_zone\";",
													"let checkTime = false;",
													"let messagePart = \"DVR\";",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Событие записано\", function () {",
													"  pm.expect(pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart)",
													"    )).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{houseId}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка наличия камеры в сервисе охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В охране есть камера с DVR\", function () {",
													"  pm.expect(pm.response.json().any(x => x.guardDeviceType == \"CAMERA\" && x.title == \"DVR\")).to.be.true;",
													"});",
													"",
													"pm.test(\"В охране нет камеры без DVR\", function () {",
													"  pm.expect(pm.response.json().any(x => x.guardDeviceType == \"CAMERA\" && x.title == \"NO DVR\")).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка наличия камеры в сервисе охраны Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В охране есть камера с DVR\", function () {",
													"  pm.expect(pm.response.json().any(x => x.guardDeviceType == \"CAMERA\" && x.title == \"DVR\")).to.be.true;",
													"});",
													"",
													"pm.test(\"В охране нет камеры без DVR\", function () {",
													"  pm.expect(pm.response.json().any(x => x.guardDeviceType == \"CAMERA\" && x.title == \"NO DVR\")).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Удалить пользователя c видеоплатформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(229528) Перемещение камер между домами при активированном режиме охраны",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Получение токена (для админа)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание первого абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id_1\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_login', 'test_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}_1\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для первого абонента)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"ACCESS_TOKEN_1\", jsonData.access_token);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}_1",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN_1}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN_1}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома для первого абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId_1\", jsonData.id);",
													"",
													"   var schema =  {",
													"       \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"language\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\",",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"anyOf\": [",
													"                    {",
													"                        \"type\": \"object\",",
													"",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"houseId\",",
													"                            \"title\",",
													"                            \"parentId\",",
													"                            \"plan\",",
													"                            \"childList\",",
													"                            \"deviceList\",",
													"                            \"cameraList\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\",",
													"    ",
													"                            },",
													"                            \"houseId\": {",
													"                                \"type\": \"string\",",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"parentId\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"plan\": {",
													"                                \"type\": \"object\",",
													"",
													"                                \"required\": [",
													"                                    \"id\",",
													"                                    \"imageId\",",
													"                                    \"zones\",",
													"                                    \"points\"",
													"                                ],",
													"                                \"properties\": {",
													"                                    \"id\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"imageId\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"zones\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    },",
													"                                    \"points\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    }",
													"                                },",
													"                                \"additionalProperties\": true",
													"                            },",
													"                            \"childList\": {",
													"                                \"type\": \"array\",",
													"",
													"                                \"additionalItems\": true,",
													"",
													"                            },",
													"                            \"deviceList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            },",
													"                            \"cameraList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"language\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\",",
													"",
													"        },",
													"        \"guardStatus\": {",
													"           ",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1d\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание второго абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id_2\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}_2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для второго абонента)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"ACCESS_TOKEN_2\", jsonData.access_token);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}_2",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома для второго абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId_2\", jsonData.id);",
													"",
													"   var schema =  {",
													"       \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"language\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\",",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"anyOf\": [",
													"                    {",
													"                        \"type\": \"object\",",
													"",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"houseId\",",
													"                            \"title\",",
													"                            \"parentId\",",
													"                            \"plan\",",
													"                            \"childList\",",
													"                            \"deviceList\",",
													"                            \"cameraList\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\",",
													"    ",
													"                            },",
													"                            \"houseId\": {",
													"                                \"type\": \"string\",",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"parentId\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"plan\": {",
													"                                \"type\": \"object\",",
													"",
													"                                \"required\": [",
													"                                    \"id\",",
													"                                    \"imageId\",",
													"                                    \"zones\",",
													"                                    \"points\"",
													"                                ],",
													"                                \"properties\": {",
													"                                    \"id\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"imageId\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"zones\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    },",
													"                                    \"points\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    }",
													"                                },",
													"                                \"additionalProperties\": true",
													"                            },",
													"                            \"childList\": {",
													"                                \"type\": \"array\",",
													"",
													"                                \"additionalItems\": true,",
													"",
													"                            },",
													"                            \"deviceList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            },",
													"                            \"cameraList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"language\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\",",
													"",
													"        },",
													"        \"guardStatus\": {",
													"           ",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"2d\",\n    \"type\": \"HOUSE\",\n    \"address\": \"2\",\n    \"apartment\": \"2\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя на видеоплатформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id_1}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id_1}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
													"setTimeout(function(){}, [4000]); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{houseId_1}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"RG-35-WZ\",\n        \"ctlMac\": \"{{RG-35-WZ_mac}}\",\n        \"offline\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/add",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление камеры с DVR на платформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string;",
													"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://193.19.103.188:1935/live/PlPimenova.stream\");",
													"    pm.expect(pm.response.json().token).to.string;",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": null,\n    \"title\": \"DVR\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"enabled\": true,\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://193.19.103.188:1935/live/PlPimenova.stream\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": false,\n    \"motionDelay\": null,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId_1}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Тест",
							"item": [
								{
									"name": "Дать права редактора на второй дом первому абоненту",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"{{houseId_2}}\": \"EDITOR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/{{id_1}}/access",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id_1}}",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 3000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId_1}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId_1}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перемещение камеры во второй дом",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"  pm.response.to.have.status(409);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "houseId",
													"value": "{{houseId_2}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/video/cameras/flussonic/move/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"flussonic",
												"move",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 3000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId_1}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId_1}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Удалить первого абонента c видеоплатформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id_1}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id_1}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить первого абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить второго абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id_2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id_2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(229737) Есть возможность удалить пользователя с FLUSSONIC, при активном режиме охраны",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Получение токена (для админа)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_login', 'test_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для абонента)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"       \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"language\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\",",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"anyOf\": [",
													"                    {",
													"                        \"type\": \"object\",",
													"",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"houseId\",",
													"                            \"title\",",
													"                            \"parentId\",",
													"                            \"plan\",",
													"                            \"childList\",",
													"                            \"deviceList\",",
													"                            \"cameraList\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\",",
													"    ",
													"                            },",
													"                            \"houseId\": {",
													"                                \"type\": \"string\",",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"parentId\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"plan\": {",
													"                                \"type\": \"object\",",
													"",
													"                                \"required\": [",
													"                                    \"id\",",
													"                                    \"imageId\",",
													"                                    \"zones\",",
													"                                    \"points\"",
													"                                ],",
													"                                \"properties\": {",
													"                                    \"id\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"imageId\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"zones\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    },",
													"                                    \"points\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    }",
													"                                },",
													"                                \"additionalProperties\": true",
													"                            },",
													"                            \"childList\": {",
													"                                \"type\": \"array\",",
													"",
													"                                \"additionalItems\": true,",
													"",
													"                            },",
													"                            \"deviceList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            },",
													"                            \"cameraList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"language\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\",",
													"",
													"        },",
													"        \"guardStatus\": {",
													"           ",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1d\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
													"setTimeout(function(){}, [4000]); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"RG-35-WZ\",\n        \"ctlMac\": \"{{RG-35-WZ_mac}}\",\n        \"offline\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/add",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя на видеоплатформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление камеры с DVR на платформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string;",
													"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://193.19.103.188:1935/live/PlPimenova.stream\");",
													"    pm.expect(pm.response.json().token).to.string;",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": null,\n    \"title\": \"DVR\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"enabled\": true,\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://193.19.103.188:1935/live/PlPimenova.stream\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": false,\n    \"motionDelay\": null,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Тест",
							"item": [
								{
									"name": "Проверка события добавления камеры в охрану",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"add_camera_in_zone\";",
													"let checkTime = false;",
													"let messagePart = \"DVR\";",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Событие записано\", function () {",
													"  pm.expect(pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart)",
													"    )).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{houseId}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка наличия камеры в сервисе охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"В охране есть камера с DVR\", function () {",
													"  pm.expect(pm.response.json().any(x => x.guardDeviceType == \"CAMERA\" && x.title == \"DVR\")).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 3000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить пользователя c видеоплатформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отвязать пользователя от видеоплатформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/flussonic/users/untie/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"flussonic",
												"users",
												"untie",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Удалить пользователя c видеоплатформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(230179) [WEB] Камера в локации Без группы перестает отправлять ссылки в журнал событий",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Получение токена (для админа)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_login', 'test_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для абонента)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"       \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"language\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\",",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"anyOf\": [",
													"                    {",
													"                        \"type\": \"object\",",
													"",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"houseId\",",
													"                            \"title\",",
													"                            \"parentId\",",
													"                            \"plan\",",
													"                            \"childList\",",
													"                            \"deviceList\",",
													"                            \"cameraList\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\",",
													"    ",
													"                            },",
													"                            \"houseId\": {",
													"                                \"type\": \"string\",",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"parentId\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"plan\": {",
													"                                \"type\": \"object\",",
													"",
													"                                \"required\": [",
													"                                    \"id\",",
													"                                    \"imageId\",",
													"                                    \"zones\",",
													"                                    \"points\"",
													"                                ],",
													"                                \"properties\": {",
													"                                    \"id\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"imageId\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"zones\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    },",
													"                                    \"points\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    }",
													"                                },",
													"                                \"additionalProperties\": true",
													"                            },",
													"                            \"childList\": {",
													"                                \"type\": \"array\",",
													"",
													"                                \"additionalItems\": true,",
													"",
													"                            },",
													"                            \"deviceList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            },",
													"                            \"cameraList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"language\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\",",
													"",
													"        },",
													"        \"guardStatus\": {",
													"           ",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"ctl_id\", responseBody); ",
													"setTimeout(function(){}, [4000]); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"RG-35-WZ\",\n        \"ctlMac\": \"{{RG-35-WZ_mac}}\",\n        \"offline\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя на видеоплатформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление камеры с DVR на платформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"Проверка наличия полей id и token и их типа. Проверка значения поля rtspStream.\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string;",
													"    pm.expect(pm.response.json()).to.have.property('token');",
													"    pm.expect(pm.response.json().token).to.string;",
													"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://193.19.103.188:1935/live/PlPimenova.stream\");",
													"    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": null,\n    \"title\": \"rtsp\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"enabled\": true,\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://193.19.103.188:1935/live/PlPimenova.stream\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": false,\n    \"motionDelay\": null,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Тест",
							"item": [
								{
									"name": "Проверка камеры в охране",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [5000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"",
													"    pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"        pm.expect(pm.response.json().data.any(x => ",
													"            x.message == \"Камера rtsp добавлена в охрану\" &&",
													"            x.level == \"SECURITY\" &&",
													"            x.type == \"add_camera_in_zone\" &&",
													"            x.color == \"SUCCESS\"",
													"        )).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=10&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/on",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"on"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=alarmed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "alarmed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка журнала событий",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [4000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    ",
													"    let eventId = -1;",
													"",
													"    pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"        let index = pm.response.json().data.findIndex(x => ",
													"            x.message.startsWith(\"Проникновение в объект!\") &&",
													"            x.level == \"SECURITY\" &&",
													"            x.type == \"break_in_house\" &&",
													"            x.color == \"DANGER\"",
													"        );",
													"",
													"        eventId = index;",
													"",
													"        pm.expect(index).to.be.gte(0);",
													"    });",
													"",
													"    if(eventId >= 0){",
													"        pm.test(\"Проверка наличия ссылок с камеры\",  () => {",
													"            pm.expect(pm.response.json().data[eventId].links).to.not.be.null;",
													"            pm.expect(pm.response.json().data[eventId].links.length).to.equal(1);",
													"            pm.expect(pm.response.json().data[eventId].links[0].cameraId).to.equal(pm.environment.get(\"cameraId\"));",
													"            pm.expect(pm.response.json().data[eventId].links[0].linkVideo).to.contain(pm.environment.get(\"cameraId\"));",
													"            pm.expect(pm.response.json().data[eventId].links[0].mobileLinkVideo).to.contain(pm.environment.get(\"cameraId\"));",
													"        });",
													"    }",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=3&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "3"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/off",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"off"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снять дом с охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создаем LOCATION_LIST (локацию)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"postman.setEnvironmentVariable (\"loc_id\", responseBody); ",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"123\",\n    \"parentId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить камеру",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// тут мы получаем камеру чтобы изменить её локацию в последующем",
													"",
													"try {",
													"let cam = pm.response.json();",
													"cam.deviceLocation.push(pm.environment.get(\"loc_id\")); ",
													"pm.environment.set(\"cam\", JSON.stringify(cam));",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/video/cameras/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос камеры в локацию 123",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{cam}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поставить дом на охрану",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/on",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"on"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=alarmed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "alarmed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка журнала событий (ссылок быть не должно)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [4000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    ",
													"    let eventId = -1;",
													"",
													"    pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"        let index = pm.response.json().data.findIndex(x => ",
													"            x.message.startsWith(\"Проникновение в объект!\") &&",
													"            x.level == \"SECURITY\" &&",
													"            x.type == \"break_in_house\" &&",
													"            x.color == \"DANGER\"",
													"        );",
													"",
													"        eventId = index;",
													"",
													"        pm.expect(index).to.be.gte(0);",
													"    });",
													"",
													"    if(eventId >= 0){",
													"        pm.test(\"Проверка наличия ссылок с камеры\",  () => {",
													"            pm.expect(pm.response.json().data[eventId].links).to.be.null;",
													"        });",
													"    }",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=3&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "3"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/off",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"off"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снять дом с охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос камеры в локацию без группы",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"cam = JSON.parse(pm.environment.get(\"cam\"))",
													"cam.deviceLocation.splice(0, 1)",
													"pm.environment.set(\"cam\", JSON.stringify(cam));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{cam}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получим список устройств (нужен nodeId)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.set(\"nodeId\", pm.response.json()[0].nodeId);   ",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/devices?withCameras=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенесем устройство в локацию 123",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"muted\": false,\n    \"title\": \"{{nodeId}}\",\n    \"serial\": \"\",\n    \"deviceLocation\": [\n        \"{{loc_id}}\"\n    ],\n    \"networkAddress\": \"\",\n    \"password\": \"\",\n    \"channels\": {\n        \"0\": {\n            \"title\": \"\"\n        },\n        \"1\": {\n            \"title\": \"\"\n        }\n    },\n    \"cron\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{ctl_id}}/devices/{{nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{ctl_id}}",
												"devices",
												"{{nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поставить дом на охрану",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/on",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"on"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=alarmed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "alarmed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка журнала событий (ссылок быть не должно)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [4000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    ",
													"    let eventId = -1;",
													"",
													"    pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"        let index = pm.response.json().data.findIndex(x => ",
													"            x.message.startsWith(\"Проникновение в объект!\") &&",
													"            x.level == \"SECURITY\" &&",
													"            x.type == \"break_in_house\" &&",
													"            x.color == \"DANGER\"",
													"        );",
													"",
													"        eventId = index;",
													"",
													"        pm.expect(index).to.be.gte(0);",
													"    });",
													"",
													"    if(eventId >= 0){",
													"        pm.test(\"Проверка наличия ссылок с камеры\",  () => {",
													"            pm.expect(pm.response.json().data[eventId].links).to.be.null;",
													"        });",
													"    }",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=3&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "3"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/off",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"off"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снять дом с охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{ACCESS_TOKEN}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Удалить пользователя c видеоплатформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "(230179) [Android] Камера в локации Без группы перестает отправлять ссылки в журнал событий",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Получение токена (для админа)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_login', 'test_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для абонента)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"       \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"language\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\",",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"anyOf\": [",
													"                    {",
													"                        \"type\": \"object\",",
													"",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"houseId\",",
													"                            \"title\",",
													"                            \"parentId\",",
													"                            \"plan\",",
													"                            \"childList\",",
													"                            \"deviceList\",",
													"                            \"cameraList\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\",",
													"    ",
													"                            },",
													"                            \"houseId\": {",
													"                                \"type\": \"string\",",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"parentId\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"plan\": {",
													"                                \"type\": \"object\",",
													"",
													"                                \"required\": [",
													"                                    \"id\",",
													"                                    \"imageId\",",
													"                                    \"zones\",",
													"                                    \"points\"",
													"                                ],",
													"                                \"properties\": {",
													"                                    \"id\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"imageId\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"zones\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    },",
													"                                    \"points\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    }",
													"                                },",
													"                                \"additionalProperties\": true",
													"                            },",
													"                            \"childList\": {",
													"                                \"type\": \"array\",",
													"",
													"                                \"additionalItems\": true,",
													"",
													"                            },",
													"                            \"deviceList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            },",
													"                            \"cameraList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"language\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\",",
													"",
													"        },",
													"        \"guardStatus\": {",
													"           ",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"ctl_id\", responseBody); ",
													"setTimeout(function(){}, [4000]); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"RG-35-WZ\",\n        \"ctlMac\": \"{{RG-35-WZ_mac}}\",\n        \"offline\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя на видеоплатформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление камеры с DVR на платформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"Проверка наличия полей id и token и их типа. Проверка значения поля rtspStream.\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string;",
													"    pm.expect(pm.response.json()).to.have.property('token');",
													"    pm.expect(pm.response.json().token).to.string;",
													"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://193.19.103.188:1935/live/PlPimenova.stream\");",
													"    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": null,\n    \"title\": \"rtsp\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"enabled\": true,\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://193.19.103.188:1935/live/PlPimenova.stream\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": false,\n    \"motionDelay\": null,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Тест",
							"item": [
								{
									"name": "Проверка камеры в охране",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [5000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"",
													"    pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"        pm.expect(pm.response.json().data.any(x => ",
													"            x.message == \"Камера rtsp добавлена в охрану\" &&",
													"            x.level == \"SECURITY\" &&",
													"            x.type == \"add_camera_in_zone\" &&",
													"            x.color == \"SUCCESS\"",
													"        )).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=10&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/on",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"on"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=alarmed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "alarmed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка журнала событий",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [4000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    ",
													"    let eventId = -1;",
													"",
													"    pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"        let index = pm.response.json().data.findIndex(x => ",
													"            x.message.startsWith(\"Проникновение в объект!\") &&",
													"            x.level == \"SECURITY\" &&",
													"            x.type == \"break_in_house\" &&",
													"            x.color == \"DANGER\"",
													"        );",
													"",
													"        eventId = index;",
													"",
													"        pm.expect(index).to.be.gte(0);",
													"    });",
													"",
													"    if(eventId >= 0){",
													"        pm.test(\"Проверка наличия ссылок с камеры\",  () => {",
													"            pm.expect(pm.response.json().data[eventId].links).to.not.be.null;",
													"            pm.expect(pm.response.json().data[eventId].links.length).to.equal(1);",
													"            pm.expect(pm.response.json().data[eventId].links[0].cameraId).to.equal(pm.environment.get(\"cameraId\"));",
													"            pm.expect(pm.response.json().data[eventId].links[0].linkVideo).to.contain(pm.environment.get(\"cameraId\"));",
													"            pm.expect(pm.response.json().data[eventId].links[0].mobileLinkVideo).to.contain(pm.environment.get(\"cameraId\"));",
													"        });",
													"    }",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=3&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "3"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/off",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"off"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снять дом с охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создаем LOCATION_LIST (локацию)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"postman.setEnvironmentVariable (\"loc_id\", responseBody); ",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"123\",\n    \"parentId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить камеру",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// тут мы получаем камеру чтобы изменить её локацию в последующем",
													"",
													"try {",
													"let cam = pm.response.json();",
													"cam.deviceLocation.push(pm.environment.get(\"loc_id\")); ",
													"pm.environment.set(\"cam\", JSON.stringify(cam));",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/video/cameras/{{cameraId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{cameraId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос камеры в локацию 123",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"cameraIds\": [\"{{cameraId}}\"],\n\t\"deviceIds\": [],\n\t\"locationId\": \"{{loc_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поставить дом на охрану",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/on",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"on"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=alarmed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "alarmed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка журнала событий (ссылок быть не должно)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [4000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    ",
													"    let eventId = -1;",
													"",
													"    pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"        let index = pm.response.json().data.findIndex(x => ",
													"            x.message.startsWith(\"Проникновение в объект!\") &&",
													"            x.level == \"SECURITY\" &&",
													"            x.type == \"break_in_house\" &&",
													"            x.color == \"DANGER\"",
													"        );",
													"",
													"        eventId = index;",
													"",
													"        pm.expect(index).to.be.gte(0);",
													"    });",
													"",
													"    if(eventId >= 0){",
													"        pm.test(\"Проверка наличия ссылок с камеры\",  () => {",
													"            pm.expect(pm.response.json().data[eventId].links).to.be.null;",
													"        });",
													"    }",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=3&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "3"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/off",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"off"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снять дом с охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос камеры в локацию без группы",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"cameraIds\": [\"{{cameraId}}\"],\n\t\"deviceIds\": [],\n\t\"locationId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получим список устройств (нужен nodeId)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.set(\"nodeId\", pm.response.json()[0].nodeId);   ",
													"    pm.environment.set(\"device_id\", pm.response.json()[0].id);   ",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/devices?withCameras=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенесем устройство в локацию 123",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"cameraIds\": [],\n\t\"deviceIds\": [\"{{device_id}}\"],\n\t\"locationId\": \"{{loc_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поставить дом на охрану",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/on",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"on"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=alarmed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "alarmed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка журнала событий (ссылок быть не должно)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [4000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    ",
													"    let eventId = -1;",
													"",
													"    pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"        let index = pm.response.json().data.findIndex(x => ",
													"            x.message.startsWith(\"Проникновение в объект!\") &&",
													"            x.level == \"SECURITY\" &&",
													"            x.type == \"break_in_house\" &&",
													"            x.color == \"DANGER\"",
													"        );",
													"",
													"        eventId = index;",
													"",
													"        pm.expect(index).to.be.gte(0);",
													"    });",
													"",
													"    if(eventId >= 0){",
													"        pm.test(\"Проверка наличия ссылок с камеры\",  () => {",
													"            pm.expect(pm.response.json().data[eventId].links).to.be.null;",
													"        });",
													"    }",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=3&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "3"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{web_gpio_host}}/{{web_gpio_detect_pin}}/off",
											"host": [
												"{{web_gpio_host}}"
											],
											"path": [
												"{{web_gpio_detect_pin}}",
												"off"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снять дом с охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{ACCESS_TOKEN}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Удалить пользователя c видеоплатформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "(229859) Есть возможность отключить камеры пользователя при активном режиме охраны",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Получение токена (для админа)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_login', 'test_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для абонента)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"       \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"language\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\",",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"anyOf\": [",
													"                    {",
													"                        \"type\": \"object\",",
													"",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"houseId\",",
													"                            \"title\",",
													"                            \"parentId\",",
													"                            \"plan\",",
													"                            \"childList\",",
													"                            \"deviceList\",",
													"                            \"cameraList\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\",",
													"    ",
													"                            },",
													"                            \"houseId\": {",
													"                                \"type\": \"string\",",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"parentId\": {",
													"                                \"type\": \"string\",",
													"",
													"                            },",
													"                            \"plan\": {",
													"                                \"type\": \"object\",",
													"",
													"                                \"required\": [",
													"                                    \"id\",",
													"                                    \"imageId\",",
													"                                    \"zones\",",
													"                                    \"points\"",
													"                                ],",
													"                                \"properties\": {",
													"                                    \"id\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"imageId\": {",
													"                                        \"type\": \"string\",",
													"",
													"                                    },",
													"                                    \"zones\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    },",
													"                                    \"points\": {",
													"                                        \"type\": \"object\",",
													"",
													"                                        \"required\": [],",
													"                                        \"additionalProperties\": true",
													"                                    }",
													"                                },",
													"                                \"additionalProperties\": true",
													"                            },",
													"                            \"childList\": {",
													"                                \"type\": \"array\",",
													"",
													"                                \"additionalItems\": true,",
													"",
													"                            },",
													"                            \"deviceList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            },",
													"                            \"cameraList\": {",
													"                                \"type\": \"array\",",
													"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"language\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\",",
													"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\",",
													"",
													"        },",
													"        \"guardStatus\": {",
													"           ",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"ctl_id\", responseBody); ",
													"setTimeout(function(){}, [4000]); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"setTimeout(function(){}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"RG-35-WZ\",\n        \"ctlMac\": \"{{RG-35-WZ_mac}}\",\n        \"offline\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя на видеоплатформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление камеры с DVR на платформу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"cameraId\", jsonData.id);",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"Проверка наличия полей id и token и их типа. Проверка значения поля rtspStream.\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string;",
													"    pm.expect(pm.response.json()).to.have.property('token');",
													"    pm.expect(pm.response.json().token).to.string;",
													"    pm.expect(pm.response.json().rtspStream).to.equal(\"rtsp://193.19.103.188:1935/live/PlPimenova.stream\");",
													"    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": null,\n    \"title\": \"rtsp\",\n    \"mac\": null,\n    \"serial\": \"\",\n    \"enabled\": true,\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"rtspStream\": \"rtsp://193.19.103.188:1935/live/PlPimenova.stream\",\n    \"status\": \"OFFLINE\",\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": false,\n    \"motionDelay\": null,\n    \"deviceLocation\": [],\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение ID пользователя на Flussonic",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('flussonicUserId', pm.response.json().flussonicUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/flussonic/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"flussonic",
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Тест",
							"item": [
								{
									"name": "Проверка камеры в охране",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"pm.test(\"Проверка наличия полей message, level, type и color\",  () => {",
													"    pm.expect(pm.response.json().data[0].message).to.equal(\"Камера rtsp добавлена в охрану\");",
													"    pm.expect(pm.response.json().data[0].level).to.equal(\"SECURITY\");",
													"    pm.expect(pm.response.json().data[0].type).to.equal(\"add_camera_in_zone\");",
													"    pm.expect(pm.response.json().data[0].color).to.equal(\"SUCCESS\");",
													"    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=1&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"onGuard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=armed&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "armed"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление прав пользователя на видеосервере",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"  pm.response.to.have.status(409);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"flussonicUserId\": {{flussonicUserId}},\n    \"enabled\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/flussonic/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"flussonic",
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление лимита камер пользователя на видеосервере",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"  pm.response.to.have.status(409);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newLimit\": 1,\n    \"platformType\": \"FLUSSONIC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/limit/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"limit",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снять дом с охраны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    // задержка может быть меньше",
													"setTimeout(function(){}, [1000]);",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"guard\",\n    \"value\": \"notOnGuard\",\n    \"title\": \"Режим охраны\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": false,\n    \"enumValues\": [\n        {\n            \"id\": \"notOnGuard\",\n            \"title\": \"Снято с охраны\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onGuard\",\n            \"title\": \"Поставлено на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"cancelGuard\",\n            \"title\": \"Отмена постановки на охрану\",\n            \"system\": true\n        },\n        {\n            \"id\": \"reArmingGuard\",\n            \"title\": \"Перепостановка охраны\",\n            \"system\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/vars/guard",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"vars",
												"guard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_variableId=emergency&C_value=idle&C_type=VARIABLE_CHANGE&timeout=20000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_variableId",
													"value": "emergency"
												},
												{
													"key": "C_value",
													"value": "idle"
												},
												{
													"key": "C_type",
													"value": "VARIABLE_CHANGE"
												},
												{
													"key": "timeout",
													"value": "20000"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{ACCESS_TOKEN}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Удалить пользователя c видеоплатформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/video/users/{{id}}?platformType=FLUSSONIC",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"users",
												"{{id}}"
											],
											"query": [
												{
													"key": "platformType",
													"value": "FLUSSONIC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful request (checking the code)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}