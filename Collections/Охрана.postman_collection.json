{
	"info": {
		"_postman_id": "899c8119-8640-4e13-9422-bb8825f1dca9",
		"name": "Охрана",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16511326"
	},
	"item": [
		{
			"name": "Охрана (через новое API)",
			"item": [
				{
					"name": "Охрана (через новое API)",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Параметры контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Настройки применены\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"connected\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"if(!pm.collectionVariables.has('override_zway_ctl_mac'))",
													"    pm.environment.set('zway_ctl_mac', pm.variables.replaceIn(\"{{$randomMACAddress}}\"));",
													"else",
													"    pm.environment.set('zway_ctl_mac', pm.collectionVariables.get('override_zway_ctl_mac'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"mac\": \"{{zway_ctl_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/info",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для админа, только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"admin_access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.have.status(200);",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о платформе",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var sdk = require('postman-collection');",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
													"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/info",
											"host": [
												"{{host}}"
											],
											"path": [
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение типа платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"let isSL10 = pm.response.json().version.includes(\"-b\");",
													"",
													"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
													"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
													"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)",
													"",
													"if(isSL10) {//Пропускаем регистрацию и добавление контроллера для SL-10",
													"    pm.environment.set (\"test_user_login\", pm.collectionVariables.get(\"sl10_username\"))",
													"    pm.environment.set (\"test_user_password\", pm.collectionVariables.get(\"sl10_password\"))",
													"    postman.setNextRequest(\"Авторизация пользователя\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/version",
											"host": [
												"{{host}}"
											],
											"path": [
												"version"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_user_id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.have.status(200);",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"let login = 'test_user_'+randomString(6);",
													"pm.environment.set('test_user_login', login);",
													"pm.environment.set('test_user_password', login);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"{{test_user_login}}\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}\",\n    \"videoParameters\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома для абонента (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"  pm.response.to.have.status(200);",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_user_house\", jsonData.id);",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Test House\",\n    \"ownerId\": \"{{test_user_id}}\",\n    \"type\": \"HOUSE\",\n    \"address\": \"Test Address\",\n    \"apartment\": \"0101\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление контроллера (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
													"setTimeout(function(){}, [1000]); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{test_user_house}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"Z-Way Controller Simualtor\",\n        \"ctlMac\": \"{{zway_ctl_mac}}\",\n        \"offline\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											]
										}
									},
									"response": []
								},
								{
									"name": "Авторизация пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"connection": true,
											"accept-encoding": true,
											"accept": true,
											"user-agent": true,
											"content-length": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password={{test_user_password}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}"
												},
												{
													"key": "password",
													"value": "{{test_user_password}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{access_token}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание датчика открытия двери",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"template\": \"sz_mct\",\n    \"nodeId\": 6\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/add",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});",
													"",
													"pm.environment.set(\"ctl_connected_timeout\", pm.response.json().status == \"Controller is already connected\" ? 0 : (pm.response.json().status ? 180000 : 5000));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/connect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"connect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса контроллера \"Доступен\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"if(pm.environment.get(\"ctl_connected_timeout\") > 10000)",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout={{ctl_connected_timeout}}",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "CONTROLLER_STATUS"
												},
												{
													"key": "C_status",
													"value": "^CONNECTED"
												},
												{
													"key": "timeout",
													"value": "{{ctl_connected_timeout}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить дом",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Существует хотя бы 1 дом\", function () {",
													"  pm.expect(pm.response.json().length).to.be.gte(1);",
													"});",
													"",
													"if (pm.response.json().length >= 1)",
													"    postman.setEnvironmentVariable (\"house_id\", pm.response.json()[0].id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить устройство",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Существует хотя бы 1 устройство\", function () {",
													"  pm.expect(pm.response.json().length).to.be.gte(1);",
													"});",
													"",
													"if (pm.response.json().length >= 1) {",
													"",
													"    var device = pm.response.json().find(function (el) {",
													"        return el.deviceType == \"Z_WAY_DEVICE\" && Object.values(el.channels).any(x => x.deviceProperties.any(y => y.kind == \"OPEN_CLOSE\"));",
													"    });",
													"",
													"    postman.setEnvironmentVariable (\"device_id\", device.id)",
													"    postman.setEnvironmentVariable (\"device_nodeId\", device.nodeId)",
													"    postman.setEnvironmentVariable (\"device_nodeId_number\", device.nodeId.substring(device.nodeId.lastIndexOf(\"_\") + 1))",
													"    postman.setEnvironmentVariable (\"device_controllerId\", device.controllerId)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{house_id}}/devices?withCameras=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{house_id}}",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о свойствах устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"{",
													"    for(let prop of channelInfo.deviceProperties)",
													"    {",
													"        if(prop.kind == \"GUARD_MODE\")",
													"        {",
													"            pm.environment.set(\"device_guardPropId\", prop.id);",
													"            pm.environment.set(\"device_guardPropValue\", prop.value);",
													"        }",
													"",
													"        if(prop.kind == \"KEEP_ALIVE\")",
													"            pm.environment.set(\"device_keepAlivePropId\", prop.id);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика (Вскрытие)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика (Вскрытие)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика (Сработка)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка охранных устройств",
							"item": [
								{
									"name": "Получение статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство доступно\", function () {",
													"  pm.expect(pm.response.json().status).to.be.equal(\"ONLINE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение охранного статуса дома",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Дом готов к постановке на охрану\", function () {",
													"  pm.expect(pm.response.json().every(x => x.guardStatus.status == \"INIT\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка устройства и групп",
							"item": [
								{
									"name": "Переименование",
									"item": [
										{
											"name": "Переименовать устройство",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"deviceLocation\": [\"\"],\n\t\"title\": \"Тестовая дверь\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверить имя устройства",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Имя устройства совпадает с ожидаемым\", function () {",
															"  pm.expect(pm.response.json().title).to.be.equal(\"Тестовая дверь\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Переименовать устройство №2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"title\": \"Дверь\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверить имя устройства №2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Имя устройства совпадает с ожидаемым\", function () {",
															"  pm.expect(pm.response.json().title).to.be.equal(\"Дверь\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события переименования в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"user_change_device\";",
															"let checkTime = false;",
															"let messagePart = \"изменил название устройства\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}",
															"",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Группы",
									"item": [
										{
											"name": "Создание группы",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"postman.setEnvironmentVariable (\"group_id\", pm.response.text())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"Новая группа\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/houses/{{house_id}}/groups",
													"host": [
														"{{host}}"
													],
													"path": [
														"houses",
														"{{house_id}}",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Назначить устройству группу",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"deviceLocation\": [\n        \"{{group_id}}\"\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверить группу устройства",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Группа устройства совпадает с ожидаемым\", function () {",
															"  pm.expect(pm.response.json().deviceLocation).to.include(pm.environment.get(\"group_id\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удалить группу",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/houses/{{house_id}}/groups/{{group_id}}?checkEmptyGroups=true",
													"host": [
														"{{host}}"
													],
													"path": [
														"houses",
														"{{house_id}}",
														"groups",
														"{{group_id}}"
													],
													"query": [
														{
															"key": "checkEmptyGroups",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события изменения местоположения в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"user_change_device\";",
															"let checkTime = false;",
															"let messagePart = \"изменил местоположение на\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Включение/исключение в сервисе",
									"item": [
										{
											"name": "Добавить устройство в сервис охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/guard/update",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"update"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка включения устройства в охрану",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Устройство включено в сервис охраны\", function () {",
															"   var jsonData = pm.response.json();",
															"   ",
															"    var result = jsonData.find(obj => {",
															"        return obj.objectInfo.deviceId == pm.environment.get(\"device_id\");",
															"    });",
															"",
															"    pm.expect(result).to.not.be.undefined;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/zones?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"zones"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Удалить устройство из сервиса охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": false\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/guard/update",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"update"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка исключения устройства из охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Устройство исключено из сервиса охраны\", function () {",
															"   var jsonData = pm.response.json();",
															"   ",
															"    var result = jsonData.find(obj => {",
															"        return obj.objectInfo.deviceId == pm.environment.get(\"device_id\");",
															"    });",
															"",
															"    pm.expect(result).to.be.undefined;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/zones?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"zones"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события исключения из охраны в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"remove_device_from_zone\";",
															"let checkTime = false;",
															"let messagePart = \"удалено из охраны\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Вернуть устройство в сервис охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/guard/update",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"update"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события добавления в охрану в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"add_device_in_zone\";",
															"let checkTime = false;",
															"let messagePart = \"добавлено в охрану\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Период опроса",
									"item": [
										{
											"name": "Смена периода опроса 60 c",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"60\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Смена периода опроса 10 c",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"10\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события смены периода опроса в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"user_change_device_property\";",
															"let checkTime = false;",
															"let messagePart = \"Период опроса устройства\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Постановка/снятие без сработки",
							"item": [
								{
									"name": "Отключение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события процесса постановки на охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_arming\";",
													"let checkTime = false;",
													"let messagePart = \"ставит объект на охрану\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события готовности устройства к охране в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_ready_for_guard\";",
													"let checkTime = false;",
													"let messagePart = \"готово к охране\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события постановки на охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_on\";",
													"let checkTime = false;",
													"let messagePart = \"Поставлено на охрану\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события процесса снятия с охраны в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_disarming\";",
													"let checkTime = false;",
													"let messagePart = \"снимает объект с охраны\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события снятия с охраны в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_off\";",
													"let checkTime = false;",
													"let messagePart = \"Снято с охраны\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Постановка/снятие в сработке",
							"item": [
								{
									"name": "Отключение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика при включении FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\",\n    \"rule\": \"guardMode:2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события ошибки постановки на охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_error\";",
													"let checkTime = false;",
													"let messagePart = \"Ошибка постановки на охрану\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Постановка -> сработка -> снятие",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события проникновения в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"break_in_house\";",
													"let checkTime = false;",
													"let messagePart = \"Проникновение в объект\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Постановка без FLiRS-> сработка -> снятие",
							"item": [
								{
									"name": "Отключение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перепостановка в состоянии сработки после ошибки",
							"item": [
								{
									"name": "Выключение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика при включении FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\",\n    \"rule\": \"guardMode:2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Повторная постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение форсирование FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перепостановка в выключенном состоянии после ошибки",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_guardStatus.message",
													"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события потери связи с устройством в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_error_device_connect\";",
													"let checkTime = false;",
													"let messagePart = \"Ошибка охраны: потеряна связь с устройством\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса с underGuard=false",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проникновение при недоступном датчике после ошибки",
							"item": [
								{
									"name": "Создание датчика движения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);",
													"",
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"template\": \"sz_pir\",\n    \"nodeId\": 7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/add",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание добавления устройства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_ADD&C_deviceInfo.nodeId=^7&timeout=15000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_ADD"
												},
												{
													"key": "C_deviceInfo.nodeId",
													"value": "^7"
												},
												{
													"key": "timeout",
													"value": "15000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить устройство",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Существует хотя бы 1 устройство\", function () {",
													"  pm.expect(pm.response.json().length).to.be.gte(1);",
													"});",
													"",
													"if (pm.response.json().length >= 1) {",
													"",
													"    var device = pm.response.json().find(function (el) {",
													"        return el.deviceType == \"Z_WAY_DEVICE\" && Object.values(el.channels).any(x => x.deviceProperties.any(y => y.kind == \"MOTION\"));",
													"    });",
													"",
													"    postman.setEnvironmentVariable (\"device2_id\", device.id)",
													"    postman.setEnvironmentVariable (\"device2_nodeId\", device.nodeId)",
													"    postman.setEnvironmentVariable (\"device2_nodeId_number\", device.nodeId.substring(device.nodeId.lastIndexOf(\"_\") + 1))",
													"    postman.setEnvironmentVariable (\"device2_controllerId\", device.controllerId)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{house_id}}/devices?withCameras=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{house_id}}",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение первого датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_guardStatus.message",
													"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика движения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device2_nodeId_number}}/prop/0/motion",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device2_nodeId_number}}",
												"prop",
												"0",
												"motion"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение первого датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика движения Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device2_nodeId_number}}/prop/0/motion",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device2_nodeId_number}}",
												"prop",
												"0",
												"motion"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Начать удаление устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [3000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/ZWAVE_ELTEX_7/remove",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"ZWAVE_ELTEX_7",
												"remove"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика движения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device2_nodeId_number}}",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device2_nodeId_number}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перепостановка в состоянии сработки после проникновения",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [7000]);",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события процесса перепостановки на охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_rearming\";",
													"let checkTime = false;",
													"let messagePart = \"выполняет перепостановку на охрану на объекте\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перепостановка в нормализованном состоянии",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Постановка/снятие при датчике в аварии",
							"item": [
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события открытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Открыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события закрытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Закрыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Вскрытие датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события вскрытия датчика в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_tamper_change\";",
													"let checkTime = false;",
													"let messagePart = \"скрытие обнаружено\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события нормализации вскрытия датчика в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_tamper_change\";",
													"let checkTime = false;",
													"let messagePart = \"скрытие не обнаружено\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены статуса устройства в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_status_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Статус устройства\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Вскрытие датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены статуса устройства на \"Онлайн\" в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_status_online\";",
													"let checkTime = false;",
													"let messagePart = \"Статус устройства\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка события проникновения",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Обработка нештатных ситуаций при работе с охраной",
							"item": [
								{
									"name": "Перезагрузка контроллера при снятой охране",
									"item": [
										{
											"name": "Отключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/disconnect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"disconnect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса контроллера \"Недоступен\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=DISCONNECTED&timeout=300000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_STATUS"
														},
														{
															"key": "C_status",
															"value": "DISCONNECTED"
														},
														{
															"key": "timeout",
															"value": "300000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события потери связи с контроллером в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"guard_error_controller_connect\";",
															"let checkTime = false;",
															"let messagePart = \"Ошибка охраны: потеряна связь с хабом\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "NOT_READY"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса контроллера \"Доступен\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 5000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_STATUS"
														},
														{
															"key": "C_status",
															"value": "^CONNECTED"
														},
														{
															"key": "timeout",
															"value": "180000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события восстановления связи с контроллером в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"guard_controller_connect_restored\";",
															"let checkTime = false;",
															"let messagePart = \"Сервис охраны: Связь с хабом восстановлена\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Сработка датчика при снятой охране",
									"item": [
										{
											"name": "Снятие дома с охраны (без теста)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Сработка датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"on\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"prop",
														"0",
														"openClose"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "NOT_READY"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Нормализация датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"off\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"prop",
														"0",
														"openClose"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Недоступность датчика при снятой охране",
									"item": [
										{
											"name": "Снятие дома с охраны (без теста)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"power"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "NOT_READY"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Включение датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"power"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Недоступность датчика при поставленной охране",
									"item": [
										{
											"name": "Постановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"arm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"power"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "ERROR"
														},
														{
															"key": "C_guardStatus.message",
															"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события потери связи с устройством в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"guard_error_device_connect\";",
															"let checkTime = false;",
															"let messagePart = \"Ошибка охраны: потеряна связь с устройством\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Включение датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 2000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"power"
													]
												}
											},
											"response": []
										},
										{
											"name": "Перепостановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"rearm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Снятие дома с охраны",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Перезагрузка контроллера при поставленной охране",
									"item": [
										{
											"name": "Смена периода опроса 240 с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"240\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Постановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"arm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/disconnect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"disconnect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с контроллером\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "ERROR"
														},
														{
															"key": "C_guardStatus.message",
															"value": "Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса контроллера \"Доступен\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 5000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_STATUS"
														},
														{
															"key": "C_status",
															"value": "^CONNECTED"
														},
														{
															"key": "timeout",
															"value": "180000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Перепостановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"rearm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Снятие дома с охраны",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Смена периода опроса 10 с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"10\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Перезагрузка контроллера при перепостановке на охрану",
									"item": [
										{
											"name": "Смена периода опроса 240 с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"240\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Постановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"arm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Сработка датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"on\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"prop",
														"0",
														"openClose"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Проникновение\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "ALARM"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Нормализация датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"off\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"prop",
														"0",
														"openClose"
													]
												}
											},
											"response": []
										},
										{
											"name": "Перепостановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"rearm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 200);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/disconnect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"disconnect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с контроллером\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "ERROR"
														},
														{
															"key": "C_guardStatus.message",
															"value": "Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса контроллера \"Доступен\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 5000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_STATUS"
														},
														{
															"key": "C_status",
															"value": "^CONNECTED"
														},
														{
															"key": "timeout",
															"value": "180000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Перепостановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"rearm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Снятие дома с охраны",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Смена периода опроса 10 с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"10\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Проверка форсирования FLiRS",
							"item": [
								{
									"name": "Получение информации о свойствах устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"{",
													"    for(let prop of channelInfo.deviceProperties)",
													"    {",
													"        if(prop.kind == \"GUARD_MODE\")",
													"            pm.environment.set(\"device_guardPropId\", prop.id);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство включено\", function () {",
													"  let result = null;",
													"",
													"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"  {",
													"      for(let prop of channelInfo.deviceProperties)",
													"      {",
													"          if(prop.kind == \"GUARD_MODE\")",
													"              result = prop.value;",
													"      }",
													"  }",
													"",
													"  pm.expect(result).to.be.equal(\"true\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство выключено\", function () {",
													"    let result = null;",
													"",
													"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"  {",
													"      for(let prop of channelInfo.deviceProperties)",
													"      {",
													"          if(prop.kind == \"GUARD_MODE\")",
													"              result = prop.value;",
													"      }",
													"  }",
													"",
													"  pm.expect(result).to.be.equal(\"false\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство выключено\", function () {",
													"    let result = null;",
													"",
													"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"  {",
													"      for(let prop of channelInfo.deviceProperties)",
													"      {",
													"          if(prop.kind == \"GUARD_MODE\")",
													"              result = prop.value;",
													"      }",
													"  }",
													"",
													"  pm.expect(result).to.be.equal(\"false\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство включено\", function () {",
													"    let result = null;",
													"",
													"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"  {",
													"      for(let prop of channelInfo.deviceProperties)",
													"      {",
													"          if(prop.kind == \"GUARD_MODE\")",
													"              result = prop.value;",
													"      }",
													"  }",
													"",
													"  pm.expect(result).to.be.equal(\"true\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка событий охранного режима в журнале",
							"item": [
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены охранного режима в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device_property\";",
													"let checkTime = false;",
													"let messagePart = \"Охранный режим\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены охранного режима в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device_property\";",
													"let checkTime = false;",
													"let messagePart = \"Охранный режим\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка отключения уведомлений",
							"item": [
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение уведомлений от устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceLocation\": [\"\"],\n\t\"muted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события открытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Открыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события закрытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Закрыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение уведомлений от устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"muted\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события отключения уведомлений от устройства в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device\";",
													"let checkTime = false;",
													"let messagePart = \"изменил без уведомлений на Включено\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия события открытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Открыто\";",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Событие не записано\", function () {",
													"  pm.expect(pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart)",
													"    )).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия события закрытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Закрыто\";",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Событие не записано\", function () {",
													"  pm.expect(pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart)",
													"    )).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение уведомлений от устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"muted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события включения уведомлений от устройства в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device\";",
													"let checkTime = false;",
													"let messagePart = \"изменил без уведомлений на Выключено\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события открытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Открыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события закрытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Закрыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Отключение от WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика открытия",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление контроллера для SL-10",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{zway_ctl_host}}/devices/6",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление контроллера (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление контроллера для SL-10",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/remove",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"remove"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление пользователя (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление пользователя для SL-10",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{test_user_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_user_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Охрана (через новое API)  с EVI Cloud",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Параметры контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Настройки применены\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"connected\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"if(!pm.collectionVariables.has('override_zway_ctl_mac'))",
													"    pm.environment.set('zway_ctl_mac', pm.variables.replaceIn(\"{{$randomMACAddress}}\"));",
													"else",
													"    pm.environment.set('zway_ctl_mac', pm.collectionVariables.get('override_zway_ctl_mac'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"mac\": \"{{zway_ctl_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/info",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для админа, только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"admin_access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.have.status(200);",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о платформе",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var sdk = require('postman-collection');",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
													"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/info",
											"host": [
												"{{host}}"
											],
											"path": [
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение типа платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"let isSL10 = pm.response.json().version.includes(\"-b\");",
													"",
													"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
													"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
													"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)",
													"",
													"if(isSL10) {//Пропускаем регистрацию и добавление контроллера для SL-10",
													"    pm.environment.set (\"test_user_login\", pm.collectionVariables.get(\"sl10_username\"))",
													"    pm.environment.set (\"test_user_password\", pm.collectionVariables.get(\"sl10_password\"))",
													"    postman.setNextRequest(\"Авторизация пользователя\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/version",
											"host": [
												"{{host}}"
											],
											"path": [
												"version"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_user_id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.have.status(200);",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"let login = 'test_user_'+randomString(6);",
													"pm.environment.set('test_user_login', login);",
													"pm.environment.set('test_user_password', login);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"{{test_user_login}}\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_user_login}}\",\n    \"videoParameters\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома для абонента (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"  pm.response.to.have.status(200);",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_user_house\", jsonData.id);",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Test House\",\n    \"ownerId\": \"{{test_user_id}}\",\n    \"type\": \"HOUSE\",\n    \"address\": \"Test Address\",\n    \"apartment\": \"0101\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Узнать id контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=Test&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "Test"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Авторизация пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"connection": true,
											"accept-encoding": true,
											"accept": true,
											"user-agent": true,
											"content-length": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YW5kcm9pZC1jbGllbnQ6cGFzc3dvcmQ=",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/oauth2/token?grant_type=password&username={{test_user_login}}&password={{test_user_password}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "{{test_user_login}}"
												},
												{
													"key": "password",
													"value": "{{test_user_password}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{access_token}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.Получить_логин_и_пароль_для_устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo?deviceType=camera",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											],
											"query": [
												{
													"key": "deviceType",
													"value": "camera"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2.Добавить_mqtt_камеру",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
													"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"test_user_house\"));",
													"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
													"        pm.expect(pm.response.json().title).to.include(\"cam\");",
													"        pm.expect(pm.response.json().muted).to.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.eql(false);",
													"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"console.log(Date.now())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"cam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.Запрос_на_симулятор_камеры",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{res}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim}}/add",
											"host": [
												"{{cam_sim}}"
											],
											"path": [
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.Ожидание_события_добавления_камеры",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=ADD_ELTEX_CAMERA_QR&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.controllerId",
													"value": "{{controllerId}}",
													"disabled": true
												},
												{
													"key": "C_type",
													"value": "ADD_ELTEX_CAMERA_QR"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос камер пользователя (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.set(\"guard_kam\", pm.response.json()[0].id);",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление контроллера (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
													"setTimeout(function(){}, [1000]); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{test_user_house}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"Z-Way Controller Simualtor\",\n        \"ctlMac\": \"{{zway_ctl_mac}}\",\n        \"offline\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{access_token}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{access_token}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание датчика открытия двери",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"template\": \"sz_mct\",\n    \"nodeId\": 6\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/add",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});",
													"",
													"pm.environment.set(\"ctl_connected_timeout\", pm.response.json().status == \"Controller is already connected\" ? 0 : (pm.response.json().status ? 180000 : 5000));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/connect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"connect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса контроллера \"Доступен\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"if(pm.environment.get(\"ctl_connected_timeout\") > 10000)",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout={{ctl_connected_timeout}}",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "CONTROLLER_STATUS"
												},
												{
													"key": "C_status",
													"value": "^CONNECTED"
												},
												{
													"key": "timeout",
													"value": "{{ctl_connected_timeout}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить дом",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Существует хотя бы 1 дом\", function () {",
													"  pm.expect(pm.response.json().length).to.be.gte(1);",
													"});",
													"",
													"if (pm.response.json().length >= 1)",
													"    postman.setEnvironmentVariable (\"house_id\", pm.response.json()[0].id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить устройство",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Существует хотя бы 1 устройство\", function () {",
													"  pm.expect(pm.response.json().length).to.be.gte(1);",
													"});",
													"",
													"if (pm.response.json().length >= 1) {",
													"",
													"    var device = pm.response.json().find(function (el) {",
													"        return el.deviceType == \"Z_WAY_DEVICE\" && Object.values(el.channels).any(x => x.deviceProperties.any(y => y.kind == \"OPEN_CLOSE\"));",
													"    });",
													"",
													"    postman.setEnvironmentVariable (\"device_id\", device.id)",
													"    postman.setEnvironmentVariable (\"device_nodeId\", device.nodeId)",
													"    postman.setEnvironmentVariable (\"device_nodeId_number\", device.nodeId.substring(device.nodeId.lastIndexOf(\"_\") + 1))",
													"    postman.setEnvironmentVariable (\"device_controllerId\", device.controllerId)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{house_id}}/devices?withCameras=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{house_id}}",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение информации о свойствах устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"{",
													"    for(let prop of channelInfo.deviceProperties)",
													"    {",
													"        if(prop.kind == \"GUARD_MODE\")",
													"        {",
													"            pm.environment.set(\"device_guardPropId\", prop.id);",
													"            pm.environment.set(\"device_guardPropValue\", prop.value);",
													"        }",
													"",
													"        if(prop.kind == \"KEEP_ALIVE\")",
													"            pm.environment.set(\"device_keepAlivePropId\", prop.id);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика (Вскрытие)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика (Вскрытие)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика (Сработка)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 3000);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"db_collections\", \"controllers,users\");"
										]
									}
								}
							]
						},
						{
							"name": "Подготовка DVR камеры и тестового режима",
							"item": [
								{
									"name": "Включаем тестовый режим",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_user_id}}\",\n    \"testModeEnabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/{{test_user_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Повышаем лимит камер",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newLimit\": 10,\n    \"platformType\": \"ELTEX\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/administration/video/cameras/limit/{{test_user_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"video",
												"cameras",
												"limit",
												"{{test_user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включаем DVR на камере",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{guard_kam}}\",\n    \"houseId\": \"{{test_user_house}}\",\n    \"dvr\": {\n        \"dvrDepth\": 1,\n        \"dvrSpace\": 1,\n        \"dvrLockDays\": 1\n    },\n    \"motionDetectorEnabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras/{{guard_kam}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{guard_kam}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка охранных устройств",
							"item": [
								{
									"name": "Получение статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство доступно\", function () {",
													"  pm.expect(pm.response.json().status).to.be.equal(\"ONLINE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение охранного статуса дома",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Дом готов к постановке на охрану\", function () {",
													"  pm.expect(pm.response.json().every(x => x.guardStatus.status == \"INIT\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/zones?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"zones"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка устройства и групп",
							"item": [
								{
									"name": "Переименование",
									"item": [
										{
											"name": "Переименовать устройство",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"deviceLocation\": [\"\"],\n\t\"title\": \"Тестовая дверь\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверить имя устройства",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Имя устройства совпадает с ожидаемым\", function () {",
															"  pm.expect(pm.response.json().title).to.be.equal(\"Тестовая дверь\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Переименовать устройство №2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"title\": \"Дверь\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверить имя устройства №2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Имя устройства совпадает с ожидаемым\", function () {",
															"  pm.expect(pm.response.json().title).to.be.equal(\"Дверь\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события переименования в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"user_change_device\";",
															"let checkTime = false;",
															"let messagePart = \"изменил название устройства\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}",
															"",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Группы",
									"item": [
										{
											"name": "Создание группы",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"postman.setEnvironmentVariable (\"group_id\", pm.response.text())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"Новая группа\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/houses/{{house_id}}/groups",
													"host": [
														"{{host}}"
													],
													"path": [
														"houses",
														"{{house_id}}",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Назначить устройству группу",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"deviceLocation\": [\n        \"{{group_id}}\"\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверить группу устройства",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Группа устройства совпадает с ожидаемым\", function () {",
															"  pm.expect(pm.response.json().deviceLocation).to.include(pm.environment.get(\"group_id\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Назначить камере группу",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Группа устройства совпадает с ожидаемым\", function () {",
															"  pm.expect(pm.response.json().deviceLocation).to.include(pm.environment.get(\"group_id\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"rtsp\",\n    \"houseId\": \"{{house_id}}\",\n    \"rtspStream\": \"rtsp://10.25.200.50:554/H264?ch=1&subtype=0&proto=Onvif\",\n    \"platformType\": \"ELTEX\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"status\": \"ONLINE\",\n    \"deviceLocation\": [\n        \"{{group_id}}\"\n    ],\n    \"enabled\": true,\n    \"dvr\": {\n        \"dvrDepth\": 3,\n        \"dvrSpace\": 5,\n        \"dvrLockDays\": 1,\n        \"empty\": false\n    },\n    \"motionDetectorEnabled\": false,\n    \"agentId\": null,\n    \"motionDelay\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/video/cameras/{{guard_kam}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"video",
														"cameras",
														"{{guard_kam}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удалить группу",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/houses/{{house_id}}/groups/{{group_id}}?checkEmptyGroups=true",
													"host": [
														"{{host}}"
													],
													"path": [
														"houses",
														"{{house_id}}",
														"groups",
														"{{group_id}}"
													],
													"query": [
														{
															"key": "checkEmptyGroups",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события изменения местоположения в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Проверка наличия сообщений об изменении местоположения\", function () {",
															"    let kam = false;",
															"    let door = false;",
															"    for(let i in pm.response.json().data){",
															"        // Проверка на смену группы у камеры",
															"        if((pm.response.json().data[i].type === \"user_change_device\") && pm.response.json().data[i].message.includes('на rtsp изменил местоположение')) {",
															"            kam = true;",
															"        }",
															"        // Проверка на смену группы у двери",
															"        else if ((pm.response.json().data[i].type === \"user_change_device\") && pm.response.json().data[i].message.includes('на Дверь изменил местоположение')) door = true;",
															"    }",
															"    pm.expect(kam).to.eql(true);",
															"    pm.expect(door).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=10&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Включение/исключение в сервисе",
									"item": [
										{
											"name": "Добавить устройство в сервис охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/guard/update",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"update"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка включения устройства в охрану",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Устройство включено в сервис охраны\", function () {",
															"   var jsonData = pm.response.json();",
															"   ",
															"    var result_device = jsonData.find(obj => {",
															"        return obj.objectInfo.deviceId == pm.environment.get(\"device_id\");",
															"    });   ",
															"",
															"    pm.expect(result_device).to.not.be.undefined;",
															"});",
															"pm.test(\"Камера включена в сервис охраны (по умолчанию)\", function () {",
															"   var jsonData = pm.response.json();",
															"   ",
															"    var result_kam = jsonData.find(obj => {",
															"        return obj.objectInfo.cameraId == pm.environment.get(\"guard_kam\");",
															"    });   ",
															"",
															"    pm.expect(result_kam).to.not.be.undefined;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/zones?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"zones"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Удалить устройство из сервиса охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": false\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/guard/update",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"update"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка исключения устройства из охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Устройство исключено из сервиса охраны\", function () {",
															"   var jsonData = pm.response.json();",
															"   ",
															"    var result = jsonData.find(obj => {",
															"        return obj.objectInfo.deviceId == pm.environment.get(\"device_id\");",
															"    });",
															"",
															"    pm.expect(result).to.be.undefined;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/zones?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"zones"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события исключения из охраны в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"remove_device_from_zone\";",
															"let checkTime = false;",
															"let messagePart = \"удалено из охраны\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Можно ли поставить дом без устройств в охране на охрану ?",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Проверка статуса охраны\", function () {",
															"    for(let i in pm.response.json().variables){",
															"        if (pm.response.json().variables[i].id == \"emergency\") pm.expect(pm.response.json().variables[i].value).eql(\"notReady\")",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/houses/{{test_user_house}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"houses",
														"{{test_user_house}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Вернуть устройство в сервис охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/guard/update",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"update"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события добавления в охрану в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"add_device_in_zone\";",
															"let checkTime = false;",
															"let messagePart = \"добавлено в охрану\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Удалить камеру из сервиса охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{guard_kam}}\",\n            \"deviceType\": \"CAMERA\",\n            \"guardInclude\": false\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/guard/update",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"update"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка исключения камеры из охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Устройство исключено из сервиса охраны\", function () {",
															"   var jsonData = pm.response.json();",
															"   ",
															"    var result = jsonData.find(obj => {",
															"        return obj.objectInfo.cameraId == pm.environment.get(\"guard_kam\");",
															"    });",
															"",
															"    pm.expect(result).to.be.undefined;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/zones?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"zones"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Можно ли поставить дом без камер в охране на охрану ?",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Проверка статуса охраны\", function () {",
															"    for(let i in pm.response.json().variables){",
															"        if (pm.response.json().variables[i].id == \"emergency\") pm.expect(pm.response.json().variables[i].value).eql(\"idle\")",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/houses/{{test_user_house}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"houses",
														"{{test_user_house}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Вернуть камеру в сервис охраны",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{guard_kam}}\",\n            \"deviceType\": \"CAMERA\",\n            \"guardInclude\": true\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/guard/update",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"update"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка добавления камеры в охрану",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Устройство исключено из сервиса охраны\", function () {",
															"   var jsonData = pm.response.json();",
															"   ",
															"    var result = jsonData.find(obj => {",
															"        return obj.objectInfo.cameraId == pm.environment.get(\"guard_kam\");",
															"    });",
															"",
															"    pm.expect(result).to.be.not.undefined;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/zones?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"zones"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Период опроса",
									"item": [
										{
											"name": "Смена периода опроса 60 c",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"60\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Смена периода опроса 10 c",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"10\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события смены периода опроса в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"user_change_device_property\";",
															"let checkTime = false;",
															"let messagePart = \"Период опроса устройства\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Постановка/снятие без сработки",
							"item": [
								{
									"name": "Отключение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события процесса постановки на охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_arming\";",
													"let checkTime = false;",
													"let messagePart = \"ставит объект на охрану\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события готовности устройства к охране в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_ready_for_guard\";",
													"let checkTime = false;",
													"let messagePart = \"готово к охране\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события постановки на охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_on\";",
													"let checkTime = false;",
													"let messagePart = \"Поставлено на охрану\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события процесса снятия с охраны в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_disarming\";",
													"let checkTime = false;",
													"let messagePart = \"снимает объект с охраны\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события снятия с охраны в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_off\";",
													"let checkTime = false;",
													"let messagePart = \"Снято с охраны\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Постановка/снятие в сработке",
							"item": [
								{
									"name": "Отключение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика при включении FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\",\n    \"rule\": \"guardMode:2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события ошибки постановки на охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_error\";",
													"let checkTime = false;",
													"let messagePart = \"Ошибка постановки на охрану\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Постановка -> сработка -> снятие",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события проникновения в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"break_in_house\";",
													"let checkTime = false;",
													"let messagePart = \"Проникновение в объект\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка  скриншота в событии проникновения в журнале Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка источника скриншота (в .jpg должна быть платформа, см. задачу #260140)\", function () {",
													"        for (let i in pm.response.json().data) {",
													"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
													"                let evi_host = pm.globals.get(\"EVI_host\").split('/', 4)[2];",
													"                console.log(\"evi_host\", evi_host)",
													"                console.log(\"platform_host\", platform_host)",
													"                for (let key in pm.response.json().data[i].links[0]) {",
													"                    if (key.includes(\"inkPhoto\")) {",
													"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(evi_host)",
													"                        }",
													"                        else{",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    });",
													"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
													"    function time_converter(str_time_at_millis) {",
													"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
													"        function zero_plus(num) {",
													"            if (num.toString().length === 1) {",
													"                num = 0 + num.toString()",
													"            }",
													"            return num",
													"        }",
													"        // Получаем дату",
													"        var dateFormat = new Date(Number(str_time_at_millis));",
													"        // Составляем строку из даты (в формате как в url) точность до часов",
													"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
													"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
													"        console.log(\"dateNewFormat\", dateNewFormat);",
													"        return dateNewFormat;",
													"    }",
													"    // pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
													"    //     for (let i in pm.response.json().data) {",
													"    //         if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"    //             let time = pm.response.json().data[i].created_at_millis",
													"    //             let dateURLFormat = time_converter(time)",
													"    //             for (let key in pm.response.json().data[i].links[0]) {",
													"    //                 // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
													"    //                 if (key.includes(\"inkVideo\")) {",
													"    //                     pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
													"    //                 }",
													"    //                 if (key.includes(\"inkPhoto\")) {",
													"    //                     if(key.includes(\"linkPhotoMp4\")) {",
													"    //                         // Проверка времени в ссылках, должно быть корректное время в UTC",
													"    //                     //     pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
													"    //                     // }",
													"    //                     // else{",
													"    //                         pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
													"    //                     }",
													"    //                 }",
													"    //             }",
													"    //         }",
													"    //     }",
													"    // });",
													"",
													"}",
													"catch (e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=5&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "9999999999999"
												},
												{
													"key": "language",
													"value": "ru"
												},
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "level",
													"value": "SECURITY"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Постановка без FLiRS-> сработка -> снятие",
							"item": [
								{
									"name": "Отключение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка  скриншота в событии проникновения в журнале Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка источника скриншота (в .jpg должна быть платформа, см. задачу #260140)\", function () {",
													"        for (let i in pm.response.json().data) {",
													"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
													"                let evi_host = pm.globals.get(\"EVI_host\").split('/', 4)[2];",
													"                console.log(\"evi_host\", evi_host)",
													"                console.log(\"platform_host\", platform_host)",
													"                for (let key in pm.response.json().data[i].links[0]) {",
													"                    if (key.includes(\"inkPhoto\")) {",
													"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(evi_host)",
													"                        }",
													"                        else{",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    });",
													"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
													"    function time_converter(str_time_at_millis) {",
													"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
													"        function zero_plus(num) {",
													"            if (num.toString().length === 1) {",
													"                num = 0 + num.toString()",
													"            }",
													"            return num",
													"        }",
													"        // Получаем дату",
													"        var dateFormat = new Date(Number(str_time_at_millis));",
													"        // Составляем строку из даты (в формате как в url) точность до часов",
													"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
													"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
													"        console.log(\"dateNewFormat\", dateNewFormat);",
													"        return dateNewFormat;",
													"    }",
													"    // pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
													"    //     for (let i in pm.response.json().data) {",
													"    //         if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"    //             let time = pm.response.json().data[i].created_at_millis",
													"    //             let dateURLFormat = time_converter(time)",
													"    //             for (let key in pm.response.json().data[i].links[0]) {",
													"    //                 // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
													"    //                 if (key.includes(\"inkVideo\")) {",
													"    //                     pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
													"    //                 }",
													"    //                 if (key.includes(\"inkPhoto\")) {",
													"    //                     if(key.includes(\"linkPhotoMp4\")) {",
													"    //                         // Проверка времени в ссылках, должно быть корректное время в UTC",
													"    //                     //     pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
													"    //                     // }",
													"    //                     // else{",
													"    //                         pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
													"    //                     }",
													"    //                 }",
													"    //             }",
													"    //         }",
													"    //     }",
													"    // });",
													"",
													"}",
													"catch (e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=5&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "9999999999999"
												},
												{
													"key": "language",
													"value": "ru"
												},
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "level",
													"value": "SECURITY"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перепостановка в состоянии сработки после ошибки",
							"item": [
								{
									"name": "Выключение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													"",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика при включении FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\",\n    \"rule\": \"guardMode:2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Повторная постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение форсирование FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния форсирования FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перепостановка в выключенном состоянии после ошибки",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_guardStatus.message",
													"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события потери связи с устройством в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_error_device_connect\";",
													"let checkTime = false;",
													"let messagePart = \"Ошибка охраны: потеряна связь с устройством\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса с underGuard=false",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проникновение при недоступном датчике после ошибки",
							"item": [
								{
									"name": "Создание датчика движения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);",
													"",
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"template\": \"sz_pir\",\n    \"nodeId\": 7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/add",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание добавления устройства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=DEVICE_ADD&C_deviceInfo.nodeId=ZWAVE_ELTEX_7&timeout=25000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_ADD"
												},
												{
													"key": "C_deviceInfo.nodeId",
													"value": "ZWAVE_ELTEX_7"
												},
												{
													"key": "timeout",
													"value": "25000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание добавления устройства в охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=NEW_UNREAD_EVENT&C_eventLog.type=device_status_online&timeout=15000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "NEW_UNREAD_EVENT"
												},
												{
													"key": "C_eventLog.type",
													"value": "device_status_online"
												},
												{
													"key": "timeout",
													"value": "15000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание готовности охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=GUARD_STATUS_CHANGE&C_guardStatus.status=INIT&timeout=15000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "timeout",
													"value": "15000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить устройство",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Существует хотя бы 1 устройство\", function () {",
													"  pm.expect(pm.response.json().length).to.be.gte(1);",
													"});",
													"",
													"if (pm.response.json().length >= 1) {",
													"",
													"    var device = pm.response.json().find(function (el) {",
													"        return el.deviceType == \"Z_WAY_DEVICE\" && Object.values(el.channels).any(x => x.deviceProperties.any(y => y.kind == \"MOTION\"));",
													"    });",
													"",
													"    postman.setEnvironmentVariable (\"device2_id\", device.id)",
													"    postman.setEnvironmentVariable (\"device2_nodeId\", device.nodeId)",
													"    postman.setEnvironmentVariable (\"device2_nodeId_number\", device.nodeId.substring(device.nodeId.lastIndexOf(\"_\") + 1))",
													"    postman.setEnvironmentVariable (\"device2_controllerId\", device.controllerId)",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{house_id}}/devices?withCameras=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{house_id}}",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [1000]);",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение первого датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_guardStatus.message",
													"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика движения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device2_nodeId_number}}/prop/0/motion",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device2_nodeId_number}}",
												"prop",
												"0",
												"motion"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение первого датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Начать удаление устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [3000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/ZWAVE_ELTEX_7/remove",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"ZWAVE_ELTEX_7",
												"remove"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика движения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device2_nodeId_number}}",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device2_nodeId_number}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перепостановка в состоянии сработки после проникновения",
							"item": [
								{
									"name": "Постановка дома на охрану Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [7000]);",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события процесса перепостановки на охрану в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"guard_rearming\";",
													"let checkTime = false;",
													"let messagePart = \"выполняет перепостановку на охрану на объекте\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка  скриншота в событии проникновения в журнале Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка источника скриншота (в .jpg должна быть платформа, см. задачу #260140)\", function () {",
													"        for (let i in pm.response.json().data) {",
													"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
													"                let evi_host = pm.globals.get(\"EVI_host\").split('/', 4)[2];",
													"                console.log(\"evi_host\", evi_host)",
													"                console.log(\"platform_host\", platform_host)",
													"                for (let key in pm.response.json().data[i].links[0]) {",
													"                    if (key.includes(\"inkPhoto\")) {",
													"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(evi_host)",
													"                        }",
													"                        else{",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    });",
													"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
													"    function time_converter(str_time_at_millis) {",
													"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
													"        function zero_plus(num) {",
													"            if (num.toString().length === 1) {",
													"                num = 0 + num.toString()",
													"            }",
													"            return num",
													"        }",
													"        // Получаем дату",
													"        var dateFormat = new Date(Number(str_time_at_millis));",
													"        // Составляем строку из даты (в формате как в url) точность до часов",
													"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
													"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
													"        console.log(\"dateNewFormat\", dateNewFormat);",
													"        return dateNewFormat;",
													"    }",
													"    // pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
													"    //     for (let i in pm.response.json().data) {",
													"    //         if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"    //             let time = pm.response.json().data[i].created_at_millis",
													"    //             let dateURLFormat = time_converter(time)",
													"    //             for (let key in pm.response.json().data[i].links[0]) {",
													"    //                 // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
													"    //                 if (key.includes(\"inkVideo\")) {",
													"    //                     pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
													"    //                 }",
													"    //                 if (key.includes(\"inkPhoto\")) {",
													"    //                     if(key.includes(\"linkPhotoMp4\")) {",
													"    //                         // Проверка времени в ссылках, должно быть корректное время в UTC",
													"    //                         pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
													"    //                     }",
													"    //                     else{",
													"    //                         pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
													"    //                     }",
													"    //                 }",
													"    //             }",
													"    //         }",
													"    //     }",
													"    // });",
													"",
													"}",
													"catch (e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=10&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "9999999999999"
												},
												{
													"key": "language",
													"value": "ru"
												},
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "level",
													"value": "SECURITY"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Ошибка постановки на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ERROR"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перепостановка в нормализованном состоянии",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка  скриншота в событии проникновения в журнале Copy 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка источника скриншота (в .jpg должна быть платформа, см. задачу #260140)\", function () {",
													"        for (let i in pm.response.json().data) {",
													"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
													"                let evi_host = pm.globals.get(\"EVI_host\").split('/', 4)[2];",
													"                console.log(\"evi_host\", evi_host)",
													"                console.log(\"platform_host\", platform_host)",
													"                for (let key in pm.response.json().data[i].links[0]) {",
													"                    if (key.includes(\"inkPhoto\")) {",
													"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(evi_host)",
													"                        }",
													"                        else{",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    });",
													"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
													"    function time_converter(str_time_at_millis) {",
													"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
													"        function zero_plus(num) {",
													"            if (num.toString().length === 1) {",
													"                num = 0 + num.toString()",
													"            }",
													"            return num",
													"        }",
													"        // Получаем дату",
													"        var dateFormat = new Date(Number(str_time_at_millis));",
													"        // Составляем строку из даты (в формате как в url) точность до часов",
													"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
													"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
													"        console.log(\"dateNewFormat\", dateNewFormat);",
													"        return dateNewFormat;",
													"    }",
													"    // pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
													"    //     for (let i in pm.response.json().data) {",
													"    //         if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"    //             let time = pm.response.json().data[i].created_at_millis",
													"    //             let dateURLFormat = time_converter(time)",
													"    //             for (let key in pm.response.json().data[i].links[0]) {",
													"    //                 // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
													"    //                 if (key.includes(\"inkVideo\")) {",
													"    //                     pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
													"    //                 }",
													"    //                 if (key.includes(\"inkPhoto\")) {",
													"    //                     if(key.includes(\"linkPhotoMp4\")) {",
													"    //                         // Проверка времени в ссылках, должно быть корректное время в UTC",
													"    //                     //     pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
													"    //                     // }",
													"    //                     // else{",
													"    //                         pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
													"    //                     }",
													"    //                 }",
													"    //             }",
													"    //         }",
													"    //     }",
													"    // });",
													"",
													"}",
													"catch (e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=5&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "9999999999999"
												},
												{
													"key": "language",
													"value": "ru"
												},
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "level",
													"value": "SECURITY"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перепостановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"rearm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Постановка/снятие при датчике в аварии",
							"item": [
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события открытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Открыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события закрытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Закрыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Вскрытие датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события вскрытия датчика в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_tamper_change\";",
													"let checkTime = false;",
													"let messagePart = \"скрытие обнаружено\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события нормализации вскрытия датчика в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_tamper_change\";",
													"let checkTime = false;",
													"let messagePart = \"скрытие не обнаружено\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "NOT_READY"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены статуса устройства в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_status_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Статус устройства\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Вскрытие датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"power"
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/tamper",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"tamper"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены статуса устройства на \"Онлайн\" в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_status_online\";",
													"let checkTime = false;",
													"let messagePart = \"Статус устройства\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка события проникновения",
							"item": [
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Проникновение\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "ALARM"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка  скриншота в событии проникновения в журнале Copy 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка источника скриншота (в .jpg должна быть платформа, см. задачу #260140)\", function () {",
													"        for (let i in pm.response.json().data) {",
													"            if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"                let platform_host = pm.globals.get(\"host\").split('/', 4)[2].split(':', 2)[0];",
													"                let evi_host = pm.globals.get(\"EVI_host\").split('/', 4)[2];",
													"                console.log(\"evi_host\", evi_host)",
													"                console.log(\"platform_host\", platform_host)",
													"                for (let key in pm.response.json().data[i].links[0]) {",
													"                    if (key.includes(\"inkPhoto\")) {",
													"                        if  (key.includes(\"linkPhotoMp4\") || key.includes(\"Video\") ) {",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(evi_host)",
													"                        }",
													"                        else{",
													"                            pm.expect(pm.response.json().data[i].links[0][key]).to.include(platform_host)",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    });",
													"    // Функция чтобы перевести дату из Timestamp в требуемый формат",
													"    function time_converter(str_time_at_millis) {",
													"        // Функция для того чтобы подставлять 0 перед значением из одной цифры (например день не 1, а 01)",
													"        function zero_plus(num) {",
													"            if (num.toString().length === 1) {",
													"                num = 0 + num.toString()",
													"            }",
													"            return num",
													"        }",
													"        // Получаем дату",
													"        var dateFormat = new Date(Number(str_time_at_millis));",
													"        // Составляем строку из даты (в формате как в url) точность до часов",
													"        var dateNewFormat = dateFormat.getFullYear().toString() + \"/\" + zero_plus(dateFormat.getUTCMonth() + 1).toString() + \"/\" +",
													"            zero_plus(dateFormat.getUTCDate()).toString() + \"/\" + zero_plus(dateFormat.getUTCHours()).toString() + \"/\";",
													"        console.log(\"dateNewFormat\", dateNewFormat);",
													"        return dateNewFormat;",
													"    }",
													"    // pm.test(\"Проверка времени в ссылках на скриншот(см. задачу #262010)\", function () {",
													"    //     for (let i in pm.response.json().data) {",
													"    //         if (pm.response.json().data[i].type === \"break_in_house\" && pm.response.json().data[i].color === \"DANGER\") {",
													"    //             let time = pm.response.json().data[i].created_at_millis",
													"    //             let dateURLFormat = time_converter(time)",
													"    //             for (let key in pm.response.json().data[i].links[0]) {",
													"    //                 // Проверка времени в Timestamp, с точностью до 3 символов сзади (999 секунд)",
													"    //                 if (key.includes(\"inkVideo\")) {",
													"    //                     pm.expect(pm.response.json().data[i].links[0][key]).to.include(time.slice(0, -3))",
													"    //                 }",
													"    //                 if (key.includes(\"inkPhoto\")) {",
													"    //                     if(key.includes(\"linkPhotoMp4\")) {",
													"    //                         // Проверка времени в ссылках, должно быть корректное время в UTC",
													"    //                     //     pm.expect(pm.response.json().data[i].links[0][key]).to.include(dateURLFormat)",
													"    //                     // }",
													"    //                     // else{",
													"    //                         pm.expect(pm.response.json().data[i].links[0][key]).to.include(\".jpg\")",
													"    //                     }",
													"    //                 }",
													"    //             }",
													"    //         }",
													"    //     }",
													"    // });",
													"",
													"}",
													"catch (e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=5&offset=0&fromMillis=9999999999999&language=ru&houseId={{house_id}}&level=SECURITY",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "fromMillis",
													"value": "9999999999999"
												},
												{
													"key": "language",
													"value": "ru"
												},
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "level",
													"value": "SECURITY"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Обработка нештатных ситуаций при работе с охраной",
							"item": [
								{
									"name": "Перезагрузка контроллера при снятой охране",
									"item": [
										{
											"name": "Отключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/disconnect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"disconnect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса контроллера \"Недоступен\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=DISCONNECTED&timeout=300000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_STATUS"
														},
														{
															"key": "C_status",
															"value": "DISCONNECTED"
														},
														{
															"key": "timeout",
															"value": "300000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события потери связи с контроллером в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"guard_error_controller_connect\";",
															"let checkTime = false;",
															"let messagePart = \"Ошибка охраны: потеряна связь с хабом\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "NOT_READY"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса контроллера \"Доступен\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 5000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_STATUS"
														},
														{
															"key": "C_status",
															"value": "^CONNECTED"
														},
														{
															"key": "timeout",
															"value": "180000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события восстановления связи с контроллером в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"guard_controller_connect_restored\";",
															"let checkTime = false;",
															"let messagePart = \"Сервис охраны: Связь с хабом восстановлена\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Сработка датчика при снятой охране",
									"item": [
										{
											"name": "Снятие дома с охраны (без теста)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Сработка датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"on\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"prop",
														"0",
														"openClose"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "NOT_READY"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Нормализация датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"off\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"prop",
														"0",
														"openClose"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Недоступность датчика при снятой охране",
									"item": [
										{
											"name": "Снятие дома с охраны (без теста)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"power"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Не готов к постановке на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=NOT_READY&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "NOT_READY"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Включение датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"power"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Недоступность датчика при поставленной охране",
									"item": [
										{
											"name": "Постановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"arm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"power"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с устройством\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Устройство недоступно|Ошибка охраны: потеряна связь с устройством&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "ERROR"
														},
														{
															"key": "C_guardStatus.message",
															"value": "Устройство недоступно|Ошибка охраны: потеряна связь с устройством"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка события потери связи с устройством в журнале",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let eventType = \"guard_error_device_connect\";",
															"let checkTime = false;",
															"let messagePart = \"Ошибка охраны: потеряна связь с устройством\";",
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\") {",
															"    let eventIsPresent = pm.response.json().data.any(x => ",
															"    x.type == eventType &&",
															"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
															"    x.message.includes(messagePart));",
															"",
															"    let tries = 0;",
															"    if(pm.environment.has(\"event_tries\"))",
															"        tries = pm.environment.get(\"event_tries\");",
															"    if(!eventIsPresent && tries < 10) {",
															"        tries++;",
															"        pm.environment.set(\"event_tries\", tries);",
															"        postman.setNextRequest(pm.info.requestId);",
															"        return;",
															"    }",
															"",
															"    pm.environment.unset(\"event_tries\");",
															"    pm.test(\"Событие записано\", function () {",
															"        pm.expect(eventIsPresent).to.be.true;",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"events",
														"endless"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "offset",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Включение датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 2000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/power",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"power"
													]
												}
											},
											"response": []
										},
										{
											"name": "Перепостановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"rearm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Снятие дома с охраны",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Перезагрузка контроллера при поставленной охране",
									"item": [
										{
											"name": "Смена периода опроса 240 с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"240\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Постановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"arm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/disconnect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"disconnect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с контроллером\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "ERROR"
														},
														{
															"key": "C_guardStatus.message",
															"value": "Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса контроллера \"Доступен\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 5000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_STATUS"
														},
														{
															"key": "C_status",
															"value": "^CONNECTED"
														},
														{
															"key": "timeout",
															"value": "180000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Перепостановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"rearm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Снятие дома с охраны",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Смена периода опроса 10 с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"10\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Перезагрузка контроллера при перепостановке на охрану",
									"item": [
										{
											"name": "Смена периода опроса 240 с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"240\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Постановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"arm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Сработка датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"on\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"prop",
														"0",
														"openClose"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Проникновение\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ALARM&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "ALARM"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Нормализация датчика",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"off\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"{{device_nodeId_number}}",
														"prop",
														"0",
														"openClose"
													]
												}
											},
											"response": []
										},
										{
											"name": "Перепостановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"rearm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 200);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/disconnect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"disconnect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Ошибка охраны: потеряна связь с контроллером\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=ERROR&C_guardStatus.message=Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "ERROR"
														},
														{
															"key": "C_guardStatus.message",
															"value": "Ошибка охраны: потеряна связь с хабом|Ошибка охраны: сбой сервиса Z-Wave"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса контроллера \"Доступен\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 5000);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_STATUS&C_status=^CONNECTED&timeout=180000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_STATUS"
														},
														{
															"key": "C_status",
															"value": "^CONNECTED"
														},
														{
															"key": "timeout",
															"value": "180000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Перепостановка дома на охрану",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/rearm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"rearm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Поставлено на охрану\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "OK"
														},
														{
															"key": "C_underGuard",
															"value": "true"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Снятие дома с охраны",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"  pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"guard",
														"devices",
														"zone",
														"disarm"
													],
													"query": [
														{
															"key": "houseId",
															"value": "{{house_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание статуса \"Снято с охраны\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_guardStatus.status",
															"value": "INIT"
														},
														{
															"key": "C_underGuard",
															"value": "false"
														},
														{
															"key": "C_type",
															"value": "GUARD_STATUS_CHANGE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Смена периода опроса 10 с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"{",
															"    setTimeout(function(){}, 4000);",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"10\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_keepAlivePropId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl",
														"{{device_controllerId}}",
														"devices",
														"{{device_nodeId}}",
														"props",
														"{{device_keepAlivePropId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание изменения свойства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if(pm.environment.get(\"platform_type\") != \"local\")",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE&timeout={{keepAlive_timeout}}",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_type",
															"value": "PROP_CHANGE"
														},
														{
															"key": "timeout",
															"value": "{{keepAlive_timeout}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Проверка форсирования FLiRS",
							"item": [
								{
									"name": "Получение информации о свойствах устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"{",
													"    for(let prop of channelInfo.deviceProperties)",
													"    {",
													"        if(prop.kind == \"GUARD_MODE\")",
													"            pm.environment.set(\"device_guardPropId\", prop.id);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство включено\", function () {",
													"  let result = null;",
													"",
													"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"  {",
													"      for(let prop of channelInfo.deviceProperties)",
													"      {",
													"          if(prop.kind == \"GUARD_MODE\")",
													"              result = prop.value;",
													"      }",
													"  }",
													"",
													"  pm.expect(result).to.be.equal(\"true\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": false,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS отключен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.false;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство выключено\", function () {",
													"    let result = null;",
													"",
													"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"  {",
													"      for(let prop of channelInfo.deviceProperties)",
													"      {",
													"          if(prop.kind == \"GUARD_MODE\")",
													"              result = prop.value;",
													"      }",
													"  }",
													"",
													"  pm.expect(result).to.be.equal(\"false\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство выключено\", function () {",
													"    let result = null;",
													"",
													"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"  {",
													"      for(let prop of channelInfo.deviceProperties)",
													"      {",
													"          if(prop.kind == \"GUARD_MODE\")",
													"              result = prop.value;",
													"      }",
													"  }",
													"",
													"  pm.expect(result).to.be.equal(\"false\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"houseId\": \"{{house_id}}\",\n    \"isAlwaysOn\": true,\n    \"update\": [\n        {\n            \"id\": \"{{device_id}}\",\n            \"deviceType\": \"Z_WAY_DEVICE\",\n            \"guardInclude\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/guard/update",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка состояния FLiRS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"FLiRS включен\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isAlwaysOn).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/suitable?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"suitable"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Постановка дома на охрану",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/arm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"arm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Поставлено на охрану\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=OK&C_underGuard=true&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "OK"
												},
												{
													"key": "C_underGuard",
													"value": "true"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Снятие дома с охраны",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/guard/devices/zone/disarm?houseId={{house_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"guard",
												"devices",
												"zone",
												"disarm"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание статуса \"Снято с охраны\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_guardStatus.status=INIT&C_underGuard=false&C_type=GUARD_STATUS_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_guardStatus.status",
													"value": "INIT"
												},
												{
													"key": "C_underGuard",
													"value": "false"
												},
												{
													"key": "C_type",
													"value": "GUARD_STATUS_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка статуса устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Устройство включено\", function () {",
													"    let result = null;",
													"",
													"  for(let [channelId, channelInfo] of Object.entries(pm.response.json().channels))",
													"  {",
													"      for(let prop of channelInfo.deviceProperties)",
													"      {",
													"          if(prop.kind == \"GUARD_MODE\")",
													"              result = prop.value;",
													"      }",
													"  }",
													"",
													"  pm.expect(result).to.be.equal(\"true\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка событий охранного режима в журнале",
							"item": [
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Выключение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены охранного режима в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device_property\";",
													"let checkTime = false;",
													"let messagePart = \"Охранный режим\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение охранного режима",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"setTimeout(function(){}, 250);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}/props/{{device_guardPropId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}",
												"props",
												"{{device_guardPropId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание изменения свойства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=PROP_CHANGE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_type",
													"value": "PROP_CHANGE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события смены охранного режима в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device_property\";",
													"let checkTime = false;",
													"let messagePart = \"Охранный режим\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверка отключения уведомлений",
							"item": [
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение уведомлений от устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceLocation\": [\"\"],\n\t\"muted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события открытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Открыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события закрытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Закрыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение уведомлений от устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"muted\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события отключения уведомлений от устройства в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device\";",
													"let checkTime = false;",
													"let messagePart = \"изменил без уведомлений на Включено\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия события открытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Открыто\";",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Событие не записано\", function () {",
													"  pm.expect(pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart)",
													"    )).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия события закрытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Закрыто\";",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Событие не записано\", function () {",
													"  pm.expect(pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart)",
													"    )).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Включение уведомлений от устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceLocation\": [\"\"],\n    \"muted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/devices/{{device_nodeId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"devices",
												"{{device_nodeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события включения уведомлений от устройства в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"user_change_device\";",
													"let checkTime = false;",
													"let messagePart = \"изменил без уведомлений на Выключено\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сработка датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"on\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события открытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Открыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Нормализация датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"off\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/{{device_nodeId_number}}/prop/0/openClose",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"{{device_nodeId_number}}",
												"prop",
												"0",
												"openClose"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка события закрытия двери в журнале",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let eventType = \"device_property_changed\";",
													"let checkTime = false;",
													"let messagePart = \"Закрыто\";",
													"",
													"if(pm.environment.get(\"platform_type\") != \"local\") {",
													"    let eventIsPresent = pm.response.json().data.any(x => ",
													"    x.type == eventType &&",
													"    (!checkTime || parseInt(x.created_at_millis) > pm.environment.get(\"current_time\")) &&",
													"    x.message.includes(messagePart));",
													"",
													"    let tries = 0;",
													"    if(pm.environment.has(\"event_tries\"))",
													"        tries = pm.environment.get(\"event_tries\");",
													"    if(!eventIsPresent && tries < 10) {",
													"        tries++;",
													"        pm.environment.set(\"event_tries\", tries);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"",
													"    pm.environment.unset(\"event_tries\");",
													"    pm.test(\"Событие записано\", function () {",
													"        pm.expect(eventIsPresent).to.be.true;",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") != \"local\") setTimeout(function(){}, (pm.environment.has(\"event_tries\") ? 1 : 5) * Number(pm.globals.get(\"event_wait_time\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?houseId={{house_id}}&limit=1&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "houseId",
													"value": "{{house_id}}"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Отключение от WebSocket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": \"{{ctl_port}}\",\n    \"type\": \"{{ctl_protocol}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика открытия",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление контроллера для SL-10",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{zway_ctl_host}}/devices/6",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление контроллера (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление контроллера для SL-10",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{device_controllerId}}/remove",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{device_controllerId}}",
												"remove"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление пользователя (только облако)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(pm.environment.get(\"platform_type\") == \"local\")  {//Пропускаем удаление пользователя для SL-10",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{test_user_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_user_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "event_wait_time",
			"value": "500",
			"type": "string"
		},
		{
			"key": "sl10_username",
			"value": "test_user",
			"type": "string"
		},
		{
			"key": "sl10_password",
			"value": "test_user",
			"type": "string"
		},
		{
			"key": "override_zway_ctl_mac",
			"value": "CC:9D:A2:E2:39:AC",
			"type": "string",
			"disabled": true
		},
		{
			"key": "i",
			"value": "0",
			"type": "string",
			"disabled": true
		}
	]
}