{
	"info": {
		"_postman_id": "16018177-062b-4d76-95d0-0b2332198133",
		"name": "FTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16511326"
	},
	"item": [
		{
			"name": "Проверка работы платформы через интерфейс Администратора",
			"item": [
				{
					"name": "Абоненты",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (ab_test_1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);    ",
											"    postman.setEnvironmentVariable (\"id1\", jsonData.id);",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"    pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('id');",
											"        pm.expect(pm.response.json().id).to.string    ",
											"    });",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"username\": \"ab_test_1\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"ФАмилия\",\n    \"name\": \"ИМЯ\",\n    \"patronymic\": \"ОТЧЕСТВО\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"79999999999\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (ab_test_2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);    ",
											"    postman.setEnvironmentVariable (\"id2\", jsonData.id);",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"    pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('id');",
											"        pm.expect(pm.response.json().id).to.string    ",
											"    });",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"username\": \"ab_test_2\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"ИВАНОВ\",\n    \"name\": \"ИМЯ\",\n    \"patronymic\": \"ИВАНОВИЧ\",\n    \"email\": \"ab_test_2@maiiil\",\n    \"phone\": \"77777777777\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по всем фильтрам",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Есть поле data, значения поля total совпдает с реальным колличеством пользователей, а также поля id \",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.equal(1);",
											"        pm.expect(pm.response.json().data.length).to.equal(1);",
											"        pm.expect(pm.response.json().data[0].id).to.equal(pm.environment.get(\"id1\"));           ",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"roleId\",",
											"                        \"roleName\",",
											"                        \"username\",",
											"                        \"access\",",
											"                        \"accessMap\",",
											"                        \"houseIds\",",
											"                        \"houseIdsWithRefuser\",",
											"                        \"emailConfirm\",",
											"                        \"phoneConfirm\",",
											"                        \"password\",",
											"                        \"name\",",
											"                        \"surname\",",
											"                        \"patronymic\",",
											"                        \"email\",",
											"                        \"phone\",",
											"                        \"role\",",
											"                        \"status\",",
											"                        \"admin\",",
											"                        \"additionalAccounts\",",
											"                        \"language\",",
											"                        \"externalUrl\",",
											"                        \"videoParameters\",",
											"                        \"permissions\",",
											"                        \"roleSettings\",",
											"                        \"enabled\",",
											"                        \"ownedHouseIds\",",
											"                        \"testModeEnabled\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"roleId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"roleName\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"username\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"access\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"accessMap\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"houseIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"houseIdsWithRefuser\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"emailConfirm\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"phoneConfirm\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"password\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"surname\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"patronymic\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"email\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"phone\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"role\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"status\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"admin\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"additionalAccounts\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"language\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"externalUrl\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"videoParameters\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"platforms\",",
											"                                \"canAddAgentCamera\",",
											"                                \"enabled\",",
											"                                \"cameraLimits\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"platforms\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                },",
											"                                \"canAddAgentCamera\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"enabled\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"cameraLimits\": {",
											"                                    \"type\": \"object\",",
											"                                    \"required\": [",
											"                                        \"ELTEX\",",
											"                                        \"FLUSSONIC\"",
											"                                    ],",
											"                                    \"properties\": {",
											"                                        \"ELTEX\": {",
											"                                            \"type\": \"object\",",
											"                                            \"required\": [",
											"                                                \"canAddCamera\",",
											"                                                \"cameraLimit\",",
											"                                                \"cameraCount\"",
											"                                            ],",
											"                                            \"properties\": {",
											"                                                \"canAddCamera\": {",
											"                                                    \"type\": \"boolean\"",
											"                                                },",
											"                                                \"cameraLimit\": {",
											"                                                    \"type\": \"integer\"",
											"                                                },",
											"                                                \"cameraCount\": {",
											"                                                    \"type\": \"integer\"",
											"                                                }",
											"                                            }",
											"                                        },",
											"                                        \"FLUSSONIC\": {",
											"                                            \"type\": \"object\",",
											"                                            \"required\": [",
											"                                                \"canAddCamera\",",
											"                                                \"cameraLimit\",",
											"                                                \"cameraCount\"",
											"                                            ],",
											"                                            \"properties\": {",
											"                                                \"canAddCamera\": {",
											"                                                    \"type\": \"boolean\"",
											"                                                },",
											"                                                \"cameraLimit\": {",
											"                                                    \"type\": \"integer\"",
											"                                                },",
											"                                                \"cameraCount\": {",
											"                                                    \"type\": \"integer\"",
											"                                                }",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        },",
											"                        \"permissions\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        },",
											"                        \"roleSettings\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"defaultPage\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"defaultPage\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        },",
											"                        \"enabled\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"ownedHouseIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"testModeEnabled\": {",
											"                            \"type\": \"boolean\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    };",
											"   pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users?nameOrLogin=ab_test_1&phone=9&roleId=user&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "nameOrLogin",
											"value": "ab_test_1"
										},
										{
											"key": "phone",
											"value": "9"
										},
										{
											"key": "roleId",
											"value": "user"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по всем фильтрам",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Есть поле data, значения поля total совпдает с реальным колличеством пользователей, а также поля id \",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.equal(2);",
											"        pm.expect(pm.response.json().data.length).to.equal(2);",
											"        for(let i in pm.response.json().data) pm.expect(pm.response.json().data[i].id).to.be.oneOf([pm.environment.get(\"id1\"),pm.environment.get(\"id2\")] );                    ",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"roleId\",",
											"                        \"roleName\",",
											"                        \"username\",",
											"                        \"access\",",
											"                        \"accessMap\",",
											"                        \"houseIds\",",
											"                        \"houseIdsWithRefuser\",",
											"                        \"emailConfirm\",",
											"                        \"phoneConfirm\",",
											"                        \"password\",",
											"                        \"name\",",
											"                        \"surname\",",
											"                        \"patronymic\",",
											"                        \"email\",",
											"                        \"phone\",",
											"                        \"role\",",
											"                        \"status\",",
											"                        \"admin\",",
											"                        \"additionalAccounts\",",
											"                        \"language\",",
											"                        \"externalUrl\",",
											"                        \"videoParameters\",",
											"                        \"permissions\",",
											"                        \"roleSettings\",",
											"                        \"enabled\",",
											"                        \"ownedHouseIds\",",
											"                        \"testModeEnabled\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"roleId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"roleName\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"username\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"access\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"accessMap\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"houseIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"houseIdsWithRefuser\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"emailConfirm\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"phoneConfirm\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"password\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"surname\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"patronymic\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"email\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"phone\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"role\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"status\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"admin\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"additionalAccounts\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"language\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"externalUrl\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"videoParameters\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"platforms\",",
											"                                \"canAddAgentCamera\",",
											"                                \"enabled\",",
											"                                \"cameraLimits\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"platforms\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                },",
											"                                \"canAddAgentCamera\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"enabled\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"cameraLimits\": {",
											"                                    \"type\": \"object\",",
											"                                    \"required\": [",
											"                                        \"ELTEX\",",
											"                                        \"FLUSSONIC\"",
											"                                    ],",
											"                                    \"properties\": {",
											"                                        \"ELTEX\": {",
											"                                            \"type\": \"object\",",
											"                                            \"required\": [",
											"                                                \"canAddCamera\",",
											"                                                \"cameraLimit\",",
											"                                                \"cameraCount\"",
											"                                            ],",
											"                                            \"properties\": {",
											"                                                \"canAddCamera\": {",
											"                                                    \"type\": \"boolean\"",
											"                                                },",
											"                                                \"cameraLimit\": {",
											"                                                    \"type\": \"integer\"",
											"                                                },",
											"                                                \"cameraCount\": {",
											"                                                    \"type\": \"integer\"",
											"                                                }",
											"                                            }",
											"                                        },",
											"                                        \"FLUSSONIC\": {",
											"                                            \"type\": \"object\",",
											"                                            \"required\": [",
											"                                                \"canAddCamera\",",
											"                                                \"cameraLimit\",",
											"                                                \"cameraCount\"",
											"                                            ],",
											"                                            \"properties\": {",
											"                                                \"canAddCamera\": {",
											"                                                    \"type\": \"boolean\"",
											"                                                },",
											"                                                \"cameraLimit\": {",
											"                                                    \"type\": \"integer\"",
											"                                                },",
											"                                                \"cameraCount\": {",
											"                                                    \"type\": \"integer\"",
											"                                                }",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        },",
											"                        \"permissions\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        },",
											"                        \"roleSettings\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"defaultPage\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"defaultPage\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        },",
											"                        \"enabled\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"ownedHouseIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"testModeEnabled\": {",
											"                            \"type\": \"boolean\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    };",
											"   pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users?nameOrLogin=ab_test_&phone=7&roleId=user&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "nameOrLogin",
											"value": "ab_test_"
										},
										{
											"key": "phone",
											"value": "7"
										},
										{
											"key": "roleId",
											"value": "user"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по фильтру phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Есть поле data, значения поля total совпдает с реальным колличеством пользователей, а также поля id \",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.equal(2);",
											"        pm.expect(pm.response.json().data.length).to.equal(2);",
											"        for(let i in pm.response.json().data) pm.expect(pm.response.json().data[i].id).to.be.oneOf([pm.environment.get(\"id1\"),pm.environment.get(\"id2\")] );                    ",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"roleId\",",
											"                        \"roleName\",",
											"                        \"username\",",
											"                        \"access\",",
											"                        \"accessMap\",",
											"                        \"houseIds\",",
											"                        \"houseIdsWithRefuser\",",
											"                        \"emailConfirm\",",
											"                        \"phoneConfirm\",",
											"                        \"password\",",
											"                        \"name\",",
											"                        \"surname\",",
											"                        \"patronymic\",",
											"                        \"email\",",
											"                        \"phone\",",
											"                        \"role\",",
											"                        \"status\",",
											"                        \"admin\",",
											"                        \"additionalAccounts\",",
											"                        \"language\",",
											"                        \"externalUrl\",",
											"                        \"videoParameters\",",
											"                        \"permissions\",",
											"                        \"roleSettings\",",
											"                        \"enabled\",",
											"                        \"ownedHouseIds\",",
											"                        \"testModeEnabled\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"roleId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"roleName\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"username\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"access\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"accessMap\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"houseIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"houseIdsWithRefuser\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"emailConfirm\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"phoneConfirm\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"password\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"surname\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"patronymic\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"email\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"phone\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"role\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"status\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"admin\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"additionalAccounts\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"language\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"externalUrl\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"videoParameters\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"platforms\",",
											"                                \"canAddAgentCamera\",",
											"                                \"enabled\",",
											"                                \"cameraLimits\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"platforms\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                },",
											"                                \"canAddAgentCamera\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"enabled\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"cameraLimits\": {",
											"                                    \"type\": \"object\",",
											"                                    \"required\": [",
											"                                        \"ELTEX\",",
											"                                        \"FLUSSONIC\"",
											"                                    ],",
											"                                    \"properties\": {",
											"                                        \"ELTEX\": {",
											"                                            \"type\": \"object\",",
											"                                            \"required\": [",
											"                                                \"canAddCamera\",",
											"                                                \"cameraLimit\",",
											"                                                \"cameraCount\"",
											"                                            ],",
											"                                            \"properties\": {",
											"                                                \"canAddCamera\": {",
											"                                                    \"type\": \"boolean\"",
											"                                                },",
											"                                                \"cameraLimit\": {",
											"                                                    \"type\": \"integer\"",
											"                                                },",
											"                                                \"cameraCount\": {",
											"                                                    \"type\": \"integer\"",
											"                                                }",
											"                                            }",
											"                                        },",
											"                                        \"FLUSSONIC\": {",
											"                                            \"type\": \"object\",",
											"                                            \"required\": [",
											"                                                \"canAddCamera\",",
											"                                                \"cameraLimit\",",
											"                                                \"cameraCount\"",
											"                                            ],",
											"                                            \"properties\": {",
											"                                                \"canAddCamera\": {",
											"                                                    \"type\": \"boolean\"",
											"                                                },",
											"                                                \"cameraLimit\": {",
											"                                                    \"type\": \"integer\"",
											"                                                },",
											"                                                \"cameraCount\": {",
											"                                                    \"type\": \"integer\"",
											"                                                }",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        },",
											"                        \"permissions\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        },",
											"                        \"roleSettings\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"defaultPage\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"defaultPage\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        },",
											"                        \"enabled\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"ownedHouseIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"testModeEnabled\": {",
											"                            \"type\": \"boolean\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    };",
											"   pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users?phone=7&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "phone",
											"value": "7"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по фильтру nameOrLogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Есть поле data, значения поля total совпдает с реальным колличеством пользователей, а также поля id \",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.equal(1);",
											"        pm.expect(pm.response.json().data.length).to.equal(1);           ",
											"        pm.expect(pm.response.json().data[0].id).to.equal(pm.environment.get(\"id2\"));             ",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"roleId\",",
											"                        \"roleName\",",
											"                        \"username\",",
											"                        \"access\",",
											"                        \"accessMap\",",
											"                        \"houseIds\",",
											"                        \"houseIdsWithRefuser\",",
											"                        \"emailConfirm\",",
											"                        \"phoneConfirm\",",
											"                        \"password\",",
											"                        \"name\",",
											"                        \"surname\",",
											"                        \"patronymic\",",
											"                        \"email\",",
											"                        \"phone\",",
											"                        \"role\",",
											"                        \"status\",",
											"                        \"admin\",",
											"                        \"additionalAccounts\",",
											"                        \"language\",",
											"                        \"externalUrl\",",
											"                        \"videoParameters\",",
											"                        \"permissions\",",
											"                        \"roleSettings\",",
											"                        \"enabled\",",
											"                        \"ownedHouseIds\",",
											"                        \"testModeEnabled\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"roleId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"roleName\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"username\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"access\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"accessMap\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"houseIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"houseIdsWithRefuser\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"emailConfirm\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"phoneConfirm\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"password\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"surname\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"patronymic\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"email\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"phone\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"role\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"status\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"admin\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"additionalAccounts\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"language\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"externalUrl\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"videoParameters\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"platforms\",",
											"                                \"canAddAgentCamera\",",
											"                                \"enabled\",",
											"                                \"cameraLimits\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"platforms\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                },",
											"                                \"canAddAgentCamera\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"enabled\": {",
											"                                    \"type\": \"boolean\"",
											"                                },",
											"                                \"cameraLimits\": {",
											"                                    \"type\": \"object\",",
											"                                    \"required\": [",
											"                                        \"ELTEX\",",
											"                                        \"FLUSSONIC\"",
											"                                    ],",
											"                                    \"properties\": {",
											"                                        \"ELTEX\": {",
											"                                            \"type\": \"object\",",
											"                                            \"required\": [",
											"                                                \"canAddCamera\",",
											"                                                \"cameraLimit\",",
											"                                                \"cameraCount\"",
											"                                            ],",
											"                                            \"properties\": {",
											"                                                \"canAddCamera\": {",
											"                                                    \"type\": \"boolean\"",
											"                                                },",
											"                                                \"cameraLimit\": {",
											"                                                    \"type\": \"integer\"",
											"                                                },",
											"                                                \"cameraCount\": {",
											"                                                    \"type\": \"integer\"",
											"                                                }",
											"                                            }",
											"                                        },",
											"                                        \"FLUSSONIC\": {",
											"                                            \"type\": \"object\",",
											"                                            \"required\": [",
											"                                                \"canAddCamera\",",
											"                                                \"cameraLimit\",",
											"                                                \"cameraCount\"",
											"                                            ],",
											"                                            \"properties\": {",
											"                                                \"canAddCamera\": {",
											"                                                    \"type\": \"boolean\"",
											"                                                },",
											"                                                \"cameraLimit\": {",
											"                                                    \"type\": \"integer\"",
											"                                                },",
											"                                                \"cameraCount\": {",
											"                                                    \"type\": \"integer\"",
											"                                                }",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        },",
											"                        \"permissions\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {",
											"                                \"type\": \"string\"",
											"                            }",
											"                        },",
											"                        \"roleSettings\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"defaultPage\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"defaultPage\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        },",
											"                        \"enabled\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"ownedHouseIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        },",
											"                        \"testModeEnabled\": {",
											"                            \"type\": \"boolean\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    };",
											"   pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users?nameOrLogin=ab_test_2&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "nameOrLogin",
											"value": "ab_test_2"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по фультру roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Есть поле data, значения поля total совпдает с реальным колличеством пользователей, а также поля id \",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.equal(1);",
											"        pm.expect(pm.response.json().data.length).to.equal(1);",
											"        pm.expect(pm.response.json().data[0].id).to.equal(\"3\");              ",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users?roleId=admin&offset=0&limit=100",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "roleId",
											"value": "admin"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "удалить пользователя с платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь удален (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id1}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "удалить пользователя с платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Пользователь удален (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Журнал",
					"item": [
						{
							"name": "Проверка наличия событий в журнале",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [3000]);",
											"// var time_from = Math.round(Date.now()/1000.0)",
											"var time_from = Date.now()",
											"console.log(time_from);",
											"pm.environment.set(\"time_from\", time_from);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"События которые воспроизводятся в прошлом тесте записаны (все) в журнал событий, а также полей type, level, origin_id и total \",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.eql(5)",
											"        pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;  ",
											"        var user_delete = 0;",
											"        var user_create = 0;",
											"        for(let i in pm.response.json().data){",
											"            if (pm.response.json().data[i].type === \"user_delete\" ){",
											"                user_delete++;",
											"                pm.expect(pm.response.json().data[i].type).to.eql(\"user_delete\")",
											"                pm.expect(pm.response.json().data[i].level).to.eql(\"SYSTEM\")",
											"                pm.expect(pm.response.json().data[i].origin_id).to.eql(\"3\")",
											"            }",
											"            else if( pm.response.json().data[i].type === \"user_create\" ){",
											"                user_create++;",
											"                pm.expect(pm.response.json().data[i].type).to.eql(\"user_create\")",
											"                pm.expect(pm.response.json().data[i].level).to.eql(\"SYSTEM\")",
											"                pm.expect(pm.response.json().data[i].origin_id).to.eql(\"3\")",
											"            }",
											"            else{",
											"                pm.expect(pm.response.json().data[i].type).to.eql(\"user_login\")",
											"                pm.expect(pm.response.json().data[i].level).to.eql(\"USER\")",
											"                pm.expect(pm.response.json().data[i].origin_id).to.eql(\"3\")",
											"            }",
											"        }",
											"        pm.expect(user_delete).to.eql(2)",
											"        pm.expect(user_create).to.eql(2)",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\",",
											"            \"next_time_millis\",",
											"            \"next_offset\",",
											"            \"last_read_event_time_millis\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"additionalItems\": true,",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"message\",",
											"                        \"level\",",
											"                        \"type\",",
											"                        \"icon_name\",",
											"                        \"origin_id\",",
											"                        \"origin_type\",",
											"                        \"created_at_millis\",",
											"                        \"house_id\",",
											"                        \"user_id\",",
											"                        \"links\",",
											"                        \"color\",",
											"                        \"section_type\",",
											"                        \"section_id\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"message\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"level\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"type\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"icon_name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"origin_id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"origin_type\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"created_at_millis\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"house_id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"user_id\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"links\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"color\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"section_type\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"section_id\": {",
											"",
											"                        }",
											"                    }",
											"                }",
											"            },",
											"            \"next_time_millis\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"next_offset\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"last_read_event_time_millis\": {",
											"                \"type\": \"integer\"",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/events/endless?limit=5&offset=0&from={{time_from}}&language=ru",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"events",
										"endless"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "from",
											"value": "{{time_from}}"
										},
										{
											"key": "language",
											"value": "ru"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "хабы",
					"item": [
						{
							"name": "Создать пользователя",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (ab_test_1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);    ",
													"    postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"    pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"        pm.expect(pm.response.json()).to.have.property('id');",
													"        pm.expect(pm.response.json().id).to.string    ",
													"    });",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"\",\n    \"username\": \"123\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"ФАмилия\",\n    \"name\": \"ИМЯ\",\n    \"patronymic\": \"ОТЧЕСТВО\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"79999999999\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Подготовить и добавить контроллер",
							"item": [
								{
									"name": "Подготовка контроллера",
									"item": [
										{
											"name": "Параметры контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Настройки применены\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
															"    if(pm.response.code == 400) {",
															"        pm.expect(pm.response.text()).to.include(\"connected\");",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/info",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение типа платформы",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"let isSL10 = pm.response.json().version.includes(\"-b\");",
															"",
															"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
															"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
															"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/version",
													"host": [
														"{{host}}"
													],
													"path": [
														"version"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение информации о платформе",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var sdk = require('postman-collection');",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
															"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/info",
													"host": [
														"{{host}}"
													],
													"path": [
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание датчика протечки",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Датчик присутствует\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
															"    if(pm.response.code == 400) {",
															"        pm.expect(pm.response.text()).to.include(\"already exists\");",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 9\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/add",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});",
															"// Чтобы платформа успела принять подключение контроллера",
															"setTimeout(function(){}, [200]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Добавить контроллер",
									"item": [
										{
											"name": "Подключение к WebSocket (абонент 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, [5000]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"connect"
													],
													"query": [
														{
															"key": "host",
															"value": "{{host_ws}}/event_ws"
														},
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}"
														},
														{
															"key": "subprotocol",
															"value": "SmartHome"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление контроллера.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
															"setTimeout(function(){}, [2500]); ",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"postman.setEnvironmentVariable (\"current_time\", Date.now());",
															"console.log(Date.now())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание события добавления устройства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&timeout=180000&C_newStatus=ONLINE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_controllerId",
															"value": "{{ctl_id}}"
														},
														{
															"key": "C_type",
															"value": "DEVICE_STATUS_CHANGE"
														},
														{
															"key": "C_deviceInfo.nodeId",
															"value": "ZWAVE_ELTEX_7",
															"disabled": true
														},
														{
															"key": "timeout",
															"value": "180000"
														},
														{
															"key": "C_newStatus",
															"value": "ONLINE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение от WebSocket",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/disconnect",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"disconnect"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Тесты фильтров",
							"item": [
								{
									"name": "Все фильтры корректны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка полей total, id, houseId, typeController, virtual, status, title и houseAddress\",  () => {",
													"        pm.expect(pm.response.json()).to.have.property('data');",
													"        pm.expect(pm.response.json()).to.have.property('total');",
													"        pm.expect(pm.response.json().total).to.eql(1)",
													"        pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;  ",
													"        pm.expect(pm.response.json().data[0].id).to.eql(pm.environment.get(\"ctl_id\"))",
													"        pm.expect(pm.response.json().data[0].houseId).to.eql(pm.environment.get(\"houseId\"))",
													"        pm.expect(pm.response.json().data[0].typeController).to.eql(\"Z_WAY\")",
													"        pm.expect(pm.response.json().data[0].virtual).to.eql(false)",
													"        pm.expect(pm.response.json().data[0].status).to.eql(\"CONNECTED\")",
													"        pm.expect(pm.response.json().data[0].title).to.eql(\"zway_simulate\")",
													"        pm.expect(pm.response.json().data[0].houseAddress).to.eql(\"1\")",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"type\",",
													"            \"total\",",
													"            \"data\"",
													"        ],",
													"        \"properties\": {",
													"            \"type\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"total\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"data\": {",
													"                \"type\": \"array\",",
													"                \"items\": {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"id\",",
													"                        \"houseId\",",
													"                        \"typeController\",",
													"                        \"virtual\",",
													"                        \"status\",",
													"                        \"title\",",
													"                        \"ipAddress\",",
													"                        \"lastActivity\",",
													"                        \"additionalInfo\",",
													"                        \"settings\",",
													"                        \"houseAddress\",",
													"                        \"houseApartment\",",
													"                        \"devices\",",
													"                        \"nodeIds\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"id\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"houseId\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"typeController\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"virtual\": {",
													"                            \"type\": \"boolean\"",
													"                        },",
													"                        \"status\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"ipAddress\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"lastActivity\": {",
													"                            \"type\": \"number\"",
													"                        },",
													"                        \"additionalInfo\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"zwaveSubModule\",",
													"                                \"model\",",
													"                                \"softwareVersion\",",
													"                                \"vendor\",",
													"                                \"mac\",",
													"                                \"serial\",",
													"                                \"controllerModel\",",
													"                                \"zWaveSubModule\",",
													"                                \"sdkSubVersion\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"zwaveSubModule\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"model\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"softwareVersion\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"vendor\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"mac\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"serial\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"controllerModel\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"zWaveSubModule\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"sdkSubVersion\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            }",
													"                        },",
													"                        \"settings\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"homeId\",",
													"                                \"capabilities\",",
													"                                \"provisioningList\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"homeId\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"capabilities\": {",
													"                                    \"type\": \"array\",",
													"                                    \"items\": {",
													"                                        \"type\": \"string\"",
													"                                    }",
													"                                },",
													"                                \"provisioningList\": {",
													"                                    \"type\": \"array\",",
													"                                    \"items\": {}",
													"                                }",
													"                            }",
													"                        },",
													"                        \"houseAddress\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"houseApartment\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"devices\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [],",
													"                            \"properties\": {}",
													"                        },",
													"                        \"nodeIds\": {",
													"                            \"type\": \"array\",",
													"                            \"items\": {}",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?mac=a8:bb:cc:dd:00:00&login=123&houseTitle=1&title=zway_simulate&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "mac",
													"value": "a8:bb:cc:dd:00:00"
												},
												{
													"key": "login",
													"value": "123"
												},
												{
													"key": "houseTitle",
													"value": "1"
												},
												{
													"key": "title",
													"value": "zway_simulate"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Все фильтры не корректны",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка поля total\",  () => {",
													"        pm.expect(pm.response.json()).to.have.property('data');",
													"        pm.expect(pm.response.json()).to.have.property('total');",
													"        pm.expect(pm.response.json().total).to.eql(0)",
													"        pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;  ",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"type\",",
													"            \"total\",",
													"            \"data\"",
													"        ],",
													"        \"properties\": {",
													"            \"type\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"total\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"data\": {",
													"                \"type\": \"array\",",
													"                \"items\": {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"id\",",
													"                        \"houseId\",",
													"                        \"typeController\",",
													"                        \"virtual\",",
													"                        \"status\",",
													"                        \"title\",",
													"                        \"ipAddress\",",
													"                        \"lastActivity\",",
													"                        \"additionalInfo\",",
													"                        \"settings\",",
													"                        \"houseAddress\",",
													"                        \"houseApartment\",",
													"                        \"devices\",",
													"                        \"nodeIds\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"id\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"houseId\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"typeController\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"virtual\": {",
													"                            \"type\": \"boolean\"",
													"                        },",
													"                        \"status\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"ipAddress\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"lastActivity\": {",
													"                            \"type\": \"number\"",
													"                        },",
													"                        \"additionalInfo\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"zwaveSubModule\",",
													"                                \"model\",",
													"                                \"softwareVersion\",",
													"                                \"vendor\",",
													"                                \"mac\",",
													"                                \"serial\",",
													"                                \"controllerModel\",",
													"                                \"zWaveSubModule\",",
													"                                \"sdkSubVersion\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"zwaveSubModule\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"model\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"softwareVersion\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"vendor\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"mac\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"serial\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"controllerModel\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"zWaveSubModule\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"sdkSubVersion\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            }",
													"                        },",
													"                        \"settings\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"homeId\",",
													"                                \"capabilities\",",
													"                                \"provisioningList\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"homeId\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"capabilities\": {",
													"                                    \"type\": \"array\",",
													"                                    \"items\": {",
													"                                        \"type\": \"string\"",
													"                                    }",
													"                                },",
													"                                \"provisioningList\": {",
													"                                    \"type\": \"array\",",
													"                                    \"items\": {}",
													"                                }",
													"                            }",
													"                        },",
													"                        \"houseAddress\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"houseApartment\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"devices\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [],",
													"                            \"properties\": {}",
													"                        },",
													"                        \"nodeIds\": {",
													"                            \"type\": \"array\",",
													"                            \"items\": {}",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    }",
													"",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?mac=a8:bb:cc:d3:00:00&login=333&houseTitle=7&title=zway_simu2late&limit=50&offset=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "mac",
													"value": "a8:bb:cc:d3:00:00"
												},
												{
													"key": "login",
													"value": "333"
												},
												{
													"key": "houseTitle",
													"value": "7"
												},
												{
													"key": "title",
													"value": "zway_simu2late"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Проверка отвязки/удаления хабов",
					"item": [
						{
							"name": "Отвязывание хаба от дома.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{ctl_id}}/unlink",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{ctl_id}}",
										"unlink"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка отвязки контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка поля total\",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.eql(0)",
											"        pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;  ",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"houseId\",",
											"                        \"typeController\",",
											"                        \"virtual\",",
											"                        \"status\",",
											"                        \"title\",",
											"                        \"ipAddress\",",
											"                        \"lastActivity\",",
											"                        \"additionalInfo\",",
											"                        \"settings\",",
											"                        \"houseAddress\",",
											"                        \"houseApartment\",",
											"                        \"devices\",",
											"                        \"nodeIds\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"houseId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"typeController\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"virtual\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"status\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"title\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"ipAddress\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"lastActivity\": {",
											"                            \"type\": \"number\"",
											"                        },",
											"                        \"additionalInfo\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"zwaveSubModule\",",
											"                                \"model\",",
											"                                \"softwareVersion\",",
											"                                \"vendor\",",
											"                                \"mac\",",
											"                                \"serial\",",
											"                                \"controllerModel\",",
											"                                \"zWaveSubModule\",",
											"                                \"sdkSubVersion\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"zwaveSubModule\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"model\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"softwareVersion\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"vendor\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"mac\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"serial\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"controllerModel\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"zWaveSubModule\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"sdkSubVersion\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        },",
											"                        \"settings\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"homeId\",",
											"                                \"capabilities\",",
											"                                \"provisioningList\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"homeId\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"capabilities\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                },",
											"                                \"provisioningList\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {}",
											"                                }",
											"                            }",
											"                        },",
											"                        \"houseAddress\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"houseApartment\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"devices\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"nodeIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl?mac=a8:bb:cc:dd:00:00&login=123&houseTitle=1&title=zway_simulate&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									],
									"query": [
										{
											"key": "mac",
											"value": "a8:bb:cc:dd:00:00"
										},
										{
											"key": "login",
											"value": "123"
										},
										{
											"key": "houseTitle",
											"value": "1"
										},
										{
											"key": "title",
											"value": "zway_simulate"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление контроллера.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
											"setTimeout(function(){}, [2500]); ",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"current_time\", Date.now());",
											"console.log(Date.now())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка добавления контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка полей total, id, houseId, typeController, virtual, status, title и houseAddress\",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.eql(1)",
											"        pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;  ",
											"        pm.expect(pm.response.json().data[0].id).to.eql(pm.environment.get(\"ctl_id\"))",
											"        pm.expect(pm.response.json().data[0].houseId).to.eql(pm.environment.get(\"houseId\"))",
											"        pm.expect(pm.response.json().data[0].typeController).to.eql(\"Z_WAY\")",
											"        pm.expect(pm.response.json().data[0].virtual).to.eql(false)",
											"        pm.expect(pm.response.json().data[0].status).to.eql(\"CONNECTED\")",
											"        pm.expect(pm.response.json().data[0].title).to.eql(\"zway_simulate\")",
											"        pm.expect(pm.response.json().data[0].houseAddress).to.eql(\"1\")",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"houseId\",",
											"                        \"typeController\",",
											"                        \"virtual\",",
											"                        \"status\",",
											"                        \"title\",",
											"                        \"ipAddress\",",
											"                        \"lastActivity\",",
											"                        \"additionalInfo\",",
											"                        \"settings\",",
											"                        \"houseAddress\",",
											"                        \"houseApartment\",",
											"                        \"devices\",",
											"                        \"nodeIds\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"houseId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"typeController\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"virtual\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"status\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"title\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"ipAddress\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"lastActivity\": {",
											"                            \"type\": \"number\"",
											"                        },",
											"                        \"additionalInfo\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"zwaveSubModule\",",
											"                                \"model\",",
											"                                \"softwareVersion\",",
											"                                \"vendor\",",
											"                                \"mac\",",
											"                                \"serial\",",
											"                                \"controllerModel\",",
											"                                \"zWaveSubModule\",",
											"                                \"sdkSubVersion\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"zwaveSubModule\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"model\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"softwareVersion\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"vendor\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"mac\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"serial\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"controllerModel\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"zWaveSubModule\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"sdkSubVersion\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        },",
											"                        \"settings\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"homeId\",",
											"                                \"capabilities\",",
											"                                \"provisioningList\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"homeId\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"capabilities\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                },",
											"                                \"provisioningList\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {}",
											"                                }",
											"                            }",
											"                        },",
											"                        \"houseAddress\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"houseApartment\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"devices\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"nodeIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl?mac=a8:bb:cc:dd:00:00&login=123&houseTitle=1&title=zway_simulate&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									],
									"query": [
										{
											"key": "mac",
											"value": "a8:bb:cc:dd:00:00"
										},
										{
											"key": "login",
											"value": "123"
										},
										{
											"key": "houseTitle",
											"value": "1"
										},
										{
											"key": "title",
											"value": "zway_simulate"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение контроллера от платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/disconnect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"disconnect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление датчика протечки",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zway_ctl_host}}/devices/9",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить контроллер",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{ctl_id}}/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{ctl_id}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка отвязки контроллера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка поля total\",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('data');",
											"        pm.expect(pm.response.json()).to.have.property('total');",
											"        pm.expect(pm.response.json().total).to.eql(0)",
											"        pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;  ",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"houseId\",",
											"                        \"typeController\",",
											"                        \"virtual\",",
											"                        \"status\",",
											"                        \"title\",",
											"                        \"ipAddress\",",
											"                        \"lastActivity\",",
											"                        \"additionalInfo\",",
											"                        \"settings\",",
											"                        \"houseAddress\",",
											"                        \"houseApartment\",",
											"                        \"devices\",",
											"                        \"nodeIds\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"houseId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"typeController\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"virtual\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"status\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"title\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"ipAddress\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"lastActivity\": {",
											"                            \"type\": \"number\"",
											"                        },",
											"                        \"additionalInfo\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"zwaveSubModule\",",
											"                                \"model\",",
											"                                \"softwareVersion\",",
											"                                \"vendor\",",
											"                                \"mac\",",
											"                                \"serial\",",
											"                                \"controllerModel\",",
											"                                \"zWaveSubModule\",",
											"                                \"sdkSubVersion\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"zwaveSubModule\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"model\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"softwareVersion\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"vendor\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"mac\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"serial\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"controllerModel\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"zWaveSubModule\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"sdkSubVersion\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        },",
											"                        \"settings\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [",
											"                                \"homeId\",",
											"                                \"capabilities\",",
											"                                \"provisioningList\"",
											"                            ],",
											"                            \"properties\": {",
											"                                \"homeId\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"capabilities\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                },",
											"                                \"provisioningList\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": {}",
											"                                }",
											"                            }",
											"                        },",
											"                        \"houseAddress\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"houseApartment\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"devices\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [],",
											"                            \"properties\": {}",
											"                        },",
											"                        \"nodeIds\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": {}",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl?mac=a8:bb:cc:dd:00:00&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl"
									],
									"query": [
										{
											"key": "mac",
											"value": "a8:bb:cc:dd:00:00"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Шаблоны сценариев",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all patterns",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// var schema = {",
											"//     \"title\": \"Root Schema\",",
											"//     \"type\": \"array\",",
											"//     \"additionalItems\": true,",
											"//     \"items\": {",
											"//         \"title\": \"A Schema\",",
											"//         \"type\": \"object\",",
											"//         \"required\": [",
											"//             \"id\",",
											"//             \"scriptPattern\",",
											"//             \"title\",",
											"//             \"description\",",
											"//             \"language\",",
											"//             \"propertyKindList\"",
											"//         ],",
											"//         \"additionalProperties\": true,",
											"//         \"properties\": {",
											"//             \"id\": {",
											"//                 \"title\": \"The id Schema\",",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"scriptPattern\": {",
											"//                 \"title\": \"The scriptPattern Schema\",",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"title\": {",
											"//                 \"title\": \"The title Schema\",",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"description\": {",
											"//                 \"title\": \"The description Schema\",",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"language\": {",
											"//                 \"title\": \"The language Schema\",",
											"//                 \"type\": \"string\"",
											"//             },",
											"//             \"propertyKindList\": {",
											"//                 \"title\": \"The propertyKindList Schema\",",
											"//                 \"type\": \"array\",",
											"//                 \"additionalItems\": true,",
											"//                 \"items\": {",
											"//                     \"title\": \"A Schema\",",
											"//                     \"type\": \"string\"",
											"//                 }",
											"//             }",
											"//         }",
											"//     }",
											"// };",
											"// pm.test('Schema is valid', function () {",
											"//         var JsoneData=JSON.parse(responseBody);",
											"//         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"// });",
											"",
											"pm.test('Проверка соответствия propertyKindList и scriptPattern (наличие в scriptPattern соответствующего propertyKindList)', function () {",
											"    for (let i = 0; i<pm.response.json().length; i++){",
											"    for (let j = 0; j<pm.response.json()[i].propertyKindList.length; j++){",
											"        pm.expect(pm.response.json()[i].scriptPattern).to.include(pm.response.json()[i].propertyKindList[j]);",
											"    }",
											"}",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/patterns",
									"host": [
										"{{host}}"
									],
									"path": [
										"patterns"
									]
								}
							},
							"response": []
						},
						{
							"name": "add pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set(\"patternId\", pm.response.text());",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Pattern\",\n    \"description\": \"\",\n    \"rules\": [\n        {\n            \"conditions\": [\n                {\n                    \"comparison\": \"EQ\",\n                    \"sourceType\": \"HOUSE_VARIABLE\",\n                    \"targetValue\": \"notAtHome\",\n                    \"observableValue\": \"houseMode\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"data\": {\n                \"message\": \"!!!\",\n                \"importance\": \"NORMAL\"\n            },\n            \"type\": \"SEND_NOTIFICATION\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/patterns",
									"host": [
										"{{host}}"
									],
									"path": [
										"patterns"
									]
								}
							},
							"response": []
						},
						{
							"name": "get pattern to  patternId .",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {    ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test('Проверка поля id, title и scriptPattern, ', function () {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"patternId\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"Pattern\");",
											"    // pm.expect(pm.response.json().scriptPattern).to.equal(\"{\\\"title\\\":\\\"Pattern\\\",\\\"description\\\":\\\"\\\",\\\"language\\\":\\\"ru\\\",\\\"enabled\\\":\\\"false\\\",\\\"actions\\\":[{\\\"type\\\":\\\"SEND_NOTIFICATION\\\",\\\"data\\\":{\\\"message\\\":\\\"!!!\\\",\\\"importance\\\":\\\"NORMAL\\\"}}],\\\"rules\\\":[{\\\"conditions\\\":[{\\\"sourceType\\\":\\\"HOUSE_VARIABLE\\\",\\\"observableValue\\\":\\\"houseMode\\\",\\\"comparison\\\":\\\"EQ\\\",\\\"targetValue\\\":\\\"notAtHome\\\"}]}]}\");",
											"    pm.expect(pm.response.json().scriptPattern).to.equal(\"{\\\"title\\\":\\\"Pattern\\\",\\\"state\\\":null,\\\"then\\\":null,\\\"language\\\":\\\"ru\\\",\\\"enabled\\\":\\\"false\\\",\\\"actions\\\":[{\\\"type\\\":\\\"SEND_NOTIFICATION\\\",\\\"data\\\":{\\\"message\\\":\\\"!!!\\\",\\\"importance\\\":\\\"NORMAL\\\"}}],\\\"rules\\\":[{\\\"conditions\\\":[{\\\"sourceType\\\":\\\"HOUSE_VARIABLE\\\",\\\"observableValue\\\":\\\"houseMode\\\",\\\"comparison\\\":\\\"EQ\\\",\\\"targetValue\\\":\\\"notAtHome\\\"}]}]}\");",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/patterns/{{patternId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"patterns",
										"{{patternId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "editing pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {    ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Pattern_edit\",\n    \"description\": \"\",\n    \"rules\": [\n        {\n            \"conditions\": [\n                {\n                    \"sourceType\": \"HOUSE_VARIABLE\",\n                    \"observableValue\": \"houseMode\",\n                    \"comparison\": \"EQ\",\n                    \"targetValue\": \"onHoliday\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"SEND_NOTIFICATION\",\n            \"data\": {\n                \"message\": \"!!!\",\n                \"importance\": \"NORMAL\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/patterns/{{patternId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"patterns",
										"{{patternId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get pattern  (edit check)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {    ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test('Проверка поля id, title и scriptPattern, ', function () {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"patternId\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"Pattern_edit\");",
											"    pm.expect(pm.response.json().scriptPattern).to.equal(\"{\\\"title\\\":\\\"Pattern_edit\\\",\\\"state\\\":null,\\\"then\\\":null,\\\"language\\\":\\\"ru\\\",\\\"enabled\\\":\\\"false\\\",\\\"actions\\\":[{\\\"type\\\":\\\"SEND_NOTIFICATION\\\",\\\"data\\\":{\\\"message\\\":\\\"!!!\\\",\\\"importance\\\":\\\"NORMAL\\\"}}],\\\"rules\\\":[{\\\"conditions\\\":[{\\\"sourceType\\\":\\\"HOUSE_VARIABLE\\\",\\\"observableValue\\\":\\\"houseMode\\\",\\\"comparison\\\":\\\"EQ\\\",\\\"targetValue\\\":\\\"onHoliday\\\"}]}]}\");",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/patterns/{{patternId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"patterns",
										"{{patternId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {    ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/patterns/{{patternId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"patterns",
										"{{patternId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get pattern (checking deletion)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {    ",
											"    pm.test(\"Status code is 404\", function () {",
											"        pm.response.to.have.status(404);",
											"    });",
											"    let message = \"Id not found, id: \" + pm.environment.get(\"patternId\")",
											"    pm.test('Проверка поля id, title и scriptPattern, ', function () {",
											"        pm.expect(pm.response.json().message).to.equal(message);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/patterns/{{patternId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"patterns",
										"{{patternId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Настройки Сервера",
					"item": [
						{
							"name": "Загрузка изображений",
							"item": [
								{
									"name": "/oauth2/token(admin) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Preview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"file1\", responseBody); ",
													"pm.environment.set(\"file_id\", responseBody.split('/')[0]);",
													"pm.environment.set(\"file_name\", responseBody.split('/')[1]);",
													"console.log(responseBody.split('/')[0]);",
													"console.log(responseBody.split('/')[1]);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "q.png"
												}
											]
										},
										"url": {
											"raw": "{{host}}/files/upload",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Preview2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"file2\", responseBody); ",
													"pm.environment.set(\"file_id2\", responseBody.split('/')[0]);",
													"pm.environment.set(\"file_name2\", responseBody.split('/')[1]);",
													"console.log(responseBody.split('/')[0]);",
													"console.log(responseBody.split('/')[1]);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "jpg.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/files/upload",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Preview3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"file3\", responseBody); ",
													"pm.environment.set(\"file_id3\", responseBody.split('/')[0]);",
													"pm.environment.set(\"file_name3\", responseBody.split('/')[1]);",
													"console.log(responseBody.split('/')[0]);",
													"console.log(responseBody.split('/')[1]);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "q.png"
												}
											]
										},
										"url": {
											"raw": "{{host}}/files/upload",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Preview4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"file4\", responseBody); ",
													"pm.environment.set(\"file_id4\", responseBody.split('/')[0]);",
													"pm.environment.set(\"file_name4\", responseBody.split('/')[1]);",
													"console.log(responseBody.split('/')[0]);",
													"console.log(responseBody.split('/')[1]);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "q.png"
												}
											]
										},
										"url": {
											"raw": "{{host}}/files/upload",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"upload"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "сторисы advanced",
							"item": [
								{
									"name": "Администратор",
									"item": [
										{
											"name": "Создание сториса (2 кнопки)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.environment.set(\"story_id\", pm.response.json().id);",
															"    pm.environment.set(\"stories_one_page\", JSON.stringify(pm.response.json()));",
															"",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей кроме id\", function () {",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"advanced\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\":\"Это сторис и у него 2 кнопки\",\n    \"preview\":\"{{host}}/files/download/{{file1}}\",\n    \"preset\":\"advanced\",\n    \"pages\": [{\n        \"type\":\"IMAGE\",\n        \"title\" : \"Тестовый сторис с 2 кнопками\",\n        \"image\":\"{{host}}/files/download/{{file2}}\",\n        \"body\":\"Тут много текста\",\n        \"comment\":\"Этот текст не видит пользователь\",\n        \"buttons\": [{\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file3}}\",\n            \"title\":\"Первая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n        },\n        {\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file4}}\",\n            \"title\":\"Вторая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n\n        }]\n    }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения сториса",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей\", function () {",
															"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"story_id\"));",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"advanced\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories/{{story_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание сториса (2 кнопки и 2 страницы)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.environment.set(\"story_id2\", pm.response.json().id);",
															"    pm.environment.set(\"stories_two_page\", JSON.stringify(pm.response.json()));",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей кроме id\", function () {",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис и у него 2 странцы\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"advanced\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(2);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[1].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками, страница 1\");",
															"        pm.expect(pm.response.json().pages[1].title).to.eql(\"Тестовый сторис с 2 кнопками, страница 2\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[1].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[1].body).to.eql(\"Тут еще больше текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        pm.expect(pm.response.json().pages[1].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"            \"2\":0,",
															"            \"3\":0,",
															"        };",
															"        ",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        for(let i in pm.response.json().pages[1].buttons){",
															"            pm.expect(pm.response.json().pages[1].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[1].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[1].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[1].buttons[i].title === \"Первая кнопка, стр 2\"){",
															"                number_of_buttons[2]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[2] );",
															"                pm.expect(pm.response.json().pages[1].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[1].buttons[i].title === \"Вторая кнопка, стр 2\"){",
															"                number_of_buttons[3]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[3]);",
															"                pm.expect(pm.response.json().pages[1].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"        pm.expect(number_of_buttons[2]).to.eql(1);",
															"        pm.expect(number_of_buttons[3]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"Это сторис и у него 2 странцы\",\n    \"preview\": \"{{host}}/files/download/{{file1}}\",\n    \"preset\": \"advanced\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тестовый сторис с 2 кнопками, страница 1\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут много текста\",\n            \"comment\": \"Этот текст не видит пользователь\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"Первая кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file4}}\",\n                    \"title\": \"Вторая кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тестовый сторис с 2 кнопками, страница 2\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут еще больше текста\",\n            \"comment\": \"Этот текст не видит пользователь\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"Первая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file4}}\",\n                    \"title\": \"Вторая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения всех сторисов (проверка добавления)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    const stories_one_page= JSON.parse(pm.environment.get(\"stories_one_page\"));",
															"    const stories_two_page= JSON.parse(pm.environment.get(\"stories_two_page\"));",
															"    pm.test(\"Проверка всех возвращемый полей, а также количества строрис\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"        for(let i in pm.response.json()){",
															"            pm.expect(pm.response.json()[i].preset).to.eql(\"advanced\");",
															"            if (pm.response.json()[i].title === \"Это сторис и у него 2 кнопки\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_one_page);",
															"            }",
															"            else if(pm.response.json()[i].title === \"Это сторис и у него 2 странцы\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_two_page);",
															"            }",
															"        }",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"title\",",
															"                \"preview\",",
															"                \"preset\",",
															"                \"pages\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"title\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preview\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preset\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"pages\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"title\",",
															"                            \"image\",",
															"                            \"body\",",
															"                            \"comment\",",
															"                            \"buttons\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"title\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"image\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"body\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"comment\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"buttons\": {",
															"                                \"type\": \"array\",",
															"                                \"additionalItems\": true,",
															"                                \"items\": {",
															"                                    \"type\": \"object\",",
															"                                    \"required\": [",
															"                                        \"title\",",
															"                                        \"type\",",
															"                                        \"image\",",
															"                                        \"alt\",",
															"                                        \"link\"",
															"                                    ],",
															"                                    \"additionalProperties\": true,",
															"                                    \"properties\": {",
															"                                        \"title\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"type\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"image\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"alt\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"link\": {",
															"                                            \"type\": \"string\"",
															"                                        }",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories?preset=advanced",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													],
													"query": [
														{
															"key": "preset",
															"value": "advanced"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Редактирование сториса",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {    ",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    var stories_three_page = {",
															"        \"id\": \"\",",
															"        \"title\": \"Это сторис теперь тут 3 странцы\",",
															"        \"preview\": \"\",",
															"        \"preset\": \"advanced\",",
															"        \"pages\": [",
															"            {",
															"                \"type\": \"IMAGE\",",
															"                \"title\": \"Сторис с 2 кнопками, страница 1\",",
															"                \"image\": \"\",",
															"                \"body\": \"Тут стало больше текста\",",
															"                \"comment\": \"Этот текст пользователь по прежнему не видит\",",
															"                \"buttons\": [",
															"                    {",
															"                        \"title\": \"1 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    },",
															"                    {",
															"                        \"title\": \"2 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    }",
															"                ]",
															"            },",
															"            {",
															"                \"type\": \"IMAGE\",",
															"                \"title\": \"Тут стало меньше кнопок, страница 2\",",
															"                \"image\": \"\",",
															"                \"body\": \"Тут еще больше текста стало\",",
															"                \"comment\": \"Этот текст пользователь по прежнему не видит\",",
															"                \"buttons\": [",
															"                    {",
															"                        \"title\": \"Первая кнопка, стр 2\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    }",
															"                ]",
															"            },",
															"            {",
															"                \"type\": \"IMAGE\",",
															"                \"title\": \"Тут стало больше кнопок, страница 3\",",
															"                \"image\": \"\",",
															"                \"body\": \"Тут много кнопок\",",
															"                \"comment\": \"Этот текст пользователь по прежнему не видит\",",
															"                \"buttons\": [",
															"                    {",
															"                        \"title\": \"1 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    },",
															"                    {",
															"                        \"title\": \"2 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    },",
															"                    {",
															"                        \"title\": \"3 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    }",
															"                ]",
															"            }",
															"        ]",
															"    }",
															"    stories_three_page[\"id\"] = pm.environment.get(\"story_id2\");",
															"    stories_three_page[\"preview\"] = pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\");",
															"    for(let i in stories_three_page.pages){",
															"        let file_name = \"file\" + String(Number(i) + 1);",
															"        stories_three_page.pages[i].image = pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(file_name);",
															"        for(let j in stories_three_page.pages[i].buttons){",
															"            stories_three_page.pages[i].buttons[j].image = pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(file_name);",
															"        }",
															"    }",
															"    console.log(stories_three_page)",
															"    pm.environment.set(\"stories_three_page\", JSON.stringify(pm.response.json()));",
															"",
															"    pm.test(\"Проверка всех возвращемый полей\", function () {",
															"        pm.expect(pm.response.json()).to.eql(stories_three_page)",
															"    });    ",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \n    \"id\": \"{{story_id2}}\",\n    \"title\": \"Это сторис теперь тут 3 странцы\",\n    \"preview\": \"{{host}}/files/download/{{file4}}\",\n    \"preset\": \"advanced\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Сторис с 2 кнопками, страница 1\",\n            \"image\": \"{{host}}/files/download/{{file1}}\",\n            \"body\": \"Тут стало больше текста\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file1}}\",\n                    \"title\": \"1 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file1}}\",\n                    \"title\": \"2 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тут стало меньше кнопок, страница 2\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут еще больше текста стало\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file2}}\",\n                    \"title\": \"Первая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тут стало больше кнопок, страница 3\",\n            \"image\": \"{{host}}/files/download/{{file3}}\",\n            \"body\": \"Тут много кнопок\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"1 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"2 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"3 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories/{{story_id2}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения всех сторисов (проверка редактирования)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    const stories_one_page= JSON.parse(pm.environment.get(\"stories_one_page\"));",
															"    const stories_three_page= JSON.parse(pm.environment.get(\"stories_three_page\"));",
															"    pm.test(\"Проверка всех возвращемый полей, а также количества строрис\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"        count = 0;",
															"        for(let i in pm.response.json()){",
															"            if (pm.response.json()[i].title === \"Это сторис и у него 2 кнопки\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_one_page);",
															"                count++;",
															"            }",
															"            else if(pm.response.json()[i].title === \"Это сторис теперь тут 3 странцы\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_three_page);",
															"                count++;",
															"            }",
															"        }",
															"        pm.expect(count).to.eql(2);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"title\",",
															"                \"preview\",",
															"                \"preset\",",
															"                \"pages\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"title\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preview\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preset\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"pages\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"title\",",
															"                            \"image\",",
															"                            \"body\",",
															"                            \"comment\",",
															"                            \"buttons\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"title\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"image\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"body\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"comment\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"buttons\": {",
															"                                \"type\": \"array\",",
															"                                \"additionalItems\": true,",
															"                                \"items\": {",
															"                                    \"type\": \"object\",",
															"                                    \"required\": [",
															"                                        \"title\",",
															"                                        \"type\",",
															"                                        \"image\",",
															"                                        \"alt\",",
															"                                        \"link\"",
															"                                    ],",
															"                                    \"additionalProperties\": true,",
															"                                    \"properties\": {",
															"                                        \"title\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"type\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"image\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"alt\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"link\": {",
															"                                            \"type\": \"string\"",
															"                                        }",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories?preset=advanced",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													],
													"query": [
														{
															"key": "preset",
															"value": "advanced"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "сторисы beginner",
							"item": [
								{
									"name": "Администратор",
									"item": [
										{
											"name": "Создание сториса (2 кнопки)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.environment.set(\"story_id\", pm.response.json().id);",
															"    pm.environment.set(\"stories_one_page\", JSON.stringify(pm.response.json()));",
															"",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей кроме id\", function () {",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис beginner и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"beginner\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\":\"Это сторис beginner и у него 2 кнопки\",\n    \"preview\":\"{{host}}/files/download/{{file1}}\",\n    \"preset\":\"beginner\",\n    \"pages\": [{\n        \"type\":\"IMAGE\",\n        \"title\" : \"Тестовый сторис с 2 кнопками\",\n        \"image\":\"{{host}}/files/download/{{file2}}\",\n        \"body\":\"Тут много текста\",\n        \"comment\":\"Этот текст не видит пользователь\",\n        \"buttons\": [{\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file3}}\",\n            \"title\":\"Первая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n        },\n        {\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file4}}\",\n            \"title\":\"Вторая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n\n        }]\n    }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения сториса",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей\", function () {",
															"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"story_id\"));",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис beginner и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"beginner\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories/{{story_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание сториса (2 кнопки и 2 страницы)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.environment.set(\"story_id2\", pm.response.json().id);",
															"    pm.environment.set(\"stories_two_page\", JSON.stringify(pm.response.json()));",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей кроме id\", function () {",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис beginner и у него 2 странцы\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"beginner\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(2);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[1].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками, страница 1\");",
															"        pm.expect(pm.response.json().pages[1].title).to.eql(\"Тестовый сторис с 2 кнопками, страница 2\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[1].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[1].body).to.eql(\"Тут еще больше текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        pm.expect(pm.response.json().pages[1].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"            \"2\":0,",
															"            \"3\":0,",
															"        };",
															"        ",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        for(let i in pm.response.json().pages[1].buttons){",
															"            pm.expect(pm.response.json().pages[1].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[1].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[1].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[1].buttons[i].title === \"Первая кнопка, стр 2\"){",
															"                number_of_buttons[2]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[2] );",
															"                pm.expect(pm.response.json().pages[1].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[1].buttons[i].title === \"Вторая кнопка, стр 2\"){",
															"                number_of_buttons[3]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[3]);",
															"                pm.expect(pm.response.json().pages[1].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"        pm.expect(number_of_buttons[2]).to.eql(1);",
															"        pm.expect(number_of_buttons[3]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"Это сторис beginner и у него 2 странцы\",\n    \"preview\": \"{{host}}/files/download/{{file1}}\",\n    \"preset\": \"beginner\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тестовый сторис с 2 кнопками, страница 1\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут много текста\",\n            \"comment\": \"Этот текст не видит пользователь\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"Первая кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file4}}\",\n                    \"title\": \"Вторая кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тестовый сторис с 2 кнопками, страница 2\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут еще больше текста\",\n            \"comment\": \"Этот текст не видит пользователь\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"Первая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file4}}\",\n                    \"title\": \"Вторая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения всех сторисов (проверка добавления)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    const stories_one_page= JSON.parse(pm.environment.get(\"stories_one_page\"));",
															"    const stories_two_page= JSON.parse(pm.environment.get(\"stories_two_page\"));",
															"    pm.test(\"Проверка всех возвращемый полей, а также количества строрис\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"        for(let i in pm.response.json()){",
															"            pm.expect(pm.response.json()[i].preset).to.eql(\"beginner\");",
															"            if (pm.response.json()[i].title === \"Это сторис beginner и у него 2 кнопки\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_one_page);",
															"            }",
															"            else if(pm.response.json()[i].title === \"Это сторис beginner и у него 2 странцы\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_two_page);",
															"            }",
															"        }",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"title\",",
															"                \"preview\",",
															"                \"preset\",",
															"                \"pages\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"title\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preview\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preset\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"pages\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"title\",",
															"                            \"image\",",
															"                            \"body\",",
															"                            \"comment\",",
															"                            \"buttons\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"title\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"image\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"body\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"comment\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"buttons\": {",
															"                                \"type\": \"array\",",
															"                                \"additionalItems\": true,",
															"                                \"items\": {",
															"                                    \"type\": \"object\",",
															"                                    \"required\": [",
															"                                        \"title\",",
															"                                        \"type\",",
															"                                        \"image\",",
															"                                        \"alt\",",
															"                                        \"link\"",
															"                                    ],",
															"                                    \"additionalProperties\": true,",
															"                                    \"properties\": {",
															"                                        \"title\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"type\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"image\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"alt\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"link\": {",
															"                                            \"type\": \"string\"",
															"                                        }",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories?preset=beginner",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													],
													"query": [
														{
															"key": "preset",
															"value": "beginner"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Редактирование сториса",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {    ",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    var stories_three_page = {",
															"        \"id\": \"\",",
															"        \"title\": \"Это сторис beginner теперь тут 3 странцы\",",
															"        \"preview\": \"\",",
															"        \"preset\": \"beginner\",",
															"        \"pages\": [",
															"            {",
															"                \"type\": \"IMAGE\",",
															"                \"title\": \"Сторис с 2 кнопками, страница 1\",",
															"                \"image\": \"\",",
															"                \"body\": \"Тут стало больше текста\",",
															"                \"comment\": \"Этот текст пользователь по прежнему не видит\",",
															"                \"buttons\": [",
															"                    {",
															"                        \"title\": \"1 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    },",
															"                    {",
															"                        \"title\": \"2 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    }",
															"                ]",
															"            },",
															"            {",
															"                \"type\": \"IMAGE\",",
															"                \"title\": \"Тут стало меньше кнопок, страница 2\",",
															"                \"image\": \"\",",
															"                \"body\": \"Тут еще больше текста стало\",",
															"                \"comment\": \"Этот текст пользователь по прежнему не видит\",",
															"                \"buttons\": [",
															"                    {",
															"                        \"title\": \"Первая кнопка, стр 2\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    }",
															"                ]",
															"            },",
															"            {",
															"                \"type\": \"IMAGE\",",
															"                \"title\": \"Тут стало больше кнопок, страница 3\",",
															"                \"image\": \"\",",
															"                \"body\": \"Тут много кнопок\",",
															"                \"comment\": \"Этот текст пользователь по прежнему не видит\",",
															"                \"buttons\": [",
															"                    {",
															"                        \"title\": \"1 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    },",
															"                    {",
															"                        \"title\": \"2 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    },",
															"                    {",
															"                        \"title\": \"3 кнопка\",",
															"                        \"type\": \"MARKET\",",
															"                        \"image\": \"\",",
															"                        \"alt\": \"yandex\",",
															"                        \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"",
															"                    }",
															"                ]",
															"            }",
															"        ]",
															"    }",
															"    stories_three_page[\"id\"] = pm.environment.get(\"story_id2\");",
															"    stories_three_page[\"preview\"] = pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\");",
															"    for(let i in stories_three_page.pages){",
															"        let file_name = \"file\" + String(Number(i) + 1);",
															"        stories_three_page.pages[i].image = pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(file_name);",
															"        for(let j in stories_three_page.pages[i].buttons){",
															"            stories_three_page.pages[i].buttons[j].image = pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(file_name);",
															"        }",
															"    }",
															"    console.log(stories_three_page)",
															"    pm.environment.set(\"stories_three_page\", JSON.stringify(pm.response.json()));",
															"",
															"    pm.test(\"Проверка всех возвращемый полей\", function () {",
															"        pm.expect(pm.response.json()).to.eql(stories_three_page)",
															"    });    ",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \n    \"id\": \"{{story_id2}}\",\n    \"title\": \"Это сторис beginner теперь тут 3 странцы\",\n    \"preview\": \"{{host}}/files/download/{{file4}}\",\n    \"preset\": \"beginner\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Сторис с 2 кнопками, страница 1\",\n            \"image\": \"{{host}}/files/download/{{file1}}\",\n            \"body\": \"Тут стало больше текста\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file1}}\",\n                    \"title\": \"1 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file1}}\",\n                    \"title\": \"2 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тут стало меньше кнопок, страница 2\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут еще больше текста стало\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file2}}\",\n                    \"title\": \"Первая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тут стало больше кнопок, страница 3\",\n            \"image\": \"{{host}}/files/download/{{file3}}\",\n            \"body\": \"Тут много кнопок\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"1 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"2 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"3 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories/{{story_id2}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения всех сторисов (проверка редактирования)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    const stories_one_page= JSON.parse(pm.environment.get(\"stories_one_page\"));",
															"    const stories_three_page= JSON.parse(pm.environment.get(\"stories_three_page\"));",
															"    pm.test(\"Проверка всех возвращемый полей, а также количества строрис\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"        count = 0;",
															"        for(let i in pm.response.json()){",
															"            if (pm.response.json()[i].title === \"Это сторис beginner и у него 2 кнопки\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_one_page);",
															"                count++;",
															"            }",
															"            else if(pm.response.json()[i].title === \"Это сторис beginner теперь тут 3 странцы\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_three_page);",
															"                count++;",
															"            }",
															"        }",
															"        pm.expect(count).to.eql(2);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"title\",",
															"                \"preview\",",
															"                \"preset\",",
															"                \"pages\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"title\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preview\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preset\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"pages\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"title\",",
															"                            \"image\",",
															"                            \"body\",",
															"                            \"comment\",",
															"                            \"buttons\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"title\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"image\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"body\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"comment\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"buttons\": {",
															"                                \"type\": \"array\",",
															"                                \"additionalItems\": true,",
															"                                \"items\": {",
															"                                    \"type\": \"object\",",
															"                                    \"required\": [",
															"                                        \"title\",",
															"                                        \"type\",",
															"                                        \"image\",",
															"                                        \"alt\",",
															"                                        \"link\"",
															"                                    ],",
															"                                    \"additionalProperties\": true,",
															"                                    \"properties\": {",
															"                                        \"title\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"type\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"image\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"alt\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"link\": {",
															"                                            \"type\": \"string\"",
															"                                        }",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories?preset=beginner",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													],
													"query": [
														{
															"key": "preset",
															"value": "beginner"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Удаление",
							"item": [
								{
									"name": "Запрос для получения всех сторисов (advanced)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var stories_ids = [];",
													"    for(let i in pm.response.json()){",
													"        stories_ids.push(pm.response.json()[i].id)",
													"    }",
													"    pm.environment.set(\"stories_ids\", JSON.stringify(stories_ids));",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"preview\",",
													"                \"preset\",",
													"                \"pages\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"title\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"preview\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"preset\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"pages\": {",
													"                    \"type\": \"array\",",
													"                    \"additionalItems\": true,",
													"                    \"items\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"type\",",
													"                            \"title\",",
													"                            \"image\",",
													"                            \"body\",",
													"                            \"comment\",",
													"                            \"buttons\"",
													"                        ],",
													"                        \"additionalProperties\": true,",
													"                        \"properties\": {",
													"                            \"type\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"image\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"body\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"comment\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"buttons\": {",
													"                                \"type\": \"array\",",
													"                                \"additionalItems\": true,",
													"                                \"items\": {",
													"                                    \"type\": \"object\",",
													"                                    \"required\": [",
													"                                        \"title\",",
													"                                        \"type\",",
													"                                        \"image\",",
													"                                        \"alt\",",
													"                                        \"link\"",
													"                                    ],",
													"                                    \"additionalProperties\": true,",
													"                                    \"properties\": {",
													"                                        \"title\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"type\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"image\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"alt\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"link\": {",
													"                                            \"type\": \"string\"",
													"                                        }",
													"                                    }",
													"                                }",
													"                            }",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/stories?preset=advanced",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories"
											],
											"query": [
												{
													"key": "preset",
													"value": "advanced"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление сториса (Удалить все advanced)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"    let stories_ids = JSON.parse(pm.environment.get(\"stories_ids\"));",
													"    if (stories_ids.length > 0){",
													"        postman.setNextRequest(pm.info.requestId);        ",
													"    }",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let stories_ids = JSON.parse(pm.environment.get(\"stories_ids\"));",
													"stories_ids.reverse();",
													"let story_id = stories_ids[0]",
													"stories_ids.reverse();",
													"stories_ids.pop();",
													"pm.environment.set(\"stories_ids\", JSON.stringify(stories_ids));",
													"pm.environment.set(\"story_id\", story_id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/stories/{{story_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories",
												"{{story_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос для получения всех сторисов (beginner)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var stories_ids = [];",
													"    for(let i in pm.response.json()){",
													"        stories_ids.push(pm.response.json()[i].id)",
													"    }",
													"    pm.environment.set(\"stories_ids\", JSON.stringify(stories_ids));",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"preview\",",
													"                \"preset\",",
													"                \"pages\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"title\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"preview\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"preset\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"pages\": {",
													"                    \"type\": \"array\",",
													"                    \"additionalItems\": true,",
													"                    \"items\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"type\",",
													"                            \"title\",",
													"                            \"image\",",
													"                            \"body\",",
													"                            \"comment\",",
													"                            \"buttons\"",
													"                        ],",
													"                        \"additionalProperties\": true,",
													"                        \"properties\": {",
													"                            \"type\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"image\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"body\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"comment\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"buttons\": {",
													"                                \"type\": \"array\",",
													"                                \"additionalItems\": true,",
													"                                \"items\": {",
													"                                    \"type\": \"object\",",
													"                                    \"required\": [",
													"                                        \"title\",",
													"                                        \"type\",",
													"                                        \"image\",",
													"                                        \"alt\",",
													"                                        \"link\"",
													"                                    ],",
													"                                    \"additionalProperties\": true,",
													"                                    \"properties\": {",
													"                                        \"title\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"type\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"image\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"alt\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"link\": {",
													"                                            \"type\": \"string\"",
													"                                        }",
													"                                    }",
													"                                }",
													"                            }",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/stories?preset=beginner",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories"
											],
											"query": [
												{
													"key": "preset",
													"value": "beginner"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление сториса (Удалить все beginner)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"    let stories_ids = JSON.parse(pm.environment.get(\"stories_ids\"));",
													"    if (stories_ids.length > 0){",
													"        postman.setNextRequest(pm.info.requestId);        ",
													"    }",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let stories_ids = JSON.parse(pm.environment.get(\"stories_ids\"));",
													"stories_ids.reverse();",
													"let story_id = stories_ids[0]",
													"stories_ids.reverse();",
													"stories_ids.pop();",
													"pm.environment.set(\"stories_ids\", JSON.stringify(stories_ids));",
													"pm.environment.set(\"story_id\", story_id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/stories/{{story_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories",
												"{{story_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка удаления (beginner)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка удаления\", function () {",
													"        pm.expect(pm.response.json().length).to.eql(0);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/stories?preset=beginner",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories"
											],
											"query": [
												{
													"key": "preset",
													"value": "beginner"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка удаления (advanced)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка удаления\", function () {",
													"        pm.expect(pm.response.json().length).to.eql(0);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/stories?preset=advanced",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories"
											],
											"query": [
												{
													"key": "preset",
													"value": "advanced"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deletes the downloaded file by its id.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var i=pm.collectionVariables.get(\"i\");",
													"if(i != \"0\"){",
													"    var file_name = \"file_id\" + String(Number(i) + 1);",
													"    let file_id = pm.environment.get(file_name);",
													"    pm.environment.set(\"file_id\", file_id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"    var i=pm.collectionVariables.get(\"i\");",
													"    i++;",
													"    pm.collectionVariables.set(\"i\", i);",
													"",
													"    if (i < 4){",
													"        postman.setNextRequest(pm.info.requestId);        ",
													"    }",
													"    else if (i == 4) {",
													"        pm.collectionVariables.set(\"i\", 0);",
													"    }",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/files/delete?fileId={{file_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"delete"
											],
											"query": [
												{
													"key": "fileId",
													"value": "{{file_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ACCESS_TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Организации",
					"item": [
						{
							"name": "/oauth2/token(admin) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var admin_js = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "addOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"orgId\", jsonData.id);",
											"postman.setEnvironmentVariable (\"orgId_houseId\", jsonData.houseId);",
											"",
											"",
											"   var schema =  {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"houseId\",",
											"        \"panels\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"$id\": \"#/properties/name\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"$id\": \"#/properties/description\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"$id\": \"#/properties/houseId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"panels\": {",
											"            \"$id\": \"#/properties/panels\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/panels/items\"",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Охрана\",\n    \"description\": \"охраняют\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/organizations",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Охрана\",\n    \"description\": \"Они охраняют\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/organizations/{{orgId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"{{orgId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"houseId\",",
											"        \"panels\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"$id\": \"#/properties/name\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"$id\": \"#/properties/description\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"$id\": \"#/properties/houseId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"panels\": {",
											"            \"$id\": \"#/properties/panels\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/panels/items\"",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка полей id, name, description\",  () => {        ",
											"        pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"orgId\"));",
											"        pm.expect(pm.response.json().name).to.equal(\"Охрана\");",
											"        pm.expect(pm.response.json().description).to.equal(\"Они охраняют\");",
											"    });",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/organizations/{{orgId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"{{orgId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка добавления/редактирования/ удаления пульта",
					"item": [
						{
							"name": "addPanelToOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"panelId\", jsonData.id);",
											"postman.setEnvironmentVariable (\"panel_username\", jsonData.username);",
											"",
											"   var schema =  {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"protocolType\",",
											"        \"ip\",",
											"        \"port\",",
											"        \"removable\",",
											"        \"username\",",
											"        \"status\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"$id\": \"#/properties/title\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"protocolType\": {",
											"            \"$id\": \"#/properties/protocolType\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"ip\": {",
											"            \"$id\": \"#/properties/ip\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"port\": {",
											"            \"$id\": \"#/properties/port\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"removable\": {",
											"            \"$id\": \"#/properties/removable\",",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"username\": {",
											"            \"$id\": \"#/properties/username\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"$id\": \"#/properties/status\",",
											"            \"type\": \"boolean\"",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка полей title, port и ip\",  () => {        ",
											"        ",
											"        pm.expect(pm.response.json().title).to.equal(\"panel\");",
											"        pm.expect(pm.response.json().port).to.equal(8278);",
											"        pm.expect(pm.response.json().ip).to.equal(\"127.0.0.1\");",
											"    });",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"title\": \"panel\",\n    \"protocolType\": \"SURGARD\",\n    \"ip\": \"127.0.0.1\",\n    \"port\": 8278,\n    \"removable\": true,\n    \"status\": null,\n    \"username\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/organizations/{{orgId}}/panels",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"{{orgId}}",
										"panels"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPanelById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"   var schema =  {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"protocolType\",",
											"        \"ip\",",
											"        \"port\",",
											"        \"removable\",",
											"        \"username\",",
											"        \"status\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"$id\": \"#/properties/title\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"protocolType\": {",
											"            \"$id\": \"#/properties/protocolType\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"ip\": {",
											"            \"$id\": \"#/properties/ip\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"port\": {",
											"            \"$id\": \"#/properties/port\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"removable\": {",
											"            \"$id\": \"#/properties/removable\",",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"username\": {",
											"            \"$id\": \"#/properties/username\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"$id\": \"#/properties/status\",",
											"            \"type\": \"boolean\"",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка полей id, title, protocolType, port и ip\",  () => {        ",
											"        pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"panelId\"));        ",
											"        pm.expect(pm.response.json().title).to.equal(\"panel\");",
											"        pm.expect(pm.response.json().protocolType).to.equal(\"SURGARD\");",
											"        pm.expect(pm.response.json().port).to.equal(8278);",
											"        pm.expect(pm.response.json().ip).to.equal(\"127.0.0.1\");",
											"    });",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/organizations/{{orgId}}/panels/{{panelId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"{{orgId}}",
										"panels",
										"{{panelId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateControlPanelOfOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Проверка полей id, title, protocolType, port и ip\",  () => {        ",
											"        pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"panelId\"));        ",
											"        pm.expect(pm.response.json().title).to.equal(\"panel\");",
											"        pm.expect(pm.response.json().protocolType).to.equal(\"CONTACT_ID\");",
											"        pm.expect(pm.response.json().port).to.equal(8279);",
											"        pm.expect(pm.response.json().ip).to.equal(\"127.0.0.1\");",
											"    });",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{panelId}}\",\n    \"title\": \"panel\",\n    \"protocolType\": \"CONTACT_ID\",\n    \"ip\": \"127.0.0.1\",\n    \"port\": 8279,\n    \"removable\": true,\n    \"username\": \"\",\n    \"status\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/organizations/{{orgId}}/panels/{{panelId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"{{orgId}}",
										"panels",
										"{{panelId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.Security Engineer create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id_security-engineer\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"    pm.test(\"Инженер охраны создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"roleId\": \"security-engineer\",\n    \"roleName\": \"Инженер охраны\",\n    \"username\": \"5.security-engineer\",\n    \"access\": {},\n    \"accessMap\": {},\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"password\": \"5.security-engineer\",\n    \"name\": \"\",\n    \"surname\": \"\",\n    \"patronymic\": \"\",\n    \"email\": null,\n    \"additionalEmail\": [],\n    \"phone\": \"5\",\n    \"role\": \"security-engineer\",\n    \"status\": \"DEFAULT\",\n    \"admin\": false,\n    \"userSettings\": null,\n    \"additionalAccounts\": {},\n    \"language\": \"ru\",\n    \"externalUrl\": null,\n    \"platforms\": [],\n    \"permissions\": [\n        \"view.panels\",\n        \"view.guardObjects\",\n        \"view.settings\",\n        \"view.guardEvents\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHouseTypes\",\n        \"needPersonalInformation\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"roleSettings\": {\n        \"defaultPage\": \"view.panels\"\n    },\n    \"enabled\": true,\n    \"dashboardItems\": [],\n    \"houseDashboards\": {},\n    \"ownedHouseIds\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "access the security engineer to the organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"{{orgId_houseId}}\": \"WATCHER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{id_security-engineer}}/access",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id_security-engineer}}",
										"access"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (security engineer )",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"security_engineer_ACCESS\", jsonData.access_token); ",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"",
											"} ",
											"catch (e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "5.security-engineer",
											"type": "text"
										},
										{
											"key": "password",
											"value": "5.security-engineer",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting organization structures",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema =  {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"array\",",
											"    \"additionalItems\": true,",
											"    \"items\": {",
											"        \"$id\": \"#/items\",",
											"        \"anyOf\": [",
											"            {",
											"                \"$id\": \"#/items/anyOf/0\",",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"type\",",
											"                    \"title\",",
											"                    \"insideStructure\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"$id\": \"#/items/anyOf/0/properties/id\",",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"type\": {",
											"                        \"$id\": \"#/items/anyOf/0/properties/type\",",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"title\": {",
											"                        \"$id\": \"#/items/anyOf/0/properties/title\",",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"insideStructure\": {",
											"                        \"$id\": \"#/items/anyOf/0/properties/insideStructure\",",
											"                        \"type\": \"array\",",
											"                        \"additionalItems\": true,",
											"                        \"items\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/insideStructure/items\",",
											"                            \"anyOf\": [",
											"                                {",
											"                                    \"$id\": \"#/items/anyOf/0/properties/insideStructure/items/anyOf/0\",",
											"                                    \"type\": \"object\",",
											"                                    \"required\": [",
											"                                        \"id\",",
											"                                        \"type\",",
											"                                        \"title\",",
											"                                        \"insideStructure\"",
											"                                    ],",
											"                                    \"properties\": {",
											"                                        \"id\": {",
											"                                            \"$id\": \"#/items/anyOf/0/properties/insideStructure/items/anyOf/0/properties/id\",",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"type\": {",
											"                                            \"$id\": \"#/items/anyOf/0/properties/insideStructure/items/anyOf/0/properties/type\",",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"title\": {",
											"                                            \"$id\": \"#/items/anyOf/0/properties/insideStructure/items/anyOf/0/properties/title\",",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"insideStructure\": {",
											"                                            \"$id\": \"#/items/anyOf/0/properties/insideStructure/items/anyOf/0/properties/insideStructure\",",
											"                                            \"type\": \"array\",",
											"                                            \"additionalItems\": true,",
											"                                            \"items\": {",
											"                                                \"$id\": \"#/items/anyOf/0/properties/insideStructure/items/anyOf/0/properties/insideStructure/items\"",
											"                                            }",
											"                                        }",
											"                                    },",
											"                                    \"additionalProperties\": true",
											"                                }",
											"                            ]",
											"                        }",
											"                    }",
											"                },",
											"                \"additionalProperties\": true",
											"            }",
											"        ]",
											"    }",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"    pm.test(\"Проверка количества организаций. Проверка полей title, type, id, insideStructure.id, insideStructure.type, insideStructure.title\",  () => {        ",
											"        pm.expect(pm.response.json().length).to.equal(1);",
											"",
											"        pm.expect(pm.response.json()[0].title).to.equal(\"Охрана\");",
											"        pm.expect(pm.response.json()[0].type).to.equal(\"organization\");",
											"        pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));",
											"        pm.expect(pm.response.json()[0].insideStructure[0].id).to.equal(pm.environment.get(\"panelId\"));",
											"        pm.expect(pm.response.json()[0].insideStructure[0].type).to.equal(\"panel\");",
											"        pm.expect(pm.response.json()[0].insideStructure[0].title).to.equal(\"panel\");",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"} ",
											" ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{security_engineer_ACCESS}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/organizations/structure",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"structure"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeControlPanelFromOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Удаление прошло успешно (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/guard/organizations/{{orgId}}/panels/{{panelId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"{{orgId}}",
										"panels",
										"{{panelId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllPanelsByOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"    pm.test(\"Проверка удаления. Ответ должен быть пустым.\",  () => {        ",
											"        pm.expect(pm.response.json().length).to.equal(0);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"} ",
											" ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/organizations/{{orgId}}/panels",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"{{orgId}}",
										"panels"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Удаление прошло успешно (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/organizations/{{orgId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations",
										"{{orgId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllOrganizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"    pm.test(\"Проверка удаления. Ответ должен быть пустым.\",  () => {        ",
											"        pm.expect(pm.response.json().length).to.equal(0);",
											"    });",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/guard/organizations",
									"host": [
										"{{host}}"
									],
									"path": [
										"guard",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user security-engineer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Удаление прошло успешно (код 204)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id_security-engineer}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id_security-engineer}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ACCESS_TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Настройки",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting notification settings (usersettings) for the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.environment.set(\"default\", JSON.stringify(pm.response.json()));",
											"",
											"    var schema = {",
											"        \"$id\": \"http://example.com/example.json\",",
											"        \"title\": \"Root Schema\",",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"additionalSettings\",",
											"            \"baseSettings\",",
											"            \"byPush\",",
											"            \"bySms\",",
											"            \"byEmail\"",
											"        ],",
											"        \"properties\": {",
											"            \"additionalSettings\": {",
											"                \"title\": \"The additionalSettings Schema\",",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"byHouseVariable\",",
											"                    \"valuesHouseVariable\",",
											"                    \"mutedEmergencyPushCategories\",",
											"                    \"byTime\",",
											"                    \"startTime\",",
											"                    \"endTime\",",
											"                    \"timeZone\"",
											"                ],",
											"                \"properties\": {",
											"                    \"byHouseVariable\": {",
											"                        \"title\": \"The byHouseVariable Schema\",",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"valuesHouseVariable\": {",
											"                        \"title\": \"The valuesHouseVariable Schema\",",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"title\": \"A Schema\",",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"mutedEmergencyPushCategories\": {",
											"                        \"title\": \"The mutedEmergencyPushCategories Schema\",",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"byTime\": {",
											"                        \"title\": \"The byTime Schema\",",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"startTime\": {",
											"                        \"title\": \"The startTime Schema\",",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"endTime\": {",
											"                        \"title\": \"The endTime Schema\",",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"timeZone\": {",
											"                        \"title\": \"The timeZone Schema\",",
											"                        \"type\": \"null\"",
											"                    }",
											"                }",
											"            },",
											"            \"baseSettings\": {",
											"                \"title\": \"The baseSettings Schema\",",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"email\",",
											"                    \"sms\",",
											"                    \"push\",",
											"                    \"events\"",
											"                ],",
											"                \"properties\": {",
											"                    \"email\": {",
											"                        \"title\": \"The email Schema\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"loginUser\",",
											"                            \"managementControllers\",",
											"                            \"houseVariableChange\",",
											"                            \"statusOfDevices\",",
											"                            \"workOfDevices\",",
											"                            \"workOfScript\",",
											"                            \"criticalDevice\",",
											"                            \"criticalControllers\",",
											"                            \"infoGuardPanel\",",
											"                            \"criticalGuards\",",
											"                            \"detailGuardEvents\",",
											"                            \"guardEvents\",",
											"                            \"eventsByCameras\",",
											"                            \"alarmChangedState\",",
											"                            \"technicalSupport\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"loginUser\": {",
											"                                \"title\": \"The loginUser Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementControllers\": {",
											"                                \"title\": \"The managementControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"houseVariableChange\": {",
											"                                \"title\": \"The houseVariableChange Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusOfDevices\": {",
											"                                \"title\": \"The statusOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfDevices\": {",
											"                                \"title\": \"The workOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfScript\": {",
											"                                \"title\": \"The workOfScript Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalDevice\": {",
											"                                \"title\": \"The criticalDevice Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalControllers\": {",
											"                                \"title\": \"The criticalControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"infoGuardPanel\": {",
											"                                \"title\": \"The infoGuardPanel Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalGuards\": {",
											"                                \"title\": \"The criticalGuards Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"detailGuardEvents\": {",
											"                                \"title\": \"The detailGuardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"guardEvents\": {",
											"                                \"title\": \"The guardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"eventsByCameras\": {",
											"                                \"title\": \"The eventsByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"alarmChangedState\": {",
											"                                \"title\": \"The alarmChangedState Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"technicalSupport\": {",
											"                                \"title\": \"The technicalSupport Schema\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"sms\": {",
											"                        \"title\": \"The sms Schema\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"loginUser\",",
											"                            \"managementControllers\",",
											"                            \"houseVariableChange\",",
											"                            \"statusOfDevices\",",
											"                            \"workOfDevices\",",
											"                            \"workOfScript\",",
											"                            \"criticalDevice\",",
											"                            \"criticalControllers\",",
											"                            \"infoGuardPanel\",",
											"                            \"criticalGuards\",",
											"                            \"detailGuardEvents\",",
											"                            \"guardEvents\",",
											"                            \"eventsByCameras\",",
											"                            \"alarmChangedState\",",
											"                            \"technicalSupport\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"loginUser\": {",
											"                                \"title\": \"The loginUser Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementControllers\": {",
											"                                \"title\": \"The managementControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"houseVariableChange\": {",
											"                                \"title\": \"The houseVariableChange Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusOfDevices\": {",
											"                                \"title\": \"The statusOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfDevices\": {",
											"                                \"title\": \"The workOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfScript\": {",
											"                                \"title\": \"The workOfScript Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalDevice\": {",
											"                                \"title\": \"The criticalDevice Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalControllers\": {",
											"                                \"title\": \"The criticalControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"infoGuardPanel\": {",
											"                                \"title\": \"The infoGuardPanel Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalGuards\": {",
											"                                \"title\": \"The criticalGuards Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"detailGuardEvents\": {",
											"                                \"title\": \"The detailGuardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"guardEvents\": {",
											"                                \"title\": \"The guardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"eventsByCameras\": {",
											"                                \"title\": \"The eventsByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"alarmChangedState\": {",
											"                                \"title\": \"The alarmChangedState Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"technicalSupport\": {",
											"                                \"title\": \"The technicalSupport Schema\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"push\": {",
											"                        \"title\": \"The push Schema\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"loginUser\",",
											"                            \"managementControllers\",",
											"                            \"houseVariableChange\",",
											"                            \"statusOfDevices\",",
											"                            \"workOfDevices\",",
											"                            \"workOfScript\",",
											"                            \"criticalDevice\",",
											"                            \"criticalControllers\",",
											"                            \"infoGuardPanel\",",
											"                            \"criticalGuards\",",
											"                            \"detailGuardEvents\",",
											"                            \"guardEvents\",",
											"                            \"eventsByCameras\",",
											"                            \"alarmChangedState\",",
											"                            \"technicalSupport\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"loginUser\": {",
											"                                \"title\": \"The loginUser Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementControllers\": {",
											"                                \"title\": \"The managementControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"houseVariableChange\": {",
											"                                \"title\": \"The houseVariableChange Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusOfDevices\": {",
											"                                \"title\": \"The statusOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfDevices\": {",
											"                                \"title\": \"The workOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfScript\": {",
											"                                \"title\": \"The workOfScript Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalDevice\": {",
											"                                \"title\": \"The criticalDevice Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalControllers\": {",
											"                                \"title\": \"The criticalControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"infoGuardPanel\": {",
											"                                \"title\": \"The infoGuardPanel Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalGuards\": {",
											"                                \"title\": \"The criticalGuards Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"detailGuardEvents\": {",
											"                                \"title\": \"The detailGuardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"guardEvents\": {",
											"                                \"title\": \"The guardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"eventsByCameras\": {",
											"                                \"title\": \"The eventsByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"alarmChangedState\": {",
											"                                \"title\": \"The alarmChangedState Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"technicalSupport\": {",
											"                                \"title\": \"The technicalSupport Schema\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"events\": {",
											"                        \"title\": \"The events Schema\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"managementDevices\",",
											"                            \"loginUser\",",
											"                            \"managementUsers\",",
											"                            \"managementUserAccess\",",
											"                            \"managementHouses\",",
											"                            \"managementControllers\",",
											"                            \"houseVariableChange\",",
											"                            \"workOfControllers\",",
											"                            \"workOfBackup\",",
											"                            \"dropController\",",
											"                            \"statusOfDevices\",",
											"                            \"workOfDevices\",",
											"                            \"workOfScript\",",
											"                            \"criticalDevice\",",
											"                            \"criticalControllers\",",
											"                            \"infoGuardPanel\",",
											"                            \"criticalGuards\",",
											"                            \"detailGuardEvents\",",
											"                            \"guardEvents\",",
											"                            \"eventsByCameras\",",
											"                            \"statusesByCameras\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"managementDevices\": {",
											"                                \"title\": \"The managementDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"loginUser\": {",
											"                                \"title\": \"The loginUser Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementUsers\": {",
											"                                \"title\": \"The managementUsers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementUserAccess\": {",
											"                                \"title\": \"The managementUserAccess Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementHouses\": {",
											"                                \"title\": \"The managementHouses Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementControllers\": {",
											"                                \"title\": \"The managementControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"houseVariableChange\": {",
											"                                \"title\": \"The houseVariableChange Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfControllers\": {",
											"                                \"title\": \"The workOfControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfBackup\": {",
											"                                \"title\": \"The workOfBackup Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"dropController\": {",
											"                                \"title\": \"The dropController Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusOfDevices\": {",
											"                                \"title\": \"The statusOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfDevices\": {",
											"                                \"title\": \"The workOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfScript\": {",
											"                                \"title\": \"The workOfScript Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalDevice\": {",
											"                                \"title\": \"The criticalDevice Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalControllers\": {",
											"                                \"title\": \"The criticalControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"infoGuardPanel\": {",
											"                                \"title\": \"The infoGuardPanel Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalGuards\": {",
											"                                \"title\": \"The criticalGuards Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"detailGuardEvents\": {",
											"                                \"title\": \"The detailGuardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"guardEvents\": {",
											"                                \"title\": \"The guardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"eventsByCameras\": {",
											"                                \"title\": \"The eventsByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusesByCameras\": {",
											"                                \"title\": \"The statusesByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            },",
											"            \"byPush\": {",
											"                \"title\": \"The byPush Schema\",",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"bySms\": {",
											"                \"title\": \"The bySms Schema\",",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"byEmail\": {",
											"                \"title\": \"The byEmail Schema\",",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    };",
											"",
											"    pm.test('Schema is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/usersettings",
									"host": [
										"{{host}}"
									],
									"path": [
										"usersettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update notification settings (usersettings) for the user (enable all)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"additionalSettings\": {\n        \"byHouseVariable\": true,\n        \"valuesHouseVariable\": [\n            \"onHoliday\",\n            \"notAtHome\",\n            \"atHome\"\n        ],\n        \"byTime\": true,\n        \"startTime\": \"23:59\",\n        \"endTime\": \"00:00\",\n        \"timeZone\": \"Asia/Krasnoyarsk\"\n    },\n    \"baseSettings\": {\n        \"sms\": {\n            \"infoGuardPanel\": true,\n            \"criticalDevice\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"eventsByCameras\": true,\n            \"criticalGuards\": true,\n            \"managementDevices\": true,\n            \"managementUsers\": true,\n            \"criticalControllers\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"statusesByCameras\": true,\n            \"cvEvents\": true,\n            \"managementControllers\": true,\n            \"loginUser\": true,\n            \"houseVariableChange\": true,\n            \"workOfDevices\": true,\n            \"managementUserAccess\": true,\n            \"detailGuardEvents\": true,\n            \"managementHouses\": true,\n            \"guardEvents\": true,\n            \"alarmChangedState\": true,\n            \"workOfScript\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"email\": {\n            \"infoGuardPanel\": true,\n            \"criticalDevice\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"eventsByCameras\": true,\n            \"criticalGuards\": true,\n            \"managementDevices\": true,\n            \"managementUsers\": true,\n            \"criticalControllers\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"statusesByCameras\": true,\n            \"cvEvents\": true,\n            \"managementControllers\": true,\n            \"loginUser\": true,\n            \"houseVariableChange\": true,\n            \"workOfDevices\": true,\n            \"managementUserAccess\": true,\n            \"detailGuardEvents\": true,\n            \"managementHouses\": true,\n            \"guardEvents\": true,\n            \"alarmChangedState\": true,\n            \"workOfScript\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"push\": {\n            \"infoGuardPanel\": true,\n            \"criticalDevice\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"eventsByCameras\": true,\n            \"criticalGuards\": true,\n            \"managementDevices\": true,\n            \"managementUsers\": true,\n            \"criticalControllers\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"statusesByCameras\": true,\n            \"cvEvents\": true,\n            \"managementControllers\": true,\n            \"loginUser\": true,\n            \"houseVariableChange\": true,\n            \"workOfDevices\": true,\n            \"managementUserAccess\": true,\n            \"detailGuardEvents\": true,\n            \"managementHouses\": true,\n            \"guardEvents\": true,\n            \"alarmChangedState\": true,\n            \"workOfScript\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"events\": {\n            \"infoGuardPanel\": true,\n            \"criticalDevice\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"eventsByCameras\": true,\n            \"criticalGuards\": true,\n            \"managementDevices\": true,\n            \"managementUsers\": true,\n            \"criticalControllers\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"statusesByCameras\": true,\n            \"cvEvents\": true,\n            \"managementControllers\": true,\n            \"loginUser\": true,\n            \"houseVariableChange\": true,\n            \"workOfDevices\": true,\n            \"managementUserAccess\": true,\n            \"detailGuardEvents\": true,\n            \"managementHouses\": true,\n            \"guardEvents\": true,\n            \"alarmChangedState\": true,\n            \"workOfScript\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        }\n    },\n    \"byPush\": true,\n    \"bySms\": true,\n    \"byEmail\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usersettings",
									"host": [
										"{{host}}"
									],
									"path": [
										"usersettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "(checking for changes)(enabled all)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"pm.test(\"Сравниваем значения полей в ответе с тем что должно быть\",  () => {",
											"    pm.expect(pm.response.json().additionalSettings.byHouseVariable).to.equal(true);",
											"    pm.expect(pm.response.json().additionalSettings.valuesHouseVariable.length).to.equal(3);",
											"    pm.expect(pm.response.json().additionalSettings.byTime).to.equal(true);",
											"    pm.expect(pm.response.json().additionalSettings.startTime).to.equal(\"23:59\");",
											"    pm.expect(pm.response.json().additionalSettings.endTime).to.equal(\"00:00\");",
											"    pm.expect(pm.response.json().additionalSettings.timeZone).to.equal(\"Asia/Krasnoyarsk\");",
											"",
											"    for (var key in pm.response.json().baseSettings.sms) {",
											"        console.log(pm.response.json().baseSettings.sms[key])",
											"        pm.expect(pm.response.json().baseSettings.sms[key]).to.equal(true);       ",
											"    }",
											"",
											"    for (var key in pm.response.json().baseSettings.email) {",
											"        pm.expect(pm.response.json().baseSettings.email[key]).to.equal(true);       ",
											"    }    ",
											"",
											"    for (var key in pm.response.json().baseSettings.push) {",
											"        pm.expect(pm.response.json().baseSettings.push[key]).to.equal(true);       ",
											"    }    ",
											"",
											"    for (var key in pm.response.json().baseSettings.events) {",
											"        pm.expect(pm.response.json().baseSettings.events[key]).to.equal(true);       ",
											"    }    ",
											"",
											"    pm.expect(pm.response.json().byPush).to.equal(true);",
											"    pm.expect(pm.response.json().bySms).to.equal(true);",
											"    pm.expect(pm.response.json().byEmail).to.equal(true);",
											"});",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/usersettings",
									"host": [
										"{{host}}"
									],
									"path": [
										"usersettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update notification settings (usersettings) for the user (turn off everything)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"additionalSettings\": {\n        \"byHouseVariable\": false,\n        \"valuesHouseVariable\": [\n            \"onHoliday\",\n            \"notAtHome\",\n            \"atHome\"\n        ],\n        \"byTime\": false,\n        \"startTime\": \"23:59\",\n        \"endTime\": \"00:00\",\n        \"timeZone\": \"Asia/Krasnoyarsk\"\n    },\n    \"baseSettings\": {\n        \"sms\": {\n            \"infoGuardPanel\": false,\n            \"criticalDevice\": false,\n            \"workOfControllers\": false,\n            \"workOfBackup\": false,\n            \"eventsByCameras\": false,\n            \"criticalGuards\": false,\n            \"managementDevices\": false,\n            \"managementUsers\": false,\n            \"criticalControllers\": false,\n            \"dropController\": false,\n            \"statusOfDevices\": false,\n            \"statusesByCameras\": false,\n            \"cvEvents\": false,\n            \"managementControllers\": false,\n            \"loginUser\": false,\n            \"houseVariableChange\": false,\n            \"workOfDevices\": false,\n            \"managementUserAccess\": false,\n            \"detailGuardEvents\": false,\n            \"managementHouses\": false,\n            \"guardEvents\": false,\n            \"alarmChangedState\": false,\n            \"workOfScript\": false,\n            \"technicalSupport\": false,\n            \"subscription\": false\n        },\n        \"email\": {\n            \"infoGuardPanel\": false,\n            \"criticalDevice\": false,\n            \"workOfControllers\": false,\n            \"workOfBackup\": false,\n            \"eventsByCameras\": false,\n            \"criticalGuards\": false,\n            \"managementDevices\": false,\n            \"managementUsers\": false,\n            \"criticalControllers\": false,\n            \"dropController\": false,\n            \"statusOfDevices\": false,\n            \"statusesByCameras\": false,\n            \"cvEvents\": false,\n            \"managementControllers\": false,\n            \"loginUser\": false,\n            \"houseVariableChange\": false,\n            \"workOfDevices\": false,\n            \"managementUserAccess\": false,\n            \"detailGuardEvents\": false,\n            \"managementHouses\": false,\n            \"guardEvents\": false,\n            \"alarmChangedState\": false,\n            \"workOfScript\": false,\n            \"technicalSupport\": false,\n            \"subscription\": false\n        },\n        \"push\": {\n            \"infoGuardPanel\": false,\n            \"criticalDevice\": false,\n            \"workOfControllers\": false,\n            \"workOfBackup\": false,\n            \"eventsByCameras\": false,\n            \"criticalGuards\": false,\n            \"managementDevices\": false,\n            \"managementUsers\": false,\n            \"criticalControllers\": false,\n            \"dropController\": false,\n            \"statusOfDevices\": false,\n            \"statusesByCameras\": false,\n            \"cvEvents\": false,\n            \"managementControllers\": false,\n            \"loginUser\": false,\n            \"houseVariableChange\": false,\n            \"workOfDevices\": false,\n            \"managementUserAccess\": false,\n            \"detailGuardEvents\": false,\n            \"managementHouses\": false,\n            \"guardEvents\": false,\n            \"alarmChangedState\": false,\n            \"workOfScript\": false,\n            \"technicalSupport\": false,\n            \"subscription\": false\n        },\n        \"events\": {\n            \"infoGuardPanel\": false,\n            \"criticalDevice\": false,\n            \"workOfControllers\": false,\n            \"workOfBackup\": false,\n            \"eventsByCameras\": false,\n            \"criticalGuards\": false,\n            \"managementDevices\": false,\n            \"managementUsers\": false,\n            \"criticalControllers\": false,\n            \"dropController\": false,\n            \"statusOfDevices\": false,\n            \"statusesByCameras\": false,\n            \"cvEvents\": false,\n            \"managementControllers\": false,\n            \"loginUser\": false,\n            \"houseVariableChange\": false,\n            \"workOfDevices\": false,\n            \"managementUserAccess\": false,\n            \"detailGuardEvents\": false,\n            \"managementHouses\": false,\n            \"guardEvents\": false,\n            \"alarmChangedState\": false,\n            \"workOfScript\": false,\n            \"technicalSupport\": false,\n            \"subscription\": false\n        }\n    },\n    \"byPush\": false,\n    \"bySms\": false,\n    \"byEmail\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usersettings",
									"host": [
										"{{host}}"
									],
									"path": [
										"usersettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "(checking for changes)(disabled all)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"pm.test(\"Сравниваем значения полей в ответе с тем что должно быть\",  () => {",
											"    pm.expect(pm.response.json().additionalSettings.byHouseVariable).to.equal(false);",
											"",
											"    pm.expect(pm.response.json().additionalSettings.byTime).to.equal(false);",
											"",
											"",
											"    for (var key in pm.response.json().baseSettings.sms) {",
											"        pm.expect(pm.response.json().baseSettings.sms[key]).to.equal(false);       ",
											"    }",
											"",
											"    for (var key in pm.response.json().baseSettings.email) {",
											"        pm.expect(pm.response.json().baseSettings.email[key]).to.equal(false);       ",
											"    }    ",
											"",
											"    for (var key in pm.response.json().baseSettings.push) {",
											"        pm.expect(pm.response.json().baseSettings.push[key]).to.equal(false);       ",
											"    }    ",
											"",
											"    for (var key in pm.response.json().baseSettings.events) {",
											"        pm.expect(pm.response.json().baseSettings.events[key]).to.equal(false);       ",
											"    }    ",
											"",
											"    pm.expect(pm.response.json().byPush).to.equal(false);",
											"    pm.expect(pm.response.json().bySms).to.equal(false);",
											"    pm.expect(pm.response.json().byEmail).to.equal(false);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/usersettings",
									"host": [
										"{{host}}"
									],
									"path": [
										"usersettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "The \"default\" button",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/usersettings/admin",
									"host": [
										"{{host}}"
									],
									"path": [
										"usersettings",
										"admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking for changes (default)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Сравниваем значения полей в ответе с значениями полей «по умолчанию» (проверка всех полей)\",  () => {",
											"        function deepEqual (obj1, obj2){",
											"        return JSON.stringify(obj1)===obj2;",
											"        }",
											"        var data_by_default = pm.environment.get(\"default\");",
											"        pm.expect(deepEqual(pm.response.json(),data_by_default)).to.be.true;   ",
											"        ",
											"    });",
											"",
											"    var schema = {",
											"        \"$id\": \"http://example.com/example.json\",",
											"        \"title\": \"Root Schema\",",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"additionalSettings\",",
											"            \"baseSettings\",",
											"            \"byPush\",",
											"            \"bySms\",",
											"            \"byEmail\"",
											"        ],",
											"        \"properties\": {",
											"            \"additionalSettings\": {",
											"                \"title\": \"The additionalSettings Schema\",",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"byHouseVariable\",",
											"                    \"valuesHouseVariable\",",
											"                    \"mutedEmergencyPushCategories\",",
											"                    \"byTime\",",
											"                    \"startTime\",",
											"                    \"endTime\",",
											"                    \"timeZone\"",
											"                ],",
											"                \"properties\": {",
											"                    \"byHouseVariable\": {",
											"                        \"title\": \"The byHouseVariable Schema\",",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"valuesHouseVariable\": {",
											"                        \"title\": \"The valuesHouseVariable Schema\",",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"title\": \"A Schema\",",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"mutedEmergencyPushCategories\": {",
											"                        \"title\": \"The mutedEmergencyPushCategories Schema\",",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"byTime\": {",
											"                        \"title\": \"The byTime Schema\",",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"startTime\": {",
											"                        \"title\": \"The startTime Schema\",",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"endTime\": {",
											"                        \"title\": \"The endTime Schema\",",
											"                        \"type\": \"null\"",
											"                    },",
											"                    \"timeZone\": {",
											"                        \"title\": \"The timeZone Schema\",",
											"                        \"type\": \"null\"",
											"                    }",
											"                }",
											"            },",
											"            \"baseSettings\": {",
											"                \"title\": \"The baseSettings Schema\",",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"email\",",
											"                    \"sms\",",
											"                    \"push\",",
											"                    \"events\"",
											"                ],",
											"                \"properties\": {",
											"                    \"email\": {",
											"                        \"title\": \"The email Schema\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"loginUser\",",
											"                            \"managementControllers\",",
											"                            \"houseVariableChange\",",
											"                            \"statusOfDevices\",",
											"                            \"workOfDevices\",",
											"                            \"workOfScript\",",
											"                            \"criticalDevice\",",
											"                            \"criticalControllers\",",
											"                            \"infoGuardPanel\",",
											"                            \"criticalGuards\",",
											"                            \"detailGuardEvents\",",
											"                            \"guardEvents\",",
											"                            \"eventsByCameras\",",
											"                            \"alarmChangedState\",",
											"                            \"technicalSupport\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"loginUser\": {",
											"                                \"title\": \"The loginUser Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementControllers\": {",
											"                                \"title\": \"The managementControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"houseVariableChange\": {",
											"                                \"title\": \"The houseVariableChange Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusOfDevices\": {",
											"                                \"title\": \"The statusOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfDevices\": {",
											"                                \"title\": \"The workOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfScript\": {",
											"                                \"title\": \"The workOfScript Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalDevice\": {",
											"                                \"title\": \"The criticalDevice Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalControllers\": {",
											"                                \"title\": \"The criticalControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"infoGuardPanel\": {",
											"                                \"title\": \"The infoGuardPanel Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalGuards\": {",
											"                                \"title\": \"The criticalGuards Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"detailGuardEvents\": {",
											"                                \"title\": \"The detailGuardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"guardEvents\": {",
											"                                \"title\": \"The guardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"eventsByCameras\": {",
											"                                \"title\": \"The eventsByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"alarmChangedState\": {",
											"                                \"title\": \"The alarmChangedState Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"technicalSupport\": {",
											"                                \"title\": \"The technicalSupport Schema\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"sms\": {",
											"                        \"title\": \"The sms Schema\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"loginUser\",",
											"                            \"managementControllers\",",
											"                            \"houseVariableChange\",",
											"                            \"statusOfDevices\",",
											"                            \"workOfDevices\",",
											"                            \"workOfScript\",",
											"                            \"criticalDevice\",",
											"                            \"criticalControllers\",",
											"                            \"infoGuardPanel\",",
											"                            \"criticalGuards\",",
											"                            \"detailGuardEvents\",",
											"                            \"guardEvents\",",
											"                            \"eventsByCameras\",",
											"                            \"alarmChangedState\",",
											"                            \"technicalSupport\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"loginUser\": {",
											"                                \"title\": \"The loginUser Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementControllers\": {",
											"                                \"title\": \"The managementControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"houseVariableChange\": {",
											"                                \"title\": \"The houseVariableChange Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusOfDevices\": {",
											"                                \"title\": \"The statusOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfDevices\": {",
											"                                \"title\": \"The workOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfScript\": {",
											"                                \"title\": \"The workOfScript Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalDevice\": {",
											"                                \"title\": \"The criticalDevice Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalControllers\": {",
											"                                \"title\": \"The criticalControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"infoGuardPanel\": {",
											"                                \"title\": \"The infoGuardPanel Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalGuards\": {",
											"                                \"title\": \"The criticalGuards Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"detailGuardEvents\": {",
											"                                \"title\": \"The detailGuardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"guardEvents\": {",
											"                                \"title\": \"The guardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"eventsByCameras\": {",
											"                                \"title\": \"The eventsByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"alarmChangedState\": {",
											"                                \"title\": \"The alarmChangedState Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"technicalSupport\": {",
											"                                \"title\": \"The technicalSupport Schema\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"push\": {",
											"                        \"title\": \"The push Schema\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"loginUser\",",
											"                            \"managementControllers\",",
											"                            \"houseVariableChange\",",
											"                            \"statusOfDevices\",",
											"                            \"workOfDevices\",",
											"                            \"workOfScript\",",
											"                            \"criticalDevice\",",
											"                            \"criticalControllers\",",
											"                            \"infoGuardPanel\",",
											"                            \"criticalGuards\",",
											"                            \"detailGuardEvents\",",
											"                            \"guardEvents\",",
											"                            \"eventsByCameras\",",
											"                            \"alarmChangedState\",",
											"                            \"technicalSupport\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"loginUser\": {",
											"                                \"title\": \"The loginUser Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementControllers\": {",
											"                                \"title\": \"The managementControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"houseVariableChange\": {",
											"                                \"title\": \"The houseVariableChange Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusOfDevices\": {",
											"                                \"title\": \"The statusOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfDevices\": {",
											"                                \"title\": \"The workOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfScript\": {",
											"                                \"title\": \"The workOfScript Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalDevice\": {",
											"                                \"title\": \"The criticalDevice Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalControllers\": {",
											"                                \"title\": \"The criticalControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"infoGuardPanel\": {",
											"                                \"title\": \"The infoGuardPanel Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalGuards\": {",
											"                                \"title\": \"The criticalGuards Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"detailGuardEvents\": {",
											"                                \"title\": \"The detailGuardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"guardEvents\": {",
											"                                \"title\": \"The guardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"eventsByCameras\": {",
											"                                \"title\": \"The eventsByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"alarmChangedState\": {",
											"                                \"title\": \"The alarmChangedState Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"technicalSupport\": {",
											"                                \"title\": \"The technicalSupport Schema\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"events\": {",
											"                        \"title\": \"The events Schema\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"managementDevices\",",
											"                            \"loginUser\",",
											"                            \"managementUsers\",",
											"                            \"managementUserAccess\",",
											"                            \"managementHouses\",",
											"                            \"managementControllers\",",
											"                            \"houseVariableChange\",",
											"                            \"workOfControllers\",",
											"                            \"workOfBackup\",",
											"                            \"dropController\",",
											"                            \"statusOfDevices\",",
											"                            \"workOfDevices\",",
											"                            \"workOfScript\",",
											"                            \"criticalDevice\",",
											"                            \"criticalControllers\",",
											"                            \"infoGuardPanel\",",
											"                            \"criticalGuards\",",
											"                            \"detailGuardEvents\",",
											"                            \"guardEvents\",",
											"                            \"eventsByCameras\",",
											"                            \"statusesByCameras\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"managementDevices\": {",
											"                                \"title\": \"The managementDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"loginUser\": {",
											"                                \"title\": \"The loginUser Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementUsers\": {",
											"                                \"title\": \"The managementUsers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementUserAccess\": {",
											"                                \"title\": \"The managementUserAccess Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementHouses\": {",
											"                                \"title\": \"The managementHouses Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"managementControllers\": {",
											"                                \"title\": \"The managementControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"houseVariableChange\": {",
											"                                \"title\": \"The houseVariableChange Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfControllers\": {",
											"                                \"title\": \"The workOfControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfBackup\": {",
											"                                \"title\": \"The workOfBackup Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"dropController\": {",
											"                                \"title\": \"The dropController Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusOfDevices\": {",
											"                                \"title\": \"The statusOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfDevices\": {",
											"                                \"title\": \"The workOfDevices Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"workOfScript\": {",
											"                                \"title\": \"The workOfScript Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalDevice\": {",
											"                                \"title\": \"The criticalDevice Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalControllers\": {",
											"                                \"title\": \"The criticalControllers Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"infoGuardPanel\": {",
											"                                \"title\": \"The infoGuardPanel Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"criticalGuards\": {",
											"                                \"title\": \"The criticalGuards Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"detailGuardEvents\": {",
											"                                \"title\": \"The detailGuardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"guardEvents\": {",
											"                                \"title\": \"The guardEvents Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"eventsByCameras\": {",
											"                                \"title\": \"The eventsByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"statusesByCameras\": {",
											"                                \"title\": \"The statusesByCameras Schema\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            },",
											"            \"byPush\": {",
											"                \"title\": \"The byPush Schema\",",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"bySms\": {",
											"                \"title\": \"The bySms Schema\",",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"byEmail\": {",
											"                \"title\": \"The byEmail Schema\",",
											"                \"type\": \"boolean\"",
											"            }",
											"        }",
											"    };",
											"",
											"    pm.test('Schema is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/usersettings",
									"host": [
										"{{host}}"
									],
									"path": [
										"usersettings"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ACCESS_TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Проверка изменения уровня логирования",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "getLoggerLevels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"org.springframework\",",
											"        \"org.mongodb\"",
											"    ],",
											"    \"properties\": {",
											"        \"org.springframework\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"org.mongodb\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    var JsoneData=JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/logger/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"logger",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "getLoggerLevelsByName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var r = pm.response.text();",
											"console.log(r);",
											"",
											"pm.setEnvironmentVariable (\"springframework\", pm.response.text());",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/logger/get/org.springframework",
									"host": [
										"{{host}}"
									],
									"path": [
										"logger",
										"get",
										"org.springframework"
									]
								}
							},
							"response": []
						},
						{
							"name": "setLoggerLevels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var time_to = Math.round(Date.now()/1000.0)",
											"pm.environment.set(\"time_events_start\", time_to);",
											"// pm.environment.set(\"time_events_end\", time_to+1);",
											"console.log(time_to)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/logger/set/TRACE",
									"host": [
										"{{host}}"
									],
									"path": [
										"logger",
										"set",
										"TRACE"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking for changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"org.springframework\",",
											"        \"org.mongodb\"",
											"    ],",
											"    \"properties\": {",
											"        \"org.springframework\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"org.mongodb\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    var JsoneData=JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей org.mongodb и org.springframework\",  () => {",
											"    pm.expect(pm.response.json()[\"org.springframework\"]).to.string;",
											"    pm.expect(pm.response.json()[\"org.springframework\"]).to.equal(\"TRACE\");",
											"",
											"    pm.expect(pm.response.json()[\"org.mongodb\"]).to.string;",
											"    pm.expect(pm.response.json()[\"org.mongodb\"]).to.equal(\"TRACE\");",
											"});",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/logger/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"logger",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка изменения уровня логирования",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [5000]);",
											"let host = pm.globals.get(\"host\");",
											"host = host.split(\"/\")[2].split(\":\")[0];    ",
											"pm.environment.set(\"host_cap\", host);",
											"console.log(host)",
											"var time_to = Math.round(Date.now()/1000.0)",
											"pm.environment.set(\"time_events_end\", time_to+1);",
											"console.log(time_to)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"В логах присутвуют логи уровня TRACE\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"] TRACE\")",
											"        ",
											"    });",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{host_cap}}\",\n    \"user\": \"{{user_s}}\",\n    \"password\": \"{{password_s}}\",\n    \"logs_dir\": \"{{logs_dir}}\",\n    \"time_start\": {{time_events_start}},\n    \"time_end\": {{time_events_end}},\n    \"yours_time_zone\": \"Asia/Novosibirsk +07\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{postman-logs-proxy_host}}/return_log_iot",
									"host": [
										"{{postman-logs-proxy_host}}"
									],
									"path": [
										"return_log_iot"
									]
								}
							},
							"response": []
						},
						{
							"name": "Вернуть в исходное состояние2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/logger/set/DEBUG",
									"host": [
										"{{host}}"
									],
									"path": [
										"logger",
										"set",
										"DEBUG"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ACCESS_TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Проверка смены пароля",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (ab_test_1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonData = JSON.parse(responseBody);    ",
											"    postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"    pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"        pm.expect(pm.response.json()).to.have.property('id');",
											"        pm.expect(pm.response.json().id).to.string    ",
											"    });",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"username\": \"ab_test_1\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"ФАмилия\",\n    \"name\": \"ИМЯ\",\n    \"patronymic\": \"ОТЧЕСТВО\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"79999999999\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"ab_test_1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "ab_test_1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ab_test_1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Сменить пароль",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id}}\",\n    \"password\": \"123Aa123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Выйти",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 204\", function () {",
											"        pm.response.to.have.status(204);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{ACCESS_TOKEN}}\",\n    \"token_type_hint\": \"access_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/oauth2/token/revoke",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token",
										"revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "Вход с новым паролем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "ab_test_1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123Aa123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}} ",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка завершения всех сеансов",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Завершить все сеансы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/oauth2/token/revoke/all?clientIds=",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token",
										"revoke",
										"all"
									],
									"query": [
										{
											"key": "clientIds",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка завершения сеансов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка завепшения всех сеансов кроме текущего\",() => {",
											"        pm.expect(pm.response.json().data.length).to.eql(1);",
											"        pm.expect(pm.response.json().total).to.eql(1);",
											"    });",
											"",
											"    var scheme = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"authorizationId\",",
											"                        \"loginTime\",",
											"                        \"lastActivityTime\",",
											"                        \"logoutTime\",",
											"                        \"clientId\",",
											"                        \"clientType\",",
											"                        \"remoteAddress\",",
											"                        \"loggedIn\",",
											"                        \"current\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"authorizationId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"loginTime\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"lastActivityTime\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"logoutTime\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"clientId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"clientType\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"remoteAddress\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"loggedIn\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"current\": {",
											"                            \"type\": \"boolean\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    };",
											"    pm.test('JSON is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info/current/user?clientIds=web-client,android-client,ios-client,android-counters,ios-counters,api-client&loggedIn=true&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info",
										"current",
										"user"
									],
									"query": [
										{
											"key": "clientIds",
											"value": "web-client,android-client,ios-client,android-counters,ios-counters,api-client"
										},
										{
											"key": "loggedIn",
											"value": "true"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Управление ролями",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var admin_js = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saving a role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id_role\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test\",\n    \"description\": \"test_test\",\n    \"isUsed\": false,\n    \"system\": false,\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.devices\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.plans\",\n        \"view.scripts\",\n        \"view.houses\",\n        \"needHousePage\",\n        \"needHouseVariablesPage\",\n        \"needNewHousePage\",\n        \"needHouseControllersPage\",\n        \"needHouseGroupsPage\",\n        \"needDevicePage\",\n        \"needReportByAddresses\"\n    ],\n    \"settings\": {\n        \"defaultPage\": \"view.dashboard\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/security/roles",
									"host": [
										"{{host}}"
									],
									"path": [
										"security",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user with a new role (test)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [300]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"123\",\n    \"password\": \"123\",\n    \"roleId\": \"{{id_role}}\",\n    \"role\": \"user\",\n    \"admin\": false,\n    \"houseId\": [],\n    \"additionalEmail\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (test)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Active user (test)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверка полей id, roleId и roleName\",  () => {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().roleId).to.equal(pm.environment.get(\"id_role\"));",
											"    pm.expect(pm.response.json().roleName).to.equal(\"test\");     ",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"roleId\",",
											"        \"roleName\",",
											"        \"username\",",
											"        \"access\",",
											"        \"accessMap\",",
											"        \"houseIds\",",
											"        \"houseIdsWithRefuser\",",
											"        \"emailConfirm\",",
											"        \"phoneConfirm\",",
											"        \"password\",",
											"        \"name\",",
											"        \"surname\",",
											"        \"patronymic\",",
											"        \"email\",",
											"        \"phone\",",
											"        \"role\",",
											"        \"status\",",
											"        \"admin\",",
											"        \"additionalAccounts\",",
											"        \"language\",",
											"        \"externalUrl\",",
											"        \"videoParameters\",",
											"        \"permissions\",",
											"        \"roleSettings\",",
											"        \"enabled\",",
											"        \"ownedHouseIds\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"roleId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"roleName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"username\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"access\": {",
											"            \"type\": \"object\",",
											"            \"required\": [],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {}",
											"        },",
											"        \"accessMap\": {",
											"            \"type\": \"object\",",
											"            \"required\": [],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {}",
											"        },",
											"        \"houseIds\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"houseIdsWithRefuser\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"emailConfirm\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"phoneConfirm\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"password\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"surname\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"patronymic\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"email\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"phone\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"role\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"admin\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"additionalAccounts\": {",
											"            \"type\": \"object\",",
											"            \"required\": [],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {}",
											"        },",
											"        \"language\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"externalUrl\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"videoParameters\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"permissions\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"type\": \"string\"",
											"            }",
											"        },",
											"        \"roleSettings\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"defaultPage\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"defaultPage\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"enabled\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"ownedHouseIds\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        }",
											"    }",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/security/roles/{{id_role}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"security",
										"roles",
										"{{id_role}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"    setTimeout(function(){}, [500]);"
								]
							}
						}
					]
				},
				{
					"name": "Проверка сброса системной роли к исходным настройкам",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var admin_js = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all  roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"array\",",
											"    \"additionalItems\": true,",
											"};",
											"",
											"   pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    for (let i in pm.response.json()){",
											"        if (pm.response.json()[i].id === \"user\") pm.environment.set(\"permissions_length\", pm.response.json()[i].permissions.length );",
											"    }",
											"    ",
											"    // console.log(pm.environment.get(\"user_def\"))",
											"} ",
											"",
											"",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/security/roles",
									"host": [
										"{{host}}"
									],
									"path": [
										"security",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updating the role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var time_from = Math.round(Date.now()/1000.0)",
											"console.log(time_from);",
											"pm.environment.set(\"time_from\", time_from);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"user\",\n    \"name\": \"Абонент\",\n    \"description\": null,\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\"\n    ],\n    \"settings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"system\": true,\n    \"startTime\": {{time_from}},\n    \"isUsed\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/security/roles/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"security",
										"roles",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting a role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"permissions\",",
											"        \"settings\",",
											"        \"system\",",
											"        \"startTime\",",
											"        \"isUsed\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"$id\": \"#/properties/name\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"$id\": \"#/properties/description\",",
											"            \"type\": \"null\"",
											"        },",
											"        \"permissions\": {",
											"            \"$id\": \"#/properties/permissions\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/permissions/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/permissions/items/anyOf/0\",",
											"                        \"type\": \"string\"",
											"                    }",
											"                ]",
											"            }",
											"        },",
											"        \"settings\": {",
											"            \"$id\": \"#/properties/settings\",",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"defaultPage\"",
											"            ],",
											"            \"properties\": {",
											"                \"defaultPage\": {",
											"                    \"$id\": \"#/properties/settings/properties/defaultPage\",",
											"                    \"type\": \"string\"",
											"                }",
											"            },",
											"            \"additionalProperties\": true",
											"        },",
											"        \"system\": {",
											"            \"$id\": \"#/properties/system\",",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"startTime\": {",
											"            \"$id\": \"#/properties/startTime\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"isUsed\": {",
											"            \"$id\": \"#/properties/isUsed\",",
											"            \"type\": \"boolean\"",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"",
											"   pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"pm.test(\"Проверка количества permissions, проверка поля system.\",  () => {",
											"    pm.expect(pm.response.json().permissions.length).to.equal(3);",
											"    pm.expect(pm.response.json().system).to.equal(true); ",
											"});",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/security/roles/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"security",
										"roles",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resetting the system role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"permissions\",",
											"        \"settings\",",
											"        \"system\",",
											"        \"startTime\",",
											"        \"isUsed\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"$id\": \"#/properties/name\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"$id\": \"#/properties/description\",",
											"            \"type\": \"null\"",
											"        },",
											"        \"permissions\": {",
											"            \"$id\": \"#/properties/permissions\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/permissions/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/permissions/items/anyOf/0\",",
											"                        \"type\": \"string\"",
											"                    }",
											"                ]",
											"            }",
											"        },",
											"        \"settings\": {",
											"            \"$id\": \"#/properties/settings\",",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"defaultPage\"",
											"            ],",
											"            \"properties\": {",
											"                \"defaultPage\": {",
											"                    \"$id\": \"#/properties/settings/properties/defaultPage\",",
											"                    \"type\": \"string\"",
											"                }",
											"            },",
											"            \"additionalProperties\": true",
											"        },",
											"        \"system\": {",
											"            \"$id\": \"#/properties/system\",",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"startTime\": {",
											"            \"$id\": \"#/properties/startTime\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"isUsed\": {",
											"            \"$id\": \"#/properties/isUsed\",",
											"            \"type\": \"boolean\"",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка количества permissions\",  () => {",
											"    pm.expect(pm.response.json().permissions.length).to.eql(pm.environment.get(\"permissions_length\"))",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/security/roles/reset/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"security",
										"roles",
										"reset",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting a role (reset check)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"console.log(pm.environment.get(\"user_def\"))",
											"var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"permissions\",",
											"        \"settings\",",
											"        \"system\",",
											"        \"startTime\",",
											"        \"isUsed\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"$id\": \"#/properties/name\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"$id\": \"#/properties/description\",",
											"            \"type\": \"null\"",
											"        },",
											"        \"permissions\": {",
											"            \"$id\": \"#/properties/permissions\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/permissions/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/permissions/items/anyOf/0\",",
											"                        \"type\": \"string\"",
											"                    }",
											"                ]",
											"            }",
											"        },",
											"        \"settings\": {",
											"            \"$id\": \"#/properties/settings\",",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"defaultPage\"",
											"            ],",
											"            \"properties\": {",
											"                \"defaultPage\": {",
											"                    \"$id\": \"#/properties/settings/properties/defaultPage\",",
											"                    \"type\": \"string\"",
											"                }",
											"            },",
											"            \"additionalProperties\": true",
											"        },",
											"        \"system\": {",
											"            \"$id\": \"#/properties/system\",",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"startTime\": {",
											"            \"$id\": \"#/properties/startTime\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"isUsed\": {",
											"            \"$id\": \"#/properties/isUsed\",",
											"            \"type\": \"boolean\"",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"",
											"   pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"pm.test(\"Проверка количества permissions, проверка полей id, name и system.\",  () => {",
											"    pm.expect(pm.response.json().permissions.length).to.equal(pm.environment.get(\"permissions_length\"));",
											"    pm.expect(pm.response.json().id).to.equal(\"user\");",
											"    pm.expect(pm.response.json().name).to.equal(\"Абонент\");",
											"    pm.expect(pm.response.json().system).to.equal(true);",
											"});",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/security/roles/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"security",
										"roles",
										"user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Статистика",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var admin_js = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [200]);",
											"var time_from = Math.round(Date.now()/1000.0)",
											"console.log(time_from);",
											"pm.environment.set(\"time_from\", time_from);",
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without filtering",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"// var schema = {",
											"//     \"type\": \"object\",",
											"//     \"required\": [",
											"//         \"type\",",
											"//         \"total\",",
											"//         \"data\"",
											"//     ],",
											"//     \"properties\": {",
											"//         \"type\": {",
											"//             \"$id\": \"#/properties/type\",",
											"//             \"type\": \"string\"",
											"//         },",
											"//         \"total\": {",
											"//             \"$id\": \"#/properties/total\",",
											"//             \"type\": \"integer\"",
											"//         },",
											"//         \"data\": {",
											"//             \"$id\": \"#/properties/data\",",
											"//             \"type\": \"array\",",
											"//             \"additionalItems\": true,",
											"//             \"items\": {",
											"//                 \"$id\": \"#/properties/data/items\",",
											"//                 \"anyOf\": [",
											"//                     {",
											"//                         \"$id\": \"#/properties/data/items/anyOf/0\",",
											"//                         \"type\": \"object\",",
											"//                         \"required\": [",
											"//                             \"id\",",
											"//                             \"login\",",
											"//                             \"userId\",",
											"//                             \"roleId\",",
											"//                             \"loginTime\",",
											"//                             \"lastActivityTime\",",
											"//                             \"logoutTime\",",
											"//                             \"clientId\",",
											"//                             \"remoteAddress\",",
											"//                             \"loggedIn\"",
											"//                         ],",
											"//                         \"properties\": {",
											"//                             \"id\": {",
											"//                             },",
											"//                             \"login\": {",
											"//                                 \"$id\": \"#/properties/data/items/anyOf/0/properties/login\",",
											"//                                 \"type\": \"string\"",
											"//                             },",
											"//                             \"userId\": {",
											"//                                 \"$id\": \"#/properties/data/items/anyOf/0/properties/userId\",",
											"//                                 \"type\": \"string\"",
											"//                             },",
											"//                             \"roleId\": {",
											"//                                 \"$id\": \"#/properties/data/items/anyOf/0/properties/roleId\",",
											"//                                 \"type\": \"string\"",
											"//                             },",
											"//                             \"loginTime\": {",
											"//                                 \"$id\": \"#/properties/data/items/anyOf/0/properties/loginTime\",",
											"//                                 \"type\": \"integer\"",
											"//                             },",
											"//                             \"lastActivityTime\": {",
											"//                                 \"$id\": \"#/properties/data/items/anyOf/0/properties/lastActivityTime\",",
											"//                                 \"type\": \"integer\"",
											"//                             },",
											"//                             \"logoutTime\": {",
											"//                             },",
											"//                             \"clientId\": {",
											"//                                 \"$id\": \"#/properties/data/items/anyOf/0/properties/clientId\",",
											"//                                 \"type\": \"string\"",
											"//                             },",
											"//                             \"remoteAddress\": {",
											"//                                 \"$id\": \"#/properties/data/items/anyOf/0/properties/remoteAddress\",",
											"//                                 \"type\": \"string\"",
											"//                             },",
											"//                             \"loggedIn\": {",
											"//                                 \"$id\": \"#/properties/data/items/anyOf/0/properties/loggedIn\",",
											"//                                 \"type\": \"boolean\"",
											"//                             }",
											"//                         },",
											"//                         \"additionalProperties\": true",
											"//                     }",
											"//                 ]",
											"//             }",
											"//         }",
											"//     },",
											"//     \"additionalProperties\": true",
											"// }",
											"",
											"// pm.test('Schema is valid', function () {",
											"//         var JsoneData=JSON.parse(responseBody);",
											"//         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"// });",
											"",
											"",
											"// pm.test(\"Значение поля total = длине массива data\",  () => {    ",
											"//     pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;    ",
											"// });",
											"",
											"// pm.test(\"The X-Real-IP(remoteAddress) is correct\",  () => {    ",
											"//     let ip = pm.globals.get(\"host_external_without_port\");",
											"//     let indx1 = ip.indexOf(\"://\");",
											"//     let indx2 = ip.indexOf(\"/api\");    ",
											"//     ip = ip.slice(indx1+3, indx2);    ",
											"//     pm.expect(pm.response.json().data[0].remoteAddress).to.equal(ip); ",
											"// });",
											"",
											"} ",
											"",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filters: IP address(part), User role, ID, Login, Client type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"$id\": \"#/properties/type\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"$id\": \"#/properties/total\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"$id\": \"#/properties/data\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/data/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/data/items/anyOf/0\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"login\",",
											"                            \"userId\",",
											"                            \"roleId\",",
											"                            \"loginTime\",",
											"                            \"lastActivityTime\",",
											"                            \"logoutTime\",",
											"                            \"clientId\",",
											"                            \"remoteAddress\",",
											"                            \"loggedIn\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                            },",
											"                            \"login\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/login\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"userId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/userId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"roleId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/roleId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"loginTime\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/loginTime\",",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"lastActivityTime\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/lastActivityTime\",",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"logoutTime\": {",
											"                            },",
											"                            \"clientId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/clientId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"remoteAddress\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/remoteAddress\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"loggedIn\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/loggedIn\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        },",
											"                        \"additionalProperties\": true",
											"                    }",
											"                ]",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Проверка фильтрации, проверятеся колличество пользователей, login,userId,roleId\",  () => {",
											"    pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;",
											"    pm.expect(pm.response.json().data.length === 1).to.be.true;",
											"    pm.expect(pm.response.json().data[0].login).to.equal(\"admin\");",
											"    pm.expect(pm.response.json().data[0].userId).to.equal(\"3\");",
											"    pm.expect(pm.response.json().data[0].roleId).to.equal(\"admin\");",
											"    //pm.expect(pm.response.json().data[0].remoteAddress).includes(\"127\");",
											"    // pm.expect(pm.response.json().data[0].clientId).to.equal(\"web-client\");",
											"",
											"});",
											"",
											"// pm.test(\"The X-Real-IP(remoteAddress) is correct\",  () => {    ",
											"//     let ip = pm.globals.get(\"host_external_without_port\");",
											"//     let indx1 = ip.indexOf(\"://\");",
											"//     let indx2 = ip.indexOf(\"/api\");    ",
											"//     ip = ip.slice(indx1+3, indx2);    ",
											"//     pm.expect(pm.response.json().data[0].remoteAddress).to.equal(ip); ",
											"// });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info?login=admin&remoteAddress=1&roleId=admin&userId=3",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info"
									],
									"query": [
										{
											"key": "login",
											"value": "admin"
										},
										{
											"key": "remoteAddress",
											"value": "1"
										},
										{
											"key": "roleId",
											"value": "admin"
										},
										{
											"key": "userId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var time_from = Math.round(Date.now()/1000.0)",
											"// console.log(time_from);",
											"// pm.environment.set(\"time_from\", time_from);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creation of a home by an authorized user.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
											"postman.setEnvironmentVariable (\"address\", jsonData.address);",
											"",
											"   var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"variables\",",
											"        \"dashboardItems\",",
											"        \"houseGroups\",",
											"        \"guards\",",
											"        \"title\",",
											"        \"ownerId\",",
											"        \"address\",",
											"        \"apartment\",",
											"        \"timeZone\",",
											"        \"type\",",
											"        \"startTime\",",
											"        \"guardStatus\",",
											"        \"underGuard\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"variables\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"dashboardItems\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"houseGroups\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"guards\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"ownerId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"apartment\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"timeZone\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"startTime\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"guardStatus\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"underGuard\": {",
											"            \"type\": \"boolean\"",
											"        }",
											"    }",
											"}",
											"",
											"",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"ownerId\": \"{{id}}\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Active user (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверяем принадлежность полученного ранее токена пользователю, проверка полей id и username\",  () => {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().username).to.equal(\"123\");",
											"});",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display only currently logged-in connections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"$id\": \"#/properties/type\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"$id\": \"#/properties/total\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"$id\": \"#/properties/data\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/data/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/data/items/anyOf/0\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"login\",",
											"                            \"userId\",",
											"                            \"roleId\",",
											"                            \"loginTime\",",
											"                            \"lastActivityTime\",",
											"                            \"logoutTime\",",
											"                            \"clientId\",",
											"                            \"remoteAddress\",",
											"                            \"loggedIn\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                            },",
											"                            \"login\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/login\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"userId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/userId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"roleId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/roleId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"loginTime\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/loginTime\",",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"lastActivityTime\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/lastActivityTime\",",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"logoutTime\": {",
											"                            },",
											"                            \"clientId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/clientId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"remoteAddress\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/remoteAddress\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"loggedIn\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/loggedIn\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        },",
											"                        \"additionalProperties\": true",
											"                    }",
											"                ]",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Проверка поля total=размер массива data, проверка полей в массиве data, поля  userId, login,roleId и clientId \",  () => {",
											"    pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;",
											"",
											"    var i = 0; ",
											"    while(i < pm.response.json().data.length){",
											"        if (pm.response.json().data[i].login == \"123\"){",
											"            pm.expect(pm.response.json().data[i].userId).to.equal(pm.environment.get(\"id\"));",
											"            pm.expect(pm.response.json().data[i].roleId).to.equal(\"user\");",
											"            //pm.expect(pm.response.json().data[i].remoteAddress).includes(\"127\");",
											"            pm.expect(pm.response.json().data[i].clientId).to.equal(\"api-client\");",
											"        };",
											"        if (pm.response.json().data[i].login == \"admin\"){",
											"            pm.expect(pm.response.json().data[i].userId).to.equal(\"3\");",
											"            pm.expect(pm.response.json().data[i].roleId).to.equal(\"admin\");",
											"            //pm.expect(pm.response.json().data[i].remoteAddress).includes(\"127\");",
											"            pm.expect(pm.response.json().data[i].clientId).to.equal(\"api-client\");",
											"        }",
											"        i++;",
											"    };",
											"",
											"});",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info?loggedIn=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info"
									],
									"query": [
										{
											"key": "loggedIn",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering by the address of the house",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"$id\": \"#/properties/type\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"$id\": \"#/properties/total\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"$id\": \"#/properties/data\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/data/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/data/items/anyOf/0\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"login\",",
											"                            \"userId\",",
											"                            \"roleId\",",
											"                            \"loginTime\",",
											"                            \"lastActivityTime\",",
											"                            \"logoutTime\",",
											"                            \"clientId\",",
											"                            \"remoteAddress\",",
											"                            \"loggedIn\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                            },",
											"                            \"login\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/login\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"userId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/userId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"roleId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/roleId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"loginTime\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/loginTime\",",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"lastActivityTime\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/lastActivityTime\",",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"logoutTime\": {",
											"                            },",
											"                            \"clientId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/clientId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"remoteAddress\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/remoteAddress\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"loggedIn\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/loggedIn\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        },",
											"                        \"additionalProperties\": true",
											"                    }",
											"                ]",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Проверка поля total=размер массива data, проверка полей в массиве data, поля  userId, login,roleId и clientId\",  () => {",
											"    pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;",
											"    pm.expect(pm.response.json().data.length === 1).to.be.true;",
											"    pm.expect(pm.response.json().data[0].login).to.equal(\"123\");",
											"    pm.expect(pm.response.json().data[0].userId).to.equal(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().data[0].roleId).to.equal(\"user\");",
											"    //pm.expect(pm.response.json().data[0].remoteAddress).includes(\"127\");",
											"    pm.expect(pm.response.json().data[0].clientId).to.equal(\"api-client\");",
											"});",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info?address=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info"
									],
									"query": [
										{
											"key": "address",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering statistics by calendar means (from the moment the token is received by the admin to the current moment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"type\",",
											"        \"total\",",
											"        \"data\"",
											"    ],",
											"    \"properties\": {",
											"        \"type\": {",
											"            \"$id\": \"#/properties/type\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"total\": {",
											"            \"$id\": \"#/properties/total\",",
											"            \"type\": \"integer\"",
											"        },",
											"        \"data\": {",
											"            \"$id\": \"#/properties/data\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/data/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/data/items/anyOf/0\",",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"login\",",
											"                            \"userId\",",
											"                            \"roleId\",",
											"                            \"loginTime\",",
											"                            \"lastActivityTime\",",
											"                            \"logoutTime\",",
											"                            \"clientId\",",
											"                            \"remoteAddress\",",
											"                            \"loggedIn\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                            },",
											"                            \"login\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/login\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"userId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/userId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"roleId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/roleId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"loginTime\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/loginTime\",",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"lastActivityTime\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/lastActivityTime\",",
											"                                \"type\": \"integer\"",
											"                            },",
											"                            \"logoutTime\": {",
											"                            },",
											"                            \"clientId\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/clientId\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"remoteAddress\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/remoteAddress\",",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"loggedIn\": {",
											"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/loggedIn\",",
											"                                \"type\": \"boolean\"",
											"                            }",
											"                        },",
											"                        \"additionalProperties\": true",
											"                    }",
											"                ]",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"}",
											"",
											"pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Проверка поля total=размер массива data, проверка полей в массиве data, поля  userId, roleId и clientId(только у пользователя), проверка полей lastActivityTime,logoutTime и loggedIn\",  () => {",
											"    pm.expect(pm.response.json().data.length === pm.response.json().total).to.be.true;",
											"    var i = 0; ",
											"    while(i < pm.response.json().data.length){",
											"        pm.expect(pm.response.json().data[i].lastActivityTime >= pm.environment.get(\"time_from\") ).to.be.true;",
											"        pm.expect(pm.response.json().data[i].logoutTime).to.equal(null);",
											"        pm.expect(pm.response.json().data[i].loggedIn).to.equal(true);",
											"",
											"        if (pm.response.json().data[i].login == \"123\"){",
											"            pm.expect(pm.response.json().data[i].userId).to.equal(pm.environment.get(\"id\"));",
											"            pm.expect(pm.response.json().data[i].roleId).to.equal(\"user\");            ",
											"            pm.expect(pm.response.json().data[i].clientId).to.equal(\"api-client\");",
											"        }",
											"        if (pm.response.json().data[i].login == \"admin\"){",
											"            pm.expect(pm.response.json().data[i].userId).to.equal(\"3\");",
											"            pm.expect(pm.response.json().data[i].roleId).to.equal(\"admin\");            ",
											"            // pm.expect(pm.response.json().data[i].clientId).to.equal(\"web-client\");",
											"        }",
											"        i++;",
											"    };",
											"});",
											"// pm.environment.set(\"ppppppppppp\", String(responseBody));",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var time_to = Math.round(Date.now()/1000.0)",
											"console.log(time_to);",
											"pm.environment.set(\"time_to\", time_to);",
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info?from={{time_from}}&to={{time_to}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info"
									],
									"query": [
										{
											"key": "from",
											"value": "{{time_from}}"
										},
										{
											"key": "to",
											"value": "{{time_to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful request (checking the code)\", function () {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ACCESS_TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Проверка работы платформы через интерфейс Пользователя",
			"item": [
				{
					"name": "Рабочий стол",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"    var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Добавление MQTT устройства",
							"item": [
								{
									"name": "Узнать id контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=1&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "1"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить логин и пароль для устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавить mqtt устройство методом сопряжения.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
													"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
													"        pm.expect(pm.response.json().title).to.include(\"SW_RLY01\");",
													"        pm.expect(pm.response.json().muted).to.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.eql(false);",
													"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
													"    });",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"deviceType\",",
													"            \"houseId\",",
													"            \"nodeId\",",
													"            \"controllerId\",",
													"            \"title\",",
													"            \"muted\",",
													"            \"disabled\",",
													"            \"networkAddress\",",
													"            \"password\",",
													"            \"serial\",",
													"            \"status\",",
													"            \"deviceLocation\",",
													"            \"lastActivity\",",
													"            \"version\",",
													"            \"channels\",",
													"            \"actions\",",
													"            \"configs\",",
													"            \"settings\",",
													"            \"classType\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"deviceType\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"houseId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"nodeId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"controllerId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"muted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"disabled\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"networkAddress\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"password\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"serial\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"status\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"deviceLocation\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"lastActivity\": {",
													"                \"type\": \"number\"",
													"            },",
													"            \"version\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"channels\": {",
													"                \"type\": \"object\",",
													"                \"required\": [],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {}",
													"            },",
													"            \"actions\": {",
													"                \"type\": \"object\",",
													"                \"required\": [],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {}",
													"            },",
													"            \"configs\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"settings\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"className\",",
													"                    \"macAddress\",",
													"                    // \"ssid\",",
													"                    \"manufacturerId\",",
													"                    \"productId\",",
													"                    \"productTypeId\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"className\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"macAddress\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    // \"ssid\": {",
													"                    //     \"type\": \"null\"",
													"                    // },",
													"                    \"manufacturerId\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"productId\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"productTypeId\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            },",
													"            \"classType\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"        var jsonData = JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"console.log(Date.now())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"SW_RLY01\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на симулятор (добавление устройства)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/add_node/{{generatedNodeId}}?brokerLogin={{generatedBrokerLogin}}&brokerPassword={{generatedBrokerPassword}}&brokerURL={{brokerURL}}&device_type=SW-RLY01",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"add_node",
												"{{generatedNodeId}}"
											],
											"query": [
												{
													"key": "brokerLogin",
													"value": "{{generatedBrokerLogin}}"
												},
												{
													"key": "brokerPassword",
													"value": "{{generatedBrokerPassword}}"
												},
												{
													"key": "brokerURL",
													"value": "{{brokerURL}}"
												},
												{
													"key": "device_type",
													"value": "SW-RLY01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события добавления устройства Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_deviceInfo.controllerId={{controllerId}}&C_type=DEVICE_ADD&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.controllerId",
													"value": "{{controllerId}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_ADD"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Через добавление канала и через перенос в другой LOCATION_LIST",
							"item": [
								{
									"name": "Получение всех секций пользователя.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка наличия устройств на дашборде\", function () {",
													"        var jsonData = JSON.parse(responseBody);",
													"        var i = 0;",
													"        while (i < pm.response.json().length){",
													"",
													"            if (jsonData[i].sectionType ==  \"LIGHT\") {",
													"                postman.setEnvironmentVariable (\"LIGHT_id\", jsonData[i].id);",
													"                postman.setEnvironmentVariable (\"nodeId\", jsonData[i].items[0].innerItems[0].info.nodeId);",
													"                postman.setEnvironmentVariable (\"propertyId\", jsonData[i].items[0].innerItems[0].info.propertyId);       ",
													"                pm.expect(jsonData[i].items[0].innerItems.length).to.not.eql(0)",
													"            }",
													"            if (jsonData[i].sectionType ==  \"GUARD\") postman.setEnvironmentVariable (\"GUARD_id\", jsonData[i].id);",
													"            if (jsonData[i].sectionType ==  \"CAMERAS\") postman.setEnvironmentVariable (\"CAMERAS_id\", jsonData[i].id);",
													"            if (jsonData[i].sectionType ==  \"CLIMATE\") postman.setEnvironmentVariable (\"CLIMATE_id\", jsonData[i].id);",
													"                ",
													"            i++;",
													"        }",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"$id\": \"#/items\",",
													"            \"anyOf\": [",
													"                {",
													"                    \"$id\": \"#/items/anyOf/0\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"generalSwitch\",",
													"                        \"hide\",",
													"                        \"id\",",
													"                        \"items\",",
													"                        \"sectionType\",",
													"                        \"title\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"generalSwitch\": {",
													"",
													"                        },",
													"                        \"hide\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/hide\",",
													"                            \"type\": \"boolean\"",
													"                        },",
													"                        \"id\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/id\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"items\": {},",
													"                        \"sectionType\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/sectionType\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/title\",",
													"                            \"type\": \"string\"",
													"                        }",
													"                    },",
													"                    \"additionalProperties\": true",
													"                }",
													"            ]",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Чтобы устройство успело попасть на дашборд",
													"setTimeout(function(){}, [9000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections?includeItems=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создаем LOCATION_LIST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    postman.setEnvironmentVariable (\"item_id\", responseBody);   ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"123\",\n    \"parentId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов доступных для добавления.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка полей type, houseId и location\",  () => {",
													"        var i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info).to.be.a('object');",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                postman.setEnvironmentVariable (\"ID_dashboards\", pm.response.json()[i].id);  ",
													"            }",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                postman.setEnvironmentVariable (\"ID_dashboards_device\", pm.response.json()[i].id); ",
													"                postman.setEnvironmentVariable (\"ID_dashboards_item1\", pm.response.json()[i].innerItems[0].id);",
													"                postman.setEnvironmentVariable (\"ID_dashboards_item2\", pm.response.json()[i].innerItems[1].id);",
													"                postman.setEnvironmentVariable (\"deviceId\", pm.response.json()[i].innerItems[0].info.deviceId);",
													"                postman.setEnvironmentVariable (\"deviceId2\", pm.response.json()[i].innerItems[1].info.deviceId);",
													"            }",
													"            i++;",
													"        }",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление списка Id внутренних элементов во всех присланных LOCATION_LISTs (удаление одного итема)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// // Чтобы платформа успела переключить канал",
													"// setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка полей houseId, sectionId , sectionType, innerItems.id, innerItems.type и innerItems.defaultSectionType\",  () => {",
													"        for(let i in pm.response.json()){            ",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"            pm.expect(pm.response.json()[i].sectionId).to.equal(pm.environment.get(\"LIGHT_id\"));",
													"            pm.expect(pm.response.json()[i].sectionType).to.equal(\"LIGHT\");",
													"            for(let j in (pm.response.json()[i].innerItems)){",
													"                pm.expect(pm.response.json()[i].innerItems[j].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"                pm.expect(pm.response.json()[i].innerItems[j].type).to.equal(\"PROPERTY\");",
													"                pm.expect(pm.response.json()[i].innerItems[j].defaultSectionType).to.equal(\"LIGHT\");",
													"            }",
													"        }",
													"    });",
													"    pm.test(\"Проверка значения generalSwitch\",  () => {",
													"        for(let i in pm.response.json()){           ",
													"            pm.expect(pm.response.json()[i].generalSwitch.position).to.equal(false);",
													"            pm.expect(pm.response.json()[i].generalSwitchPosition).to.equal(false);",
													"        }",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"info\",",
													"                \"sectionId\",",
													"                \"sectionType\",",
													"                \"innerItems\",",
													"                \"generalSwitch\",",
													"                \"generalSwitchPosition\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"title\": {",
													"                    \"type\": \"null\"",
													"                },",
													"                \"info\": {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"houseId\",",
													"                        \"location\"",
													"                    ],",
													"                    \"additionalProperties\": true,",
													"                    \"properties\": {",
													"                        \"houseId\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"location\": {",
													"                            \"type\": \"string\"",
													"                        }",
													"                    }",
													"                },",
													"                \"sectionId\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"sectionType\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"innerItems\": {",
													"                    \"type\": \"array\",",
													"                    \"additionalItems\": true,",
													"                    \"items\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"type\",",
													"                            \"originId\",",
													"                            \"defaultSectionType\",",
													"                            \"title\",",
													"                            \"info\",",
													"                            \"sectionIds\"",
													"                        ],",
													"                        \"additionalProperties\": true,",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"type\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"originId\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"defaultSectionType\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"info\": {",
													"                                \"type\": \"object\",",
													"                                \"required\": [",
													"                                    \"deviceId\",",
													"                                    \"propertyId\",",
													"                                    \"nodeId\",",
													"                                    \"controllerId\",",
													"                                    \"houseId\",",
													"                                    \"deviceTitle\"",
													"                                ],",
													"                                \"additionalProperties\": true,",
													"                                \"properties\": {",
													"                                    \"deviceId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"propertyId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"nodeId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"controllerId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"houseId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"deviceTitle\": {",
													"                                        \"type\": \"string\"",
													"                                    }",
													"                                }",
													"                            },",
													"                            \"sectionIds\": {",
													"                                \"type\": \"array\",",
													"                                \"additionalItems\": true,",
													"                                \"items\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            }",
													"                        }",
													"                    }",
													"                },",
													"                \"generalSwitch\": {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"position\"",
													"                    ],",
													"                    \"additionalProperties\": true,",
													"                    \"properties\": {",
													"                        \"position\": {",
													"                            \"type\": \"boolean\"",
													"                        }",
													"                    }",
													"                },",
													"                \"generalSwitchPosition\": {",
													"                    \"type\": \"boolean\"",
													"                }",
													"            }",
													"        }",
													"    };",
													"     ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"    setTimeout(function(){}, [1000]);",
													"}",
													"catch(e){",
													"    console.log(e)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"{{ID_dashboards_device}}\",\n        \"innerItemsId\": [\n            \"{{ID_dashboards_item1}}\"\n        ]\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"array\",",
													"    \"additionalItems\": true,",
													"    \"items\": {",
													"        \"anyOf\": [",
													"            {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"id\",",
													"                    \"type\",",
													"                    \"title\",",
													"                    \"info\",",
													"                    \"innerItems\",",
													"                    \"generalSwitch\",",
													"                    \"entity\"",
													"                ],",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"type\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"title\": {",
													"                    },",
													"                    \"info\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"houseId\",",
													"                            \"location\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"houseId\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"location\": {",
													"                                \"type\": \"string\"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    },",
													"                    \"innerItems\": {",
													"                        \"type\": \"array\",",
													"                        \"additionalItems\": true,",
													"                        \"items\": {",
													"                        }",
													"                    },",
													"                    \"generalSwitch\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"position\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"position\": {",
													"                                \"type\": \"boolean\"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    },",
													"                    \"entity\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"locationTitle\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"locationTitle\": {",
													"                                \"type\": \"string\"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        ]",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"проверка полей type, houseId, location, id, а также количество элементов локации по умолчанию (innerItems.length) и id элемента\",  () => {",
													"    let i = 0;    ",
													"    while(i < pm.response.json().length ){",
													"        pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"        pm.expect(pm.response.json()[i].info).to.be.a('object');",
													"        pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"        if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"            pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"            pm.expect(pm.response.json()[i].id).to.equal(pm.environment.get(\"ID_dashboards\"));  ",
													"        }",
													"",
													"        if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"            pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);",
													"            pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"        }",
													"        i++;",
													"    }       ",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на обновление локации у группы устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"setTimeout(function(){}, [1000]); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cameraIds\": [],\n    \"deviceIds\": [\n        \"{{deviceId}}\",\n        \"{{deviceId2}}\"\n    ],\n    \"locationId\": \"{{item_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов доступных для добавления.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"проверка полей type, houseId, location, deviceId, innerItems[0].id, а также проверка количества элементов в локации по умолчанию (innerItems.length)\",  () => {",
													"        var i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                pm.expect(pm.response.json()[i].innerItems[0].info.deviceId).to.equal(pm.environment.get(\"deviceId\"));            ",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"                //pm.expect(pm.response.json()[i].innerItems[1].id).to.equal(pm.environment.get(\"ID_dashboards_item2\"));            ",
													"            };",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(0);            ",
													"            };",
													"            i++;",
													"        };",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"} "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"suitable"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Управление домами",
					"item": [
						{
							"name": "/oauth2/token(admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a user (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"id\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"    pm.test(\"Пользователь создан\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
											"",
											"    var schema =  {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"variables\",",
											"        \"dashboardItems\",",
											"        \"houseGroups\",",
											"        \"guards\",",
											"        \"title\",",
											"        \"ownerId\",",
											"        \"address\",",
											"        \"apartment\",",
											"        \"timeZone\",",
											"        \"type\",",
											"        \"startTime\",",
											"        \"guardStatus\",",
											"        \"underGuard\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"variables\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"dashboardItems\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"houseGroups\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"guards\": {",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {}",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"ownerId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"apartment\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"timeZone\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"startTime\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"guardStatus\": {",
											"            \"type\": \"null\"",
											"        },",
											"        \"underGuard\": {",
											"            \"type\": \"boolean\"",
											"        }",
											"    }",
											"}",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"test_home\",\n    \"type\": \"HOUSE\",\n    \"address\": \"test_street\",\n    \"apartment\": \"100\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка создания дома",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"    pm.test(\"проверка создания дома (поля id, ownerId, address, apartment, type, timeZone)\",() => {",
											"        pm.expect(pm.response.json().length).to.eql(1);",
											"        pm.expect(pm.response.json()[0].id).to.eql(pm.environment.get(\"houseId\"));",
											"        pm.expect(pm.response.json()[0].ownerId).to.eql(pm.environment.get(\"id\"));",
											"        pm.expect(pm.response.json()[0].address).to.eql(\"test_street\");        ",
											"        pm.expect(pm.response.json()[0].apartment).to.eql(\"100\");        ",
											"        pm.expect(pm.response.json()[0].type).to.eql(\"HOUSE\");    ",
											"        pm.expect(pm.response.json()[0].timeZone).to.eql(\"Asia/Krasnoyarsk\");    ",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"variables\",",
											"                \"dashboardItems\",",
											"                \"houseGroups\",",
											"                \"guards\",",
											"                \"title\",",
											"                \"ownerId\",",
											"                \"address\",",
											"                \"apartment\",",
											"                \"timeZone\",",
											"                \"type\",",
											"                \"startTime\",",
											"                \"guardStatus\",",
											"                \"underGuard\",",
											"                \"controllers\"",
											"            ],",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"variables\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"value\",",
											"                            \"title\",",
											"                            \"type\",",
											"                            \"system\",",
											"                            \"showInHeader\",",
											"                            \"enumValues\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"value\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"title\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"type\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"system\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"showInHeader\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"enumValues\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {",
											"                                    \"type\": \"object\",",
											"                                    \"required\": [",
											"                                        \"id\",",
											"                                        \"title\",",
											"                                        \"system\"",
											"                                    ],",
											"                                    \"properties\": {",
											"                                        \"id\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"title\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"system\": {",
											"                                            \"type\": \"boolean\"",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                },",
											"                \"dashboardItems\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"houseGroups\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"guards\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"title\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"ownerId\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"address\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"apartment\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"timeZone\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"startTime\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"guardStatus\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"underGuard\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"controllers\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"title\",",
											"                            \"typeController\",",
											"                            \"status\",",
											"                            \"virtual\",",
											"                            \"devices\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"title\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"typeController\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"status\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"virtual\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"devices\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменить дом",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"test_home\",\n    \"ownerId\": \"{{id}}\",\n    \"type\": \"HOUSE\",\n    \"address\": \"test_street_new\",\n    \"apartment\": \"100\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка изменения дома",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"    pm.test(\"Проверка изменения дома (поля id, ownerId, address, apartment, type, timeZone)\",() => {",
											"        pm.expect(pm.response.json().length).to.eql(1);",
											"        pm.expect(pm.response.json()[0].id).to.eql(pm.environment.get(\"houseId\"));",
											"        pm.expect(pm.response.json()[0].ownerId).to.eql(pm.environment.get(\"id\"));",
											"        pm.expect(pm.response.json()[0].address).to.eql(\"test_street_new\");        ",
											"        pm.expect(pm.response.json()[0].apartment).to.eql(\"100\");        ",
											"        pm.expect(pm.response.json()[0].type).to.eql(\"HOUSE\");    ",
											"        pm.expect(pm.response.json()[0].timeZone).to.eql(\"Asia/Krasnoyarsk\");    ",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"variables\",",
											"                \"dashboardItems\",",
											"                \"houseGroups\",",
											"                \"guards\",",
											"                \"title\",",
											"                \"ownerId\",",
											"                \"address\",",
											"                \"apartment\",",
											"                \"timeZone\",",
											"                \"type\",",
											"                \"startTime\",",
											"                \"guardStatus\",",
											"                \"underGuard\",",
											"                \"controllers\"",
											"            ],",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"variables\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"value\",",
											"                            \"title\",",
											"                            \"type\",",
											"                            \"system\",",
											"                            \"showInHeader\",",
											"                            \"enumValues\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"value\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"title\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"type\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"system\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"showInHeader\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"enumValues\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {",
											"                                    \"type\": \"object\",",
											"                                    \"required\": [",
											"                                        \"id\",",
											"                                        \"title\",",
											"                                        \"system\"",
											"                                    ],",
											"                                    \"properties\": {",
											"                                        \"id\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"title\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"system\": {",
											"                                            \"type\": \"boolean\"",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                },",
											"                \"dashboardItems\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"houseGroups\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"guards\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"title\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"ownerId\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"address\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"apartment\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"timeZone\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"startTime\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"guardStatus\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"underGuard\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"controllers\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"title\",",
											"                            \"typeController\",",
											"                            \"status\",",
											"                            \"virtual\",",
											"                            \"devices\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"title\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"typeController\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"status\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"virtual\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"devices\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить дом",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"test_home\",\n    \"ownerId\": \"{{id}}\",\n    \"type\": \"HOUSE\",\n    \"address\": \"test_street_new\",\n    \"apartment\": \"100\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка удаления дома",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"    pm.test(\"Проверка удаления дома\",() => {",
											"        pm.expect(pm.response.json().length).to.eql(0);",
											"",
											"    });",
											"",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"variables\",",
											"                \"dashboardItems\",",
											"                \"houseGroups\",",
											"                \"guards\",",
											"                \"title\",",
											"                \"ownerId\",",
											"                \"address\",",
											"                \"apartment\",",
											"                \"timeZone\",",
											"                \"type\",",
											"                \"startTime\",",
											"                \"guardStatus\",",
											"                \"underGuard\",",
											"                \"controllers\"",
											"            ],",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"variables\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"value\",",
											"                            \"title\",",
											"                            \"type\",",
											"                            \"system\",",
											"                            \"showInHeader\",",
											"                            \"enumValues\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"value\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"title\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"type\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"system\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"showInHeader\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"enumValues\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {",
											"                                    \"type\": \"object\",",
											"                                    \"required\": [",
											"                                        \"id\",",
											"                                        \"title\",",
											"                                        \"system\"",
											"                                    ],",
											"                                    \"properties\": {",
											"                                        \"id\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"title\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"system\": {",
											"                                            \"type\": \"boolean\"",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                },",
											"                \"dashboardItems\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"houseGroups\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"guards\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {}",
											"                },",
											"                \"title\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"ownerId\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"address\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"apartment\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"timeZone\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"startTime\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"guardStatus\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"underGuard\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"controllers\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"title\",",
											"                            \"typeController\",",
											"                            \"status\",",
											"                            \"virtual\",",
											"                            \"devices\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"title\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"typeController\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"status\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"virtual\": {",
											"                                \"type\": \"boolean\"",
											"                            },",
											"                            \"devices\": {",
											"                                \"type\": \"array\",",
											"                                \"items\": {}",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка добавления хаба",
					"item": [
						{
							"name": "Создать пользователя",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (ab_test_1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);    ",
													"    postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"    pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"        pm.expect(pm.response.json()).to.have.property('id');",
													"        pm.expect(pm.response.json().id).to.string    ",
													"    });",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"\",\n    \"username\": \"123\",\n    \"emailConfirm\": false,\n    \"phoneConfirm\": false,\n    \"surname\": \"ФАмилия\",\n    \"name\": \"ИМЯ\",\n    \"patronymic\": \"ОТЧЕСТВО\",\n    \"email\": \"ab_test_1@mail\",\n    \"phone\": \"79999999999\",\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"permissions\": [],\n    \"roleSettings\": {},\n    \"language\": \"ru\",\n    \"enabled\": true,\n    \"admin\": false,\n    \"houseIds\": [],\n    \"videoParameters\": null,\n    \"access\": {},\n    \"accessMap\": {},\n    \"ownedHouseIds\": [],\n    \"testModeEnabled\": false,\n    \"password\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Подготовить и добавить контроллер",
							"item": [
								{
									"name": "Подготовка контроллера",
									"item": [
										{
											"name": "Параметры контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Настройки применены\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
															"    if(pm.response.code == 400) {",
															"        pm.expect(pm.response.text()).to.include(\"connected\");",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/info",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение типа платформы",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"let isSL10 = pm.response.json().version.includes(\"-b\");",
															"",
															"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
															"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
															"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/version",
													"host": [
														"{{host}}"
													],
													"path": [
														"version"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение информации о платформе",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var sdk = require('postman-collection');",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
															"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/info",
													"host": [
														"{{host}}"
													],
													"path": [
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание датчика протечки",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Датчик присутствует\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
															"    if(pm.response.code == 400) {",
															"        pm.expect(pm.response.text()).to.include(\"already exists\");",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 9\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/add",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});",
															"// Чтобы платформа успела принять подключение контроллера",
															"setTimeout(function(){}, [200]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Добавить контроллер",
									"item": [
										{
											"name": "Подключение к WebSocket (абонент 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, [5000]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"connect"
													],
													"query": [
														{
															"key": "host",
															"value": "{{host_ws}}/event_ws"
														},
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}"
														},
														{
															"key": "subprotocol",
															"value": "SmartHome"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление контроллера.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
															"setTimeout(function(){}, [2500]); ",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"postman.setEnvironmentVariable (\"current_time\", Date.now());",
															"console.log(Date.now())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание события добавления устройства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&timeout=180000&C_newStatus=ONLINE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_controllerId",
															"value": "{{ctl_id}}"
														},
														{
															"key": "C_type",
															"value": "DEVICE_STATUS_CHANGE"
														},
														{
															"key": "C_deviceInfo.nodeId",
															"value": "ZWAVE_ELTEX_7",
															"disabled": true
														},
														{
															"key": "timeout",
															"value": "180000"
														},
														{
															"key": "C_newStatus",
															"value": "ONLINE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение от WebSocket",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/disconnect",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"disconnect"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Проверка добавления",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка добавления контроллера, а также полей typeController, id, houseId\", function () {",
											"        pm.expect(pm.response.json().controllers.length).to.eql(3);",
											"        var Z_WAY = 0;",
											"        for(let i in pm.response.json().controllers){",
											"            if(pm.response.json().controllers[i].typeController === \"Z_WAY\"){",
											"                Z_WAY++;",
											"                pm.expect(pm.response.json().controllers[i].id).to.eql(pm.environment.get(\"ctl_id\"));",
											"                pm.expect(pm.response.json().controllers[i].houseId).to.eql(pm.environment.get(\"houseId\"));",
											"                pm.expect(pm.response.json().controllers[i].virtual).to.eql(false);",
											"            }",
											"        }",
											"        pm.expect(Z_WAY).to.eql(1);",
											"    });",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка создания новых переменных",
					"item": [
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавить новую переменную \"В командировке\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"houseMode\",\n    \"value\": \"atHome\",\n    \"title\": \"Режим\",\n    \"type\": \"ENUMERATION\",\n    \"system\": true,\n    \"showInHeader\": true,\n    \"enumValues\": [\n        {\n            \"id\": \"atHome\",\n            \"title\": \"Я дома\",\n            \"system\": true\n        },\n        {\n            \"id\": \"notAtHome\",\n            \"title\": \"Я не дома\",\n            \"system\": true\n        },\n        {\n            \"id\": \"onHoliday\",\n            \"title\": \"В отпуске\",\n            \"system\": true\n        },\n        {\n            \"id\": \"businessTrip\",\n            \"title\": \"В командировке\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/vars/houseMode",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"vars",
										"houseMode"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверить создание новой переменной дома",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Проверка полей id, title, system\", function () {",
											"    pm.expect(pm.response.json().enumValues.length).to.eql(4)",
											"        var businessTrip = 0;",
											"        for(let i in pm.response.json().enumValues){",
											"            if(pm.response.json().enumValues[i].system === false){",
											"                businessTrip++;",
											"                pm.expect(pm.response.json().enumValues[i].id).to.eql(\"businessTrip\");",
											"                pm.expect(pm.response.json().enumValues[i].title).to.eql(\"В командировке\");",
											"            }",
											"            else{",
											"                pm.expect(pm.response.json().enumValues[i].system).to.eql(true);",
											"            }",
											"        }",
											"        pm.expect(businessTrip).to.eql(1);",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"value\",",
											"        \"title\",",
											"        \"type\",",
											"        \"system\",",
											"        \"showInHeader\",",
											"        \"enumValues\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"value\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"system\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"showInHeader\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"enumValues\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"title\",",
											"                    \"system\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"title\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"system\": {",
											"                        \"type\": \"boolean\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/vars/houseMode",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"vars",
										"houseMode"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка добавления/настройки  местоположения",
					"item": [
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создает группу с уникальным id, указанным наименованием и группой родителем. (Создаем LOCATION_LIST)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });    ",
											"    postman.setEnvironmentVariable (\"item_id\", responseBody); ",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [2500]); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"1\",\n    \"parentId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование группы: переименование, замена (удаление) id группы родителя.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"parentId\": \"\",\n  \"title\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Возвращает список групп дома.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"$id\": \"#/items\",",
											"            \"anyOf\": [",
											"                {",
											"                    \"$id\": \"#/items/anyOf/0\",",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"houseId\",",
											"                        \"title\",",
											"                        \"parentId\",",
											"                        \"plan\",",
											"                        \"childList\",",
											"                        \"deviceList\",",
											"                        \"cameraList\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/id\",",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"houseId\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/houseId\",",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"title\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/title\",",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"parentId\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/parentId\",",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"plan\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/plan\",",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"childList\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/childList\",",
											"                            \"type\": \"array\",",
											"                            \"additionalItems\": true,",
											"                            \"items\": {",
											"                                \"$id\": \"#/items/anyOf/0/properties/childList/items\"",
											"                            }",
											"                        },",
											"                        \"deviceList\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/deviceList\",",
											"                            \"type\": \"array\",",
											"                            \"additionalItems\": true,",
											"                            \"items\": {",
											"                                \"$id\": \"#/items/anyOf/0/properties/deviceList/items\"",
											"                            }",
											"                        },",
											"                        \"cameraList\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/cameraList\",",
											"                            \"type\": \"array\",",
											"                            \"additionalItems\": true,",
											"                            \"items\": {",
											"                                \"$id\": \"#/items/anyOf/0/properties/cameraList/items\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"additionalProperties\": true",
											"                }",
											"            ]",
											"        }",
											"    };",
											"        ",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"The data is correct\",  () => {",
											"        pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"item_id\"));",
											"        pm.expect(pm.response.json()[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
											"        pm.expect(pm.response.json()[0].title).to.equal(\"123\");",
											"        pm.expect(pm.response.json()[0].plan).to.equal(null);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавляем схему",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"setTimeout(function(){}, [50]);",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"imageId\", jsonData.imageId);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"Проверка наличия и типа поля imageId\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('imageId');",
											"    pm.expect(pm.response.json().imageId).to.string    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"contentType": "image/png",
											"description": "form-data; name=\"image\"; filename=\"1.png\"",
											"type": "file",
											"src": "q.png"
										}
									]
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Возвращает группу дома по id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"houseId\",",
											"        \"title\",",
											"        \"parentId\",",
											"        \"plan\",",
											"        \"childList\",",
											"        \"deviceList\",",
											"        \"cameraList\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"$id\": \"#/properties/houseId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"$id\": \"#/properties/title\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"parentId\": {",
											"            \"$id\": \"#/properties/parentId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"plan\": {",
											"            \"$id\": \"#/properties/plan\",",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"imageId\",",
											"                \"zones\",",
											"                \"points\"",
											"            ],",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"$id\": \"#/properties/plan/properties/id\",",
											"                    \"type\": \"string\"",
											"                },",
											"                \"imageId\": {",
											"                    \"$id\": \"#/properties/plan/properties/imageId\",",
											"                    \"type\": \"string\"",
											"                },",
											"                \"zones\": {",
											"                    \"$id\": \"#/properties/plan/properties/zones\",",
											"                    \"type\": \"object\",",
											"                    \"required\": [],",
											"                    \"additionalProperties\": true",
											"                },",
											"                \"points\": {",
											"                    \"$id\": \"#/properties/plan/properties/points\",",
											"                    \"type\": \"object\",",
											"                    \"required\": [],",
											"                    \"additionalProperties\": true",
											"                }",
											"            },",
											"            \"additionalProperties\": true",
											"        },",
											"        \"childList\": {",
											"            \"$id\": \"#/properties/childList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/childList/items\"",
											"            }",
											"        },",
											"        \"deviceList\": {",
											"            \"$id\": \"#/properties/deviceList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/deviceList/items\"",
											"            }",
											"        },",
											"        \"cameraList\": {",
											"            \"$id\": \"#/properties/cameraList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/cameraList/items\"",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"    var JsoneData=JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей id, houseId, title и количества элементов в обьекте plan\",  () => {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"item_id\"));",
											"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseId\"));",
											"    pm.expect(pm.response.json().title).to.equal(\"123\");",
											"    pm.expect(Object.keys(pm.response.json().plan).length === 4).to.be.true; //проверка на пустоту обьекта",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Возвращает ссылку на картинку группы.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверка поля imageId\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('imageId');",
											"    pm.expect(pm.response.json().imageId).to.string;",
											"    pm.expect(pm.response.json().imageId).to.equal(pm.environment.get(\"imageId\"));",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка девайсов контроллера.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable (\"nodeId\", jsonData[0].nodeId); ",
											"    postman.setEnvironmentVariable (\"deviceId\", jsonData[0].id );",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [2500]); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{ctl_id}}/devices",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{ctl_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос на обновление локации у группы устройств",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cameraIds\": [\n  ],\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ],\n  \"locationId\": \"{{item_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/devices/changeLocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"devices",
										"changeLocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Помещает устройство на план.(Добавляем устройство на план)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"   var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"deviceId\",",
											"        \"color\",",
											"        \"position\"",
											"    ],",
											"    \"properties\": {",
											"        \"deviceId\": {",
											"            \"$id\": \"#/properties/deviceId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"color\": {",
											"            \"$id\": \"#/properties/color\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"position\": {",
											"            \"$id\": \"#/properties/position\",",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"x\",",
											"                \"y\"",
											"            ],",
											"            \"properties\": {",
											"                \"x\": {",
											"                    \"$id\": \"#/properties/position/properties/x\",",
											"                    \"type\": \"number\"",
											"                },",
											"                \"y\": {",
											"                    \"$id\": \"#/properties/position/properties/y\",",
											"                    \"type\": \"number\"",
											"                }",
											"            },",
											"            \"additionalProperties\": true",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка полей deviceId, color и объекта position\",  () => {",
											"        pm.expect(pm.response.json().deviceId).to.equal(pm.environment.get(\"deviceId\"));",
											"        pm.expect(pm.response.json().color).to.equal(\"rgb(255, 171, 0)\");",
											"        pm.expect(pm.response.json().position[\"x\"]).to.equal(10.0);",
											"        pm.expect(pm.response.json().position[\"y\"]).to.equal(10.0);",
											"    });",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"deviceId\": \"{{deviceId}}\",\n    \"position\": {\n        \"x\": 10,\n        \"y\": 10\n    },\n    \"color\": \"rgb(255, 171, 0)\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/point/{{deviceId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"point",
										"{{deviceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "проверка добавления",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"houseId\",",
											"        \"title\",",
											"        \"parentId\",",
											"        \"plan\",",
											"        \"childList\",",
											"        \"deviceList\",",
											"        \"cameraList\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"$id\": \"#/properties/houseId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"$id\": \"#/properties/title\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"parentId\": {",
											"            \"$id\": \"#/properties/parentId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"plan\": {",
											"            \"$id\": \"#/properties/plan\",",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"imageId\",",
											"                \"zones\",",
											"                \"points\"",
											"            ],",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"$id\": \"#/properties/plan/properties/id\",",
											"                    \"type\": \"string\"",
											"                },",
											"                \"imageId\": {",
											"                    \"$id\": \"#/properties/plan/properties/imageId\",",
											"                    \"type\": \"string\"",
											"                },",
											"                \"zones\": {",
											"                    \"$id\": \"#/properties/plan/properties/zones\",",
											"                    \"type\": \"object\",",
											"                    \"required\": [],",
											"                    \"additionalProperties\": true",
											"                },",
											"                \"points\": {}",
											"            },",
											"            \"additionalProperties\": true",
											"        },",
											"        \"childList\": {",
											"            \"$id\": \"#/properties/childList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/childList/items\"",
											"            }",
											"        },",
											"        \"deviceList\": {",
											"            \"$id\": \"#/properties/deviceList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/deviceList/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/deviceList/items/anyOf/0\",",
											"                        \"type\": \"string\"",
											"                    }",
											"                ]",
											"            }",
											"        },",
											"        \"cameraList\": {",
											"            \"$id\": \"#/properties/cameraList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/cameraList/items\"",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"    var JsoneData=JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей imageId и объекта points\",  () => {",
											"    pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
											"    pm.expect(pm.response.json().plan.points).to.have.property(pm.environment.get(\"deviceId\"));",
											"    pm.expect(pm.response.json().plan.points[pm.environment.get(\"deviceId\")].deviceId).to.equal(pm.environment.get(\"deviceId\"));",
											"    pm.expect(pm.response.json().plan.points[pm.environment.get(\"deviceId\")].color).to.equal(\"rgb(255, 171, 0)\");",
											"    pm.expect(pm.response.json().plan.points[pm.environment.get(\"deviceId\")].position[\"x\"]).to.equal(10.0);",
											"    pm.expect(pm.response.json().plan.points[pm.environment.get(\"deviceId\")].position[\"y\"]).to.equal(10.0);",
											"",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновляет координаты точки.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"deviceId\": \"{{deviceId}}\",\n    \"position\": {\n        \"x\": 88,\n        \"y\": 8\n    },\n    \"color\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/point/{{deviceId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"point",
										"{{deviceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Возвращает план группы.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверка полей imageId и объекта points\",  () => {",
											"    pm.expect(pm.response.json().imageId).to.equal(pm.environment.get(\"imageId\"));",
											"",
											"    pm.expect(pm.response.json().points[pm.environment.get(\"deviceId\")].color).to.equal(\"rgb(255, 171, 0)\");",
											"    pm.expect(pm.response.json().points[pm.environment.get(\"deviceId\")].position[\"x\"]).to.equal(88.0);",
											"    pm.expect(pm.response.json().points[pm.environment.get(\"deviceId\")].position[\"y\"]).to.equal(8.0);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление устройства с плана",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/point/{{deviceId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"point",
										"{{deviceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "проверка удаления устройства со схемы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"houseId\",",
											"        \"title\",",
											"        \"parentId\",",
											"        \"plan\",",
											"        \"childList\",",
											"        \"deviceList\",",
											"        \"cameraList\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"$id\": \"#/properties/id\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"houseId\": {",
											"            \"$id\": \"#/properties/houseId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"title\": {",
											"            \"$id\": \"#/properties/title\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"parentId\": {",
											"            \"$id\": \"#/properties/parentId\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"plan\": {",
											"            \"$id\": \"#/properties/plan\",",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"imageId\",",
											"                \"zones\",",
											"                \"points\"",
											"            ],",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"$id\": \"#/properties/plan/properties/id\",",
											"                    \"type\": \"string\"",
											"                },",
											"                \"imageId\": {",
											"                    \"$id\": \"#/properties/plan/properties/imageId\",",
											"                    \"type\": \"string\"",
											"                },",
											"                \"zones\": {",
											"                    \"$id\": \"#/properties/plan/properties/zones\",",
											"                    \"type\": \"object\",",
											"                    \"required\": [],",
											"                    \"additionalProperties\": true",
											"                },",
											"                \"points\": {}",
											"            },",
											"            \"additionalProperties\": true",
											"        },",
											"        \"childList\": {",
											"            \"$id\": \"#/properties/childList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/childList/items\"",
											"            }",
											"        },",
											"        \"deviceList\": {",
											"            \"$id\": \"#/properties/deviceList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/deviceList/items\",",
											"                \"anyOf\": [",
											"                    {",
											"                        \"$id\": \"#/properties/deviceList/items/anyOf/0\",",
											"                        \"type\": \"string\"",
											"                    }",
											"                ]",
											"            }",
											"        },",
											"        \"cameraList\": {",
											"            \"$id\": \"#/properties/cameraList\",",
											"            \"type\": \"array\",",
											"            \"additionalItems\": true,",
											"            \"items\": {",
											"                \"$id\": \"#/properties/cameraList/items\"",
											"            }",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"    var JsoneData=JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Проверка полей imageId и объекта points\",  () => {",
											"    pm.expect(pm.response.json().plan).to.have.property(\"points\");",
											"    pm.expect(pm.response.json().plan).to.have.property(\"imageId\");",
											"    pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
											"    pm.expect(pm.response.json().plan.points.noSuchProperty === undefined).to.be.true;",
											"    ",
											"",
											"",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "заменяет картинку группы.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"setTimeout(function(){}, [50]);",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"imageId\", jsonData.imageId);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"Проверка наличия и типа поля imageId\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('imageId');",
											"    pm.expect(pm.response.json().imageId).to.string    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"contentType": "image/jpeg",
											"description": "form-data; name=\"image\"; filename=\"1.jpg\"",
											"type": "file",
											"src": "jpg.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создаем дочернюю группу",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });    ",
											"    postman.setEnvironmentVariable (\"child_group\", responseBody); ",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"child group\",\n    \"parentId\": \"{{item_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Помещает группу на план.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"groupId\",",
											"        \"color\",",
											"        \"upperLeft\",",
											"        \"lowerRight\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"groupId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"color\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"upperLeft\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"x\",",
											"                \"y\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"x\": {",
											"                    \"type\": \"number\"",
											"                },",
											"                \"y\": {",
											"                    \"type\": \"number\"",
											"                }",
											"            }",
											"        },",
											"        \"lowerRight\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"x\",",
											"                \"y\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"x\": {",
											"                    \"type\": \"number\"",
											"                },",
											"                \"y\": {",
											"                    \"type\": \"number\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"     ",
											"pm.test('Schema is valid', function () {",
											"    var JsoneData=JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});",
											"",
											"    pm.test(\"Проверка полей groupId, color, а также объектов upperLeft и lowerRight\",  () => {",
											"        pm.expect(pm.response.json().groupId).to.equal(pm.environment.get(\"child_group\"));",
											"        pm.expect(pm.response.json().color).to.equal(\"rgb(255, 171, 110)\");",
											"        pm.expect(pm.response.json().upperLeft[\"x\"]).to.equal(100.0);",
											"        pm.expect(pm.response.json().upperLeft[\"y\"]).to.equal(100.0);",
											"        pm.expect(pm.response.json().lowerRight[\"x\"]).to.equal(100.0);",
											"        pm.expect(pm.response.json().lowerRight[\"y\"]).to.equal(100.0);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"color\": \"rgb(255, 171, 110)\",\n    \"upperLeft\": {\n        \"x\": 100,\n        \"y\": 100\n    },\n    \"lowerRight\": {\n        \"x\": 100,\n        \"y\": 100\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/zone/{{child_group}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"zone",
										"{{child_group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "проверка добавления группы (на схему и как дочерней группы) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Проверка объекта plan (поля imageId, points, объект zones (все его поля)) \",  () => {",
											"        pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
											"        pm.expect(pm.response.json().plan.points.noSuchProperty === undefined).to.be.true;",
											"        pm.expect(pm.response.json().plan.zones).to.have.property(pm.environment.get(\"child_group\"));",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].groupId).to.equal(pm.environment.get(\"child_group\"));",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].color).to.equal(\"rgb(255, 171, 110)\");",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].upperLeft.x).to.equal(100.0);",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].upperLeft.y).to.equal(100.0);",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].lowerRight.x).to.equal(100.0);",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].lowerRight.y).to.equal(100.0);",
											"    });",
											"",
											"    pm.test(\"Проверка объекта childList (его длина и поля id, houseId, title, parentId), а также  проверка массива deviceList\",  () => {",
											"        pm.expect(pm.response.json().childList.length).to.equal(1);",
											"        pm.expect(pm.response.json().childList[0].id).to.equal(pm.environment.get(\"child_group\"));",
											"        pm.expect(pm.response.json().childList[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
											"        pm.expect(pm.response.json().childList[0].title).to.equal(\"child group\");",
											"        pm.expect(pm.response.json().childList[0].parentId).to.equal(pm.environment.get(\"item_id\"));",
											"        pm.expect(pm.response.json().deviceList[0]).to.equal(pm.environment.get(\"deviceId\"));",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновляет координаты зоны (и цвет)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"color\": \"rgb(11, 22, 33)\",\n  \"upperLeft\": {\n    \"x\": 77,\n    \"y\": 66\n  },\n  \"lowerRight\": {\n    \"x\": 55,\n    \"y\": 44\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/zone/{{child_group}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"zone",
										"{{child_group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Координаты изменились ?",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Проверка объекта plan (поля imageId, points, объект zones (все его поля)) \",  () => {",
											"        pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
											"        pm.expect(pm.response.json().plan.points.noSuchProperty === undefined).to.be.true;",
											"        pm.expect(pm.response.json().plan.zones).to.have.property(pm.environment.get(\"child_group\"));",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].groupId).to.equal(pm.environment.get(\"child_group\"));",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].color).to.equal(\"rgb(11, 22, 33)\");",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].upperLeft.x).to.equal(77.0);",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].upperLeft.y).to.equal(66.0);",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].lowerRight.x).to.equal(55.0);",
											"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].lowerRight.y).to.equal(44.0);",
											"    });",
											"",
											"    pm.test(\"Проверка объекта childList (его длина и поля id, houseId, title, parentId), а также  проверка массива deviceList\",  () => {",
											"        pm.expect(pm.response.json().childList.length).to.equal(1);",
											"        pm.expect(pm.response.json().childList[0].id).to.equal(pm.environment.get(\"child_group\"));",
											"        pm.expect(pm.response.json().childList[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
											"        pm.expect(pm.response.json().childList[0].title).to.equal(\"child group\");",
											"        pm.expect(pm.response.json().childList[0].parentId).to.equal(pm.environment.get(\"item_id\"));",
											"        pm.expect(pm.response.json().deviceList[0]).to.equal(pm.environment.get(\"deviceId\"));",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаляет группу (зону) с плана.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/zone/{{child_group}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"zone",
										"{{child_group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "группа (зона) удалена с плана ?",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"        pm.response.to.be.json; // проверка формата",
											"    });",
											"",
											"    pm.test(\"Проверка объекта plan (поля imageId, объект points, объект zones\",  () => {",
											"        pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
											"        pm.expect(pm.response.json().plan.points.noSuchProperty === undefined).to.be.true;",
											"        pm.expect(pm.response.json().plan.zones.noSuchProperty === undefined).to.be.true;",
											"",
											"    });",
											"",
											"    pm.test(\"Проверка объекта childList (его длина и поля id, houseId, title, parentId), а также  проверка массива deviceList\",  () => {",
											"        pm.expect(pm.response.json().childList.length).to.equal(1);",
											"        pm.expect(pm.response.json().childList[0].id).to.equal(pm.environment.get(\"child_group\"));",
											"        pm.expect(pm.response.json().childList[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
											"        pm.expect(pm.response.json().childList[0].title).to.equal(\"child group\");",
											"        pm.expect(pm.response.json().childList[0].parentId).to.equal(pm.environment.get(\"item_id\"));",
											"        pm.expect(pm.response.json().deviceList[0]).to.equal(pm.environment.get(\"deviceId\"));",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Возвращает ссылки на картинки всех групп дома.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"    pm.test(\"Проверка ответа (должен быть imageId)\",  () => {",
											"        pm.expect(pm.response.json()[0]).to.equal(pm.environment.get(\"imageId\"));",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"type\": \"string\"",
											"        }",
											"    };",
											"        ",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images/all",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"images",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаляем схему",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "проверка удаления схемы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверка поля imageId\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property(\"imageId\");",
											"    pm.expect(pm.response.json().imageId).to.equal(null);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}",
										"plan",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление группы.  (LOCATION_LIST)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "проверка удаления LOCATION_LIST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"",
											"pm.test(\"Проверка отсутсвия id группы в houseGroups \",  () => {",
											"    var i = 0;",
											"    while(i < pm.response.json().houseGroups.length){",
											"        pm.expect(pm.response.json().houseGroups[i].id == pm.environment.get(\"item_id\") ).to.be.false;        ",
											"        i++;",
											"    }    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Сценарии",
					"item": [
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создать сценарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"scriptId\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Сценарий\",\n    \"enabled\": true,\n    \"actions\": [\n        {\n            \"type\": \"SET_HOUSE_VARIABLE\",\n            \"data\": {\n                \"variableId\": \"houseMode\",\n                \"newValue\": \"businessTrip\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/scripts",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"scripts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создать правило",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable (\"rules_scriptId\", jsonData.id);",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json().id).to.string    ",
											"});",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"enabled\": \"true\",\n    \"conditions\": [\n        {\n            \"sourceType\": \"DEVICE_PROPERTY\",\n            \"comparison\": \"EQ\",\n            \"observableValue\": {\n                \"controllerId\": \"1c3f4929-91b2-59e6-9dd7-4bbd187d8a07\",\n                \"nodeId\": \"ZWAVE_ELTEX_9\",\n                \"propertyId\": \"ZWAVE_ELTEX_9-000-tamper-0\",\n                \"propertyKind\": \"TAMPER\",\n                \"holdInterval\": null\n            },\n            \"targetValue\": \"true\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/scripts/{{scriptId}}/rules",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"scripts",
										"{{scriptId}}",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Подключение к WebSocket (абонент 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [5000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"connect"
									],
									"query": [
										{
											"key": "host",
											"value": "{{host_ws}}/event_ws"
										},
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}"
										},
										{
											"key": "subprotocol",
											"value": "SmartHome"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Сработка датчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [4000]);",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"on\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/9/prop/0/tamper",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"9",
										"prop",
										"0",
										"tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание события добавления устройства Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=SCRIPT_FINISH_EXECUTE&timeout=180000",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_controllerId",
											"value": "{{ctl_id}}",
											"disabled": true
										},
										{
											"key": "C_type",
											"value": "SCRIPT_FINISH_EXECUTE"
										},
										{
											"key": "C_deviceInfo.nodeId",
											"value": "ZWAVE_ELTEX_7",
											"disabled": true
										},
										{
											"key": "timeout",
											"value": "180000"
										},
										{
											"key": "C_newStatus",
											"value": "ONLINE",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение от WebSocket Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/disconnect",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"disconnect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Нормализация датчика Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/9/prop/0/tamper",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"9",
										"prop",
										"0",
										"tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка сработки сценария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"    });",
											"    pm.test(\"Режим дома должен быть В командировке\", function () {",
											"        pm.expect(pm.response.json()[0].currentValue).to.eql(\"businessTrip\")",
											"      ",
											"    });",
											"",
											"   var schema =  {",
											"    \"type\": \"array\",",
											"    \"additionalItems\": true,",
											"    \"items\": {",
											"        \"anyOf\": [",
											"            {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"currentValue\",",
											"                    \"title\",",
											"                    \"type\",",
											"                    \"system\",",
											"                    \"showInHeader\",",
											"                    \"enumValues\"",
											"                ],",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"currentValue\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"title\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"type\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"system\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"showInHeader\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"enumValues\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"atHome\",",
											"                            \"notAtHome\",",
											"                            \"onHoliday\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"atHome\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"id\",",
											"                                    \"title\",",
											"                                    \"system\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"id\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"title\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"system\": {",
											"                                        \"type\": \"boolean\"",
											"                                    }",
											"                                },",
											"                                \"additionalProperties\": true",
											"                            },",
											"                            \"notAtHome\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"id\",",
											"                                    \"title\",",
											"                                    \"system\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"id\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"title\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"system\": {",
											"                                        \"type\": \"boolean\"",
											"                                    }",
											"                                },",
											"                                \"additionalProperties\": true",
											"                            },",
											"                            \"onHoliday\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"id\",",
											"                                    \"title\",",
											"                                    \"system\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"id\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"title\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"system\": {",
											"                                        \"type\": \"boolean\"",
											"                                    }",
											"                                },",
											"                                \"additionalProperties\": true",
											"                            }",
											"                        },",
											"                        \"additionalProperties\": true",
											"                    }",
											"                },",
											"                \"additionalProperties\": true",
											"            }",
											"        ]",
											"    }",
											"}",
											"",
											"",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [5000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/vars",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"vars"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Устройства",
					"item": [
						{
							"name": "Отключение контроллера",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение контроллера от платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{zway_ctl_host}}/devices/9",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить контроллер",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{ctl_id}}/remove",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{ctl_id}}",
												"remove"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Подготовить и добавить контроллер",
							"item": [
								{
									"name": "Подготовка контроллера",
									"item": [
										{
											"name": "/oauth2/token (user)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"var jsonData = JSON.parse(responseBody);",
															"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
															"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
															"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body contains access token\",() => {",
															"  pm.expect(pm.response.text()).to.include(\"access_token\");",
															"});",
															"",
															"var scheme = {",
															"    \"type\": \"object\",",
															"    \"required\": [",
															"        \"access_token\",",
															"        \"refresh_token\",",
															"        \"token_type\",",
															"        \"expires_in\"",
															"    ],",
															"    \"additionalProperties\": true,",
															"    \"properties\": {",
															"        \"access_token\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"refresh_token\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"token_type\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"expires_in\": {",
															"            \"type\": \"integer\"",
															"        }",
															"    }",
															"};",
															"pm.test('JSON is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
															"});",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "123",
															"type": "text"
														},
														{
															"key": "password",
															"value": "123",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/oauth2/token",
													"host": [
														"{{host}}"
													],
													"path": [
														"oauth2",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "Параметры контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Настройки применены\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
															"    if(pm.response.code == 400) {",
															"        pm.expect(pm.response.text()).to.include(\"connected\");",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/info",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение типа платформы",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"let isSL10 = pm.response.json().version.includes(\"-b\");",
															"",
															"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
															"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
															"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/version",
													"host": [
														"{{host}}"
													],
													"path": [
														"version"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение информации о платформе",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var sdk = require('postman-collection');",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
															"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/info",
													"host": [
														"{{host}}"
													],
													"path": [
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});",
															"// Чтобы платформа успела принять подключение контроллера",
															"setTimeout(function(){}, [200]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Добавить контроллер",
									"item": [
										{
											"name": "Подключение к WebSocket (абонент 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, [5000]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"connect"
													],
													"query": [
														{
															"key": "host",
															"value": "{{host_ws}}/event_ws"
														},
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}"
														},
														{
															"key": "subprotocol",
															"value": "SmartHome"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление контроллера.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
															"setTimeout(function(){}, [2500]); ",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"postman.setEnvironmentVariable (\"current_time\", Date.now());",
															"console.log(Date.now())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание события добавления контроллера",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_ADD&timeout=180000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_controllerId",
															"value": "{{ctl_id}}",
															"disabled": true
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_ADD"
														},
														{
															"key": "C_deviceInfo.nodeId",
															"value": "ZWAVE_ELTEX_7",
															"disabled": true
														},
														{
															"key": "timeout",
															"value": "180000"
														},
														{
															"key": "C_newStatus",
															"value": "ONLINE",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Добавить датчик",
							"item": [
								{
									"name": "Начать добавление zway устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"deviceType\":\"Z_WAY_DEVICE\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{ctl_id}}/devices/add",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{ctl_id}}",
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 9\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/add",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события добавления устройства Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&timeout=180000&C_newStatus=ONLINE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_controllerId",
													"value": "{{ctl_id}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_STATUS_CHANGE"
												},
												{
													"key": "C_deviceInfo.nodeId",
													"value": "ZWAVE_ELTEX_7",
													"disabled": true
												},
												{
													"key": "timeout",
													"value": "180000"
												},
												{
													"key": "C_newStatus",
													"value": "ONLINE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверить добавление датчика",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Проверить добавление датчика\",() => {",
													"  pm.expect(pm.response.json().length).to.eql(1);",
													"  pm.expect(pm.response.json()[0].deviceType).to.eql(\"Z_WAY_DEVICE\");",
													"  pm.expect(pm.response.json()[0].controllerId).to.eql(pm.environment.get(\"ctl_id\"));",
													"",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/devices?withCameras=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"devices"
											],
											"query": [
												{
													"key": "withCameras",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "События",
					"item": [
						{
							"name": "События",
							"item": [
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Журнал событий без фильтров",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Проверка наличия событий\",() => {",
													"    pm.expect(pm.response.json().data.length).to.be.above(14);",
													"    pm.expect(pm.response.json().total).to.be.above(14);",
													"    pm.expect(pm.response.json().total).to.eql(pm.response.json().data.length);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=50&offset=0&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Журнал событий с фильтром по дому",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Проверка наличия событий\",() => {",
													"    pm.expect(pm.response.json().data.length).to.be.above(14);",
													"    pm.expect(pm.response.json().total).to.be.above(14);",
													"    pm.expect(pm.response.json().total).to.eql(pm.response.json().data.length);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=50&offset=0&language=ru&houseId={{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												},
												{
													"key": "houseId",
													"value": "{{houseId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Журнал событий с фильтром по дому и level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Проверка наличия событий, а также полей message, level, type и icon_name\",() => {",
													"    pm.expect(pm.response.json().data.length).to.eql(2);",
													"    pm.expect(pm.response.json().total).to.eql(2);",
													"    pm.expect(pm.response.json().total).to.eql(pm.response.json().data.length);",
													"    for(let i in pm.response.json().data){",
													"        pm.expect(pm.response.json().data[i].message).to.be.oneOf([\"ZWAVE_ELTEX_9 : вскрытие не обнаружено\",\"ZWAVE_ELTEX_9 : вскрытие обнаружено\"])",
													"        pm.expect(pm.response.json().data[i].level).to.eql(\"CRITICAL\")",
													"        pm.expect(pm.response.json().data[i].type).to.eql(\"device_tamper_change\")",
													"        pm.expect(pm.response.json().data[i].icon_name).to.be.oneOf([\"tamper_on\",\"tamper_off\"])",
													"        pm.expect(pm.response.json().data[i].house_id).to.eql(pm.environment.get(\"houseId\"))",
													"    }",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"type\",",
													"        \"total\",",
													"        \"data\",",
													"        \"next_time_millis\",",
													"        \"next_offset\",",
													"        \"last_read_event_time_millis\"",
													"    ],",
													"    \"properties\": {",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"total\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"data\": {",
													"            \"type\": \"array\",",
													"            \"items\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"id\",",
													"                    \"message\",",
													"                    \"level\",",
													"                    \"type\",",
													"                    \"icon_name\",",
													"                    \"origin_id\",",
													"                    \"origin_type\",",
													"                    \"created_at_millis\",",
													"                    \"house_id\",",
													"                    \"user_id\",",
													"                    \"links\",",
													"                    \"color\",",
													"                    \"section_type\",",
													"                    \"section_id\"",
													"                ],",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"null\"",
													"                    },",
													"                    \"message\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"level\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"type\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"icon_name\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"origin_id\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"origin_type\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"created_at_millis\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"house_id\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"user_id\": {",
													"                        \"type\": \"null\"",
													"                    },",
													"                    \"links\": {",
													"                        \"type\": \"null\"",
													"                    },",
													"                    \"color\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"section_type\": {",
													"                        \"type\": \"null\"",
													"                    },",
													"                    \"section_id\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            }",
													"        },",
													"        \"next_time_millis\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"next_offset\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"last_read_event_time_millis\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=50&offset=0&language=ru&houseId={{houseId}}&level=CRITICAL",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												},
												{
													"key": "houseId",
													"value": "{{houseId}}"
												},
												{
													"key": "level",
													"value": "CRITICAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Журнал событий с фильтром по дому и level и originType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Проверка наличия событий, а также полей message, level, type и icon_name\",() => {",
													"    pm.expect(pm.response.json().data.length).to.eql(2);",
													"    pm.expect(pm.response.json().total).to.eql(2);",
													"    pm.expect(pm.response.json().total).to.eql(pm.response.json().data.length);",
													"    for(let i in pm.response.json().data){",
													"        pm.expect(pm.response.json().data[i].message).to.be.oneOf([\"Выполнение сценария 'Сценарий'\",\"Создан сценарий 'Сценарий'\"])",
													"        pm.expect(pm.response.json().data[i].level).to.eql(\"SYSTEM\")",
													"        pm.expect(pm.response.json().data[i].type).to.be.oneOf([\"script_create\",\"script_execute\"])",
													"        pm.expect(pm.response.json().data[i].icon_name).to.be.oneOf([\"script_create\",\"script_execute\"])",
													"        pm.expect(pm.response.json().data[i].house_id).to.eql(pm.environment.get(\"houseId\"))",
													"",
													"        ",
													"    }",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"type\",",
													"        \"total\",",
													"        \"data\",",
													"        \"next_time_millis\",",
													"        \"next_offset\",",
													"        \"last_read_event_time_millis\"",
													"    ],",
													"    \"properties\": {",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"total\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"data\": {",
													"            \"type\": \"array\",",
													"            \"items\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"id\",",
													"                    \"message\",",
													"                    \"level\",",
													"                    \"type\",",
													"                    \"icon_name\",",
													"                    \"origin_id\",",
													"                    \"origin_type\",",
													"                    \"created_at_millis\",",
													"                    \"house_id\",",
													"                    \"user_id\",",
													"                    \"links\",",
													"                    \"color\",",
													"                    \"section_type\",",
													"                    \"section_id\"",
													"                ],",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"null\"",
													"                    },",
													"                    \"message\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"level\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"type\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"icon_name\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"origin_id\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"origin_type\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"created_at_millis\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"house_id\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"user_id\": {",
													"                        \"type\": \"null\"",
													"                    },",
													"                    \"links\": {",
													"                        \"type\": \"null\"",
													"                    },",
													"                    \"color\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"section_type\": {",
													"                        \"type\": \"null\"",
													"                    },",
													"                    \"section_id\": {",
													"                        \"type\": \"null\"",
													"                    }",
													"                }",
													"            }",
													"        },",
													"        \"next_time_millis\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"next_offset\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"last_read_event_time_millis\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=50&offset=0&language=ru&houseId={{houseId}}&level=SYSTEM&originType=SCRIPT",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "language",
													"value": "ru"
												},
												{
													"key": "houseId",
													"value": "{{houseId}}"
												},
												{
													"key": "level",
													"value": "SYSTEM"
												},
												{
													"key": "originType",
													"value": "SCRIPT"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{ACCESS_TOKEN}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Отключение контроллера",
							"item": [
								{
									"name": "Отключение контроллера от платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{zway_ctl_host}}/devices/9",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить контроллер",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{ctl_id}}/remove",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{ctl_id}}",
												"remove"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Проверка настроек уведомлений",
					"item": [
						{
							"name": "Контроллер для работы с настройками уведомлений пользователя",
							"item": [
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение настроек пользователя (оповещения, настройки видимости пропертей девайсов). Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    // var schema = {",
													"    //     \"type\": \"object\",",
													"    //     \"required\": [",
													"    //         \"additionalSettings\",",
													"    //         \"baseSettings\",",
													"    //         \"byPush\",",
													"    //         \"bySms\",",
													"    //         \"byEmail\"",
													"    //     ],",
													"    //     \"additionalProperties\": true,",
													"    //     \"properties\": {",
													"    //         \"additionalSettings\": {",
													"    //             \"type\": \"object\",",
													"    //             \"required\": [",
													"    //                 \"byHouseVariable\",",
													"    //                 \"valuesHouseVariable\",",
													"    //                 \"mutedEmergencyPushCategories\",",
													"    //                 \"byTime\",",
													"    //                 \"startTime\",",
													"    //                 \"endTime\",",
													"    //                 \"timeZone\"",
													"    //             ],",
													"    //             \"additionalProperties\": true,",
													"    //             \"properties\": {",
													"    //                 \"byHouseVariable\": {",
													"    //                     \"type\": \"boolean\"",
													"    //                 },",
													"    //                 \"valuesHouseVariable\": {",
													"    //                     \"type\": \"array\",",
													"    //                     \"additionalItems\": true,",
													"    //                     \"items\": {",
													"    //                         \"type\": \"string\"",
													"    //                     }",
													"    //                 },",
													"    //                 \"mutedEmergencyPushCategories\": {",
													"    //                     \"type\": \"null\"",
													"    //                 },",
													"    //                 \"byTime\": {",
													"    //                     \"type\": \"boolean\"",
													"    //                 },",
													"    //                 \"startTime\": {",
													"    //                     \"type\": \"null\"",
													"    //                 },",
													"    //                 \"endTime\": {",
													"    //                     \"type\": \"null\"",
													"    //                 },",
													"    //                 \"timeZone\": {",
													"    //                     \"type\": \"null\"",
													"    //                 }",
													"    //             }",
													"    //         },",
													"    //         \"baseSettings\": {",
													"    //             \"type\": \"object\",",
													"    //             \"required\": [",
													"    //                 \"email\",",
													"    //                 \"sms\",",
													"    //                 \"push\",",
													"    //                 \"events\"",
													"    //             ],",
													"    //             \"additionalProperties\": true,",
													"    //             \"properties\": {",
													"    //                 \"email\": {",
													"    //                     \"type\": \"object\",",
													"    //                     \"required\": [",
													"    //                         \"managementDevices\",",
													"    //                         \"loginUser\",",
													"    //                         \"managementUsers\",",
													"    //                         \"managementUserAccess\",",
													"    //                         \"managementHouses\",",
													"    //                         \"managementControllers\",",
													"    //                         \"houseVariableChange\",",
													"    //                         \"workOfControllers\",",
													"    //                         \"workOfBackup\",",
													"    //                         \"dropController\",",
													"    //                         \"statusOfDevices\",",
													"    //                         \"workOfDevices\",",
													"    //                         \"workOfScript\",",
													"    //                         \"criticalDevice\",",
													"    //                         \"criticalControllers\",",
													"    //                         \"infoGuardPanel\",",
													"    //                         \"criticalGuards\",",
													"    //                         \"detailGuardEvents\",",
													"    //                         \"guardEvents\",",
													"    //                         \"eventsByCameras\",",
													"    //                         \"statusesByCameras\",",
													"    //                         \"alarmChangedState\",",
													"    //                         \"technicalSupport\"",
													"    //                     ],",
													"    //                     \"additionalProperties\": true,",
													"    //                     \"properties\": {",
													"    //                         \"managementDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"loginUser\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementUsers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementUserAccess\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementHouses\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"houseVariableChange\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfBackup\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"dropController\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"statusOfDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfScript\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalDevice\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"infoGuardPanel\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalGuards\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"detailGuardEvents\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"guardEvents\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"eventsByCameras\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"statusesByCameras\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"alarmChangedState\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"technicalSupport\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         }",
													"    //                     }",
													"    //                 },",
													"    //                 \"sms\": {",
													"    //                     \"type\": \"object\",",
													"    //                     \"required\": [",
													"    //                         \"managementDevices\",",
													"    //                         \"loginUser\",",
													"    //                         \"managementUsers\",",
													"    //                         \"managementUserAccess\",",
													"    //                         \"managementHouses\",",
													"    //                         \"managementControllers\",",
													"    //                         \"houseVariableChange\",",
													"    //                         \"workOfControllers\",",
													"    //                         \"workOfBackup\",",
													"    //                         \"dropController\",",
													"    //                         \"statusOfDevices\",",
													"    //                         \"workOfDevices\",",
													"    //                         \"workOfScript\",",
													"    //                         \"criticalDevice\",",
													"    //                         \"criticalControllers\",",
													"    //                         \"infoGuardPanel\",",
													"    //                         \"criticalGuards\",",
													"    //                         \"detailGuardEvents\",",
													"    //                         \"guardEvents\",",
													"    //                         \"eventsByCameras\",",
													"    //                         \"statusesByCameras\",",
													"    //                         \"alarmChangedState\",",
													"    //                         \"technicalSupport\"",
													"    //                     ],",
													"    //                     \"additionalProperties\": true,",
													"    //                     \"properties\": {",
													"    //                         \"managementDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"loginUser\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementUsers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementUserAccess\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementHouses\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"houseVariableChange\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfBackup\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"dropController\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"statusOfDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfScript\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalDevice\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"infoGuardPanel\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalGuards\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"detailGuardEvents\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"guardEvents\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"eventsByCameras\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"statusesByCameras\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"alarmChangedState\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"technicalSupport\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         }",
													"    //                     }",
													"    //                 },",
													"    //                 \"push\": {",
													"    //                     \"type\": \"object\",",
													"    //                     \"required\": [",
													"    //                         \"managementDevices\",",
													"    //                         \"loginUser\",",
													"    //                         \"managementUsers\",",
													"    //                         \"managementUserAccess\",",
													"    //                         \"managementHouses\",",
													"    //                         \"managementControllers\",",
													"    //                         \"houseVariableChange\",",
													"    //                         \"workOfControllers\",",
													"    //                         \"workOfBackup\",",
													"    //                         \"dropController\",",
													"    //                         \"statusOfDevices\",",
													"    //                         \"workOfDevices\",",
													"    //                         \"workOfScript\",",
													"    //                         \"criticalDevice\",",
													"    //                         \"criticalControllers\",",
													"    //                         \"infoGuardPanel\",",
													"    //                         \"criticalGuards\",",
													"    //                         \"detailGuardEvents\",",
													"    //                         \"guardEvents\",",
													"    //                         \"eventsByCameras\",",
													"    //                         \"statusesByCameras\",",
													"    //                         \"alarmChangedState\",",
													"    //                         \"technicalSupport\"",
													"    //                     ],",
													"    //                     \"additionalProperties\": true,",
													"    //                     \"properties\": {",
													"    //                         \"managementDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"loginUser\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementUsers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementUserAccess\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementHouses\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"houseVariableChange\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfBackup\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"dropController\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"statusOfDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfScript\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalDevice\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"infoGuardPanel\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalGuards\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"detailGuardEvents\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"guardEvents\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"eventsByCameras\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"statusesByCameras\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"alarmChangedState\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"technicalSupport\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         }",
													"    //                     }",
													"    //                 },",
													"    //                 \"events\": {",
													"    //                     \"type\": \"object\",",
													"    //                     \"required\": [",
													"    //                         \"managementDevices\",",
													"    //                         \"loginUser\",",
													"    //                         \"managementUsers\",",
													"    //                         \"managementUserAccess\",",
													"    //                         \"managementHouses\",",
													"    //                         \"managementControllers\",",
													"    //                         \"houseVariableChange\",",
													"    //                         \"workOfControllers\",",
													"    //                         \"workOfBackup\",",
													"    //                         \"dropController\",",
													"    //                         \"statusOfDevices\",",
													"    //                         \"workOfDevices\",",
													"    //                         \"workOfScript\",",
													"    //                         \"criticalDevice\",",
													"    //                         \"criticalControllers\",",
													"    //                         \"infoGuardPanel\",",
													"    //                         \"criticalGuards\",",
													"    //                         \"detailGuardEvents\",",
													"    //                         \"guardEvents\",",
													"    //                         \"eventsByCameras\",",
													"    //                         \"statusesByCameras\",",
													"    //                         \"alarmChangedState\"",
													"    //                     ],",
													"    //                     \"additionalProperties\": true,",
													"    //                     \"properties\": {",
													"    //                         \"managementDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"loginUser\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementUsers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementUserAccess\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementHouses\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"managementControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"houseVariableChange\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfBackup\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"dropController\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"statusOfDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfDevices\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"workOfScript\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalDevice\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalControllers\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"infoGuardPanel\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"criticalGuards\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"detailGuardEvents\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"guardEvents\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"eventsByCameras\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"statusesByCameras\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         },",
													"    //                         \"alarmChangedState\": {",
													"    //                             \"type\": \"boolean\"",
													"    //                         }",
													"    //                     }",
													"    //                 }",
													"    //             }",
													"    //         },",
													"    //         \"byPush\": {",
													"    //             \"type\": \"boolean\"",
													"    //         },",
													"    //         \"bySms\": {",
													"    //             \"type\": \"boolean\"",
													"    //         },",
													"    //         \"byEmail\": {",
													"    //             \"type\": \"boolean\"",
													"    //         }",
													"    //     }",
													"    // }",
													"",
													"    // pm.test('Schema is valid', function () {",
													"    //         var JsoneData=JSON.parse(responseBody);",
													"    //         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    // });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/usersettings",
											"host": [
												"{{host}}"
											],
											"path": [
												"usersettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "(всё false) Обновление настроек пользователя (оповещения, настройки видимости пропертей девайсов). Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let data_by_default = JSON.parse(pm.environment.get(\"default\"));",
													"    for (let key in data_by_default) {        ",
													"                ",
													"        if (data_by_default[key] === true){",
													"            data_by_default[key] = false",
													"        }",
													"        if ((key === \"additionalSettings\")){",
													"            for (let key2 in data_by_default.additionalSettings) {",
													"                if (data_by_default.additionalSettings[key2] === true){",
													"                    data_by_default.additionalSettings[key2] = false",
													"                }",
													"            }",
													"        }",
													"        if ((key === \"baseSettings\")){",
													"            for (let key2 in data_by_default.baseSettings) {",
													"                for(let key3 in data_by_default.baseSettings[key2]){",
													"                    if (data_by_default.baseSettings[key2][key3] === true){",
													"                        data_by_default.baseSettings[key2][key3] = false",
													"                    }",
													"                }",
													"            }",
													"        }",
													"",
													"    }",
													"    console.log(data_by_default)",
													"    ",
													"    pm.test(\"Проверка всех полей\",  () => {",
													"    function deepEqual (obj1, obj2){",
													"    return JSON.stringify(obj1)=== JSON.stringify(obj2);",
													"    }",
													"    pm.expect(deepEqual(pm.response.json(), data_by_default)).to.eql(true)",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"additionalSettings\": {\n        \"byHouseVariable\": false,\n        \"valuesHouseVariable\": [\n            \"atHome\",\n            \"notAtHome\",\n            \"onHoliday\"\n        ],\n        \"mutedEmergencyPushCategories\": null,\n        \"byTime\": false,\n        \"startTime\": null,\n        \"endTime\": null,\n        \"timeZone\": null\n    },\n    \"baseSettings\": {\n        \"email\": {\n            \"managementDevices\": false,\n            \"loginUser\": false,\n            \"managementUsers\": false,\n            \"managementUserAccess\": false,\n            \"managementHouses\": false,\n            \"managementControllers\": false,\n            \"houseVariableChange\": false,\n            \"workOfControllers\": false,\n            \"workOfBackup\": false,\n            \"dropController\": false,\n            \"statusOfDevices\": false,\n            \"workOfDevices\": false,\n            \"workOfScript\": false,\n            \"criticalDevice\": false,\n            \"criticalControllers\": false,\n            \"infoGuardPanel\": false,\n            \"criticalGuards\": false,\n            \"detailGuardEvents\": false,\n            \"guardEvents\": false,\n            \"eventsByCameras\": false,\n            \"statusesByCameras\": false,\n            \"alarmChangedState\": false,\n            \"noLimitation\": false\n        },\n        \"sms\": {\n            \"managementDevices\": false,\n            \"loginUser\": false,\n            \"managementUsers\": false,\n            \"managementUserAccess\": false,\n            \"managementHouses\": false,\n            \"managementControllers\": false,\n            \"houseVariableChange\": false,\n            \"workOfControllers\": false,\n            \"workOfBackup\": false,\n            \"dropController\": false,\n            \"statusOfDevices\": false,\n            \"workOfDevices\": false,\n            \"workOfScript\": false,\n            \"criticalDevice\": false,\n            \"criticalControllers\": false,\n            \"infoGuardPanel\": false,\n            \"criticalGuards\": false,\n            \"detailGuardEvents\": false,\n            \"guardEvents\": false,\n            \"eventsByCameras\": false,\n            \"statusesByCameras\": false,\n            \"alarmChangedState\": false,\n            \"noLimitation\": false\n        },\n        \"push\": {\n            \"managementDevices\": false,\n            \"loginUser\": false,\n            \"managementUsers\": false,\n            \"managementUserAccess\": false,\n            \"managementHouses\": false,\n            \"managementControllers\": false,\n            \"houseVariableChange\": false,\n            \"workOfControllers\": false,\n            \"workOfBackup\": false,\n            \"dropController\": false,\n            \"statusOfDevices\": false,\n            \"workOfDevices\": false,\n            \"workOfScript\": false,\n            \"criticalDevice\": false,\n            \"criticalControllers\": false,\n            \"infoGuardPanel\": false,\n            \"criticalGuards\": false,\n            \"detailGuardEvents\": false,\n            \"guardEvents\": false,\n            \"eventsByCameras\": false,\n            \"statusesByCameras\": false,\n            \"alarmChangedState\": false,\n            \"noLimitation\": false\n        },\n        \"events\": {\n            \"managementDevices\": false,\n            \"loginUser\": false,\n            \"managementUsers\": false,\n            \"managementUserAccess\": false,\n            \"managementHouses\": false,\n            \"managementControllers\": false,\n            \"houseVariableChange\": false,\n            \"workOfControllers\": false,\n            \"workOfBackup\": false,\n            \"dropController\": false,\n            \"statusOfDevices\": false,\n            \"workOfDevices\": false,\n            \"workOfScript\": false,\n            \"criticalDevice\": false,\n            \"criticalControllers\": false,\n            \"infoGuardPanel\": false,\n            \"criticalGuards\": false,\n            \"detailGuardEvents\": false,\n            \"guardEvents\": false,\n            \"eventsByCameras\": false,\n            \"statusesByCameras\": false,\n            \"alarmChangedState\": false,\n            \"noLimitation\": false\n        }\n    },\n    \"byPush\": false,\n    \"bySms\": false,\n    \"byEmail\": false,\n    \"hiddenProperties\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/usersettings",
											"host": [
												"{{host}}"
											],
											"path": [
												"usersettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "(всё true)  Обновление полей настроек пользователя (оповещения, настройки видимости пропертей девайсов). Не обновляемые поля должны быть null.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let data_by_default = JSON.parse(pm.environment.get(\"default\"));",
													"    for (let key in data_by_default) {",
													"",
													"        if (data_by_default[key] === false) {",
													"            data_by_default[key] = true",
													"        }",
													"        if ((key === \"additionalSettings\")) {",
													"            for (let key2 in data_by_default.additionalSettings) {",
													"                if (data_by_default.additionalSettings[key2] === false) {",
													"                    data_by_default.additionalSettings[key2] = true",
													"                }",
													"            }",
													"        }",
													"        if ((key === \"baseSettings\")) {",
													"            for (let key2 in data_by_default.baseSettings) {",
													"                for (let key3 in data_by_default.baseSettings[key2]) {",
													"                    if (data_by_default.baseSettings[key2][key3] === false) {",
													"                        data_by_default.baseSettings[key2][key3] = true",
													"                    }",
													"                }",
													"            }",
													"        }",
													"",
													"    }",
													"    console.log(data_by_default)",
													"",
													"    pm.test(\"Проверка всех полей\", () => {",
													"        function deepEqual(obj1, obj2) {",
													"            return JSON.stringify(obj1) === JSON.stringify(obj2);",
													"        }",
													"        pm.expect(deepEqual(pm.response.json(), data_by_default)).to.eql(true)",
													"    });",
													"",
													"}",
													"catch (e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"additionalSettings\": {\n        \"byHouseVariable\": true,\n        \"valuesHouseVariable\": [\n            \"atHome\",\n            \"notAtHome\",\n            \"onHoliday\"\n        ],\n        \"mutedEmergencyPushCategories\": null,\n        \"byTime\": true,\n        \"startTime\": null,\n        \"endTime\": null,\n        \"timeZone\": null\n    },\n    \"baseSettings\": {\n        \"email\": {\n            \"managementDevices\": true,\n            \"loginUser\": true,\n            \"managementUsers\": true,\n            \"managementUserAccess\": true,\n            \"managementHouses\": true,\n            \"managementControllers\": true,\n            \"houseVariableChange\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"workOfDevices\": true,\n            \"workOfScript\": true,\n            \"criticalDevice\": true,\n            \"criticalControllers\": true,\n            \"infoGuardPanel\": true,\n            \"criticalGuards\": true,\n            \"detailGuardEvents\": true,\n            \"guardEvents\": true,\n            \"eventsByCameras\": true,\n            \"statusesByCameras\": true,\n            \"alarmChangedState\": true,\n            \"noLimitation\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"sms\": {\n            \"managementDevices\": true,\n            \"loginUser\": true,\n            \"managementUsers\": true,\n            \"managementUserAccess\": true,\n            \"managementHouses\": true,\n            \"managementControllers\": true,\n            \"houseVariableChange\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"workOfDevices\": true,\n            \"workOfScript\": true,\n            \"criticalDevice\": true,\n            \"criticalControllers\": true,\n            \"infoGuardPanel\": true,\n            \"criticalGuards\": true,\n            \"detailGuardEvents\": true,\n            \"guardEvents\": true,\n            \"eventsByCameras\": true,\n            \"statusesByCameras\": true,\n            \"alarmChangedState\": true,\n            \"noLimitation\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"push\": {\n            \"managementDevices\": true,\n            \"loginUser\": true,\n            \"managementUsers\": true,\n            \"managementUserAccess\": true,\n            \"managementHouses\": true,\n            \"managementControllers\": true,\n            \"houseVariableChange\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"workOfDevices\": true,\n            \"workOfScript\": true,\n            \"criticalDevice\": true,\n            \"criticalControllers\": true,\n            \"infoGuardPanel\": true,\n            \"criticalGuards\": true,\n            \"detailGuardEvents\": true,\n            \"guardEvents\": true,\n            \"eventsByCameras\": true,\n            \"statusesByCameras\": true,\n            \"alarmChangedState\": true,\n            \"noLimitation\": true,\n            \"technicalSupport\": true,\n            \"subscription\": true\n        },\n        \"events\": {\n            \"managementDevices\": true,\n            \"loginUser\": true,\n            \"managementUsers\": true,\n            \"managementUserAccess\": true,\n            \"managementHouses\": true,\n            \"managementControllers\": true,\n            \"houseVariableChange\": true,\n            \"workOfControllers\": true,\n            \"workOfBackup\": true,\n            \"dropController\": true,\n            \"statusOfDevices\": true,\n            \"workOfDevices\": true,\n            \"workOfScript\": true,\n            \"criticalDevice\": true,\n            \"criticalControllers\": true,\n            \"infoGuardPanel\": true,\n            \"criticalGuards\": true,\n            \"detailGuardEvents\": true,\n            \"guardEvents\": true,\n            \"eventsByCameras\": true,\n            \"statusesByCameras\": true,\n            \"alarmChangedState\": true,\n            \"noLimitation\": true,\n            \"subscription\": true\n        }\n    },\n    \"byPush\": true,\n    \"bySms\": true,\n    \"byEmail\": true,\n    \"hiddenProperties\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/usersettings",
											"host": [
												"{{host}}"
											],
											"path": [
												"usersettings"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Проверка смены пароля",
					"item": [
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Сменить пароль",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id}}\",\n    \"password\": \"123Aa123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Выйти",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 204\", function () {",
											"        pm.response.to.have.status(204);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{ACCESS_TOKEN}}\",\n    \"token_type_hint\": \"access_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/oauth2/token/revoke",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token",
										"revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "Вход с новым паролем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123Aa123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Сменить пароль",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id}}\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка завершения всех сеансов",
					"item": [
						{
							"name": "/oauth2/token (user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"var jsonData = JSON.parse(responseBody);",
											"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
											"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
											"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var scheme = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"access_token\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"expires_in\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"});",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "123",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Завершить все сеансы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/oauth2/token/revoke/all?clientIds=",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token",
										"revoke",
										"all"
									],
									"query": [
										{
											"key": "clientIds",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка завершения всех сеансов кроме текущего",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка завепшения всех сеансов кроме текущего\",() => {",
											"        pm.expect(pm.response.json().data.length).to.eql(1);",
											"        pm.expect(pm.response.json().total).to.eql(1);",
											"    });",
											"",
											"    var scheme = {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"type\",",
											"            \"total\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"total\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"authorizationId\",",
											"                        \"loginTime\",",
											"                        \"lastActivityTime\",",
											"                        \"logoutTime\",",
											"                        \"clientId\",",
											"                        \"clientType\",",
											"                        \"remoteAddress\",",
											"                        \"loggedIn\",",
											"                        \"current\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"authorizationId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"loginTime\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"lastActivityTime\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"logoutTime\": {",
											"                            \"type\": \"null\"",
											"                        },",
											"                        \"clientId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"clientType\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"remoteAddress\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"loggedIn\": {",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"current\": {",
											"                            \"type\": \"boolean\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    };",
											"    pm.test('JSON is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/login/info/current/user?clientIds=web-client,android-client,ios-client,android-counters,ios-counters,api-client&loggedIn=true&limit=50&offset=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"login",
										"info",
										"current",
										"user"
									],
									"query": [
										{
											"key": "clientIds",
											"value": "web-client,android-client,ios-client,android-counters,ios-counters,api-client"
										},
										{
											"key": "loggedIn",
											"value": "true"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Планы помещений",
					"item": [
						{
							"name": "Подготовить и добавить контроллер",
							"item": [
								{
									"name": "Подготовка контроллера",
									"item": [
										{
											"name": "/oauth2/token (user)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"var jsonData = JSON.parse(responseBody);",
															"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
															"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
															"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body contains access token\",() => {",
															"  pm.expect(pm.response.text()).to.include(\"access_token\");",
															"});",
															"",
															"var scheme = {",
															"    \"type\": \"object\",",
															"    \"required\": [",
															"        \"access_token\",",
															"        \"refresh_token\",",
															"        \"token_type\",",
															"        \"expires_in\"",
															"    ],",
															"    \"additionalProperties\": true,",
															"    \"properties\": {",
															"        \"access_token\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"refresh_token\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"token_type\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"expires_in\": {",
															"            \"type\": \"integer\"",
															"        }",
															"    }",
															"};",
															"pm.test('JSON is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
															"});",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "123",
															"type": "text"
														},
														{
															"key": "password",
															"value": "123",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/oauth2/token",
													"host": [
														"{{host}}"
													],
													"path": [
														"oauth2",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "Параметры контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Настройки применены\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
															"    if(pm.response.code == 400) {",
															"        pm.expect(pm.response.text()).to.include(\"connected\");",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/info",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение типа платформы",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"let isSL10 = pm.response.json().version.includes(\"-b\");",
															"",
															"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
															"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
															"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/version",
													"host": [
														"{{host}}"
													],
													"path": [
														"version"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение информации о платформе",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var sdk = require('postman-collection');",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
															"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/info",
													"host": [
														"{{host}}"
													],
													"path": [
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание датчика протечки",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Датчик присутствует\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
															"    if(pm.response.code == 400) {",
															"        pm.expect(pm.response.text()).to.include(\"already exists\");",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"template\": \"sz_wlk\",\n    \"nodeId\": 9\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/devices/add",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"devices",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});",
															"// Чтобы платформа успела принять подключение контроллера",
															"setTimeout(function(){}, [200]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Добавить контроллер",
									"item": [
										{
											"name": "Подключение к WebSocket (абонент 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, [5000]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"connect"
													],
													"query": [
														{
															"key": "host",
															"value": "{{host_ws}}/event_ws"
														},
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}"
														},
														{
															"key": "subprotocol",
															"value": "SmartHome"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление контроллера.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
															"setTimeout(function(){}, [2500]); ",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"postman.setEnvironmentVariable (\"current_time\", Date.now());",
															"console.log(Date.now())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание события добавления устройства",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&timeout=180000&C_newStatus=ONLINE",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_controllerId",
															"value": "{{ctl_id}}"
														},
														{
															"key": "C_type",
															"value": "DEVICE_STATUS_CHANGE"
														},
														{
															"key": "C_deviceInfo.nodeId",
															"value": "ZWAVE_ELTEX_7",
															"disabled": true
														},
														{
															"key": "timeout",
															"value": "180000"
														},
														{
															"key": "C_newStatus",
															"value": "ONLINE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отключение от WebSocket",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/disconnect",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"disconnect"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Тесты",
							"item": [
								{
									"name": "Создает группу с уникальным id, указанным наименованием и группой родителем. (Создаем LOCATION_LIST)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });    ",
													"    postman.setEnvironmentVariable (\"item_id\", responseBody); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [2500]); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"parentId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование группы: переименование, замена (удаление) id группы родителя.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parentId\": \"\",\n  \"title\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Возвращает список групп дома.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"$id\": \"#/items\",",
													"            \"anyOf\": [",
													"                {",
													"                    \"$id\": \"#/items/anyOf/0\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"id\",",
													"                        \"houseId\",",
													"                        \"title\",",
													"                        \"parentId\",",
													"                        \"plan\",",
													"                        \"childList\",",
													"                        \"deviceList\",",
													"                        \"cameraList\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"id\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/id\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"houseId\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/houseId\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/title\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"parentId\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/parentId\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"plan\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/plan\",",
													"                            \"type\": \"null\"",
													"                        },",
													"                        \"childList\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/childList\",",
													"                            \"type\": \"array\",",
													"                            \"additionalItems\": true,",
													"                            \"items\": {",
													"                                \"$id\": \"#/items/anyOf/0/properties/childList/items\"",
													"                            }",
													"                        },",
													"                        \"deviceList\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/deviceList\",",
													"                            \"type\": \"array\",",
													"                            \"additionalItems\": true,",
													"                            \"items\": {",
													"                                \"$id\": \"#/items/anyOf/0/properties/deviceList/items\"",
													"                            }",
													"                        },",
													"                        \"cameraList\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/cameraList\",",
													"                            \"type\": \"array\",",
													"                            \"additionalItems\": true,",
													"                            \"items\": {",
													"                                \"$id\": \"#/items/anyOf/0/properties/cameraList/items\"",
													"                            }",
													"                        }",
													"                    },",
													"                    \"additionalProperties\": true",
													"                }",
													"            ]",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"    pm.test(\"The data is correct\",  () => {",
													"        pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"item_id\"));",
													"        pm.expect(pm.response.json()[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json()[0].title).to.equal(\"123\");",
													"        pm.expect(pm.response.json()[0].plan).to.equal(null);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверяет и исправляет связи (родитель-потомок) между группами в пределах одного дома.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/check",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"check"
											]
										}
									},
									"response": []
								},
								{
									"name": "создать пользователя (user2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id_user\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"Проверка наличия поля id и тип этого поля\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"stringgggggggggggggggggggggg@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"2\",\n    \"password\": \"2\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "(дает доступ)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"{{houseId}}\": \"WATCHER\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/{{id_user}}/access",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id_user}}",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "Установить доступ к группе. (Даем доступ в группу (нет доступа))",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessLevel\": \"NO_ACCESS\",\n    \"userId\": \"{{id_user}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/access",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "проверка (NO_ACCESS?)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"array\",",
													"    \"additionalItems\": true,",
													"    \"items\": {",
													"        \"$id\": \"#/items\",",
													"        \"anyOf\": [",
													"            {",
													"                \"$id\": \"#/items/anyOf/0\",",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"userId\",",
													"                    \"level\",",
													"                    \"surname\",",
													"                    \"name\",",
													"                    \"patronymic\",",
													"                    \"username\",",
													"                    \"role\",",
													"                    \"groups\"",
													"                ],",
													"                \"properties\": {",
													"                    \"userId\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/userId\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"level\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/level\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"surname\": {",
													"",
													"                    },",
													"                    \"name\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/name\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"patronymic\": {",
													"",
													"                    },",
													"                    \"username\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/username\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"role\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/role\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"groups\": {",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        ]",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка наличия и типа поля userId,  также проверка полей userId, groups у пользователя 2\",  () => {",
													"",
													"    var i = 0;",
													"    while(i < pm.response.json().length ){",
													"        pm.expect(pm.response.json()[i]).to.have.property('userId');",
													"        pm.expect(pm.response.json()[i].userId).to.string;",
													"",
													"        if (pm.response.json()[i].name == \"2\" ){",
													"            pm.expect(pm.response.json()[i].userId).to.equal(pm.environment.get(\"id_user\"));",
													"            pm.expect(pm.response.json()[i].groups).to.have.property(pm.environment.get(\"item_id\"));",
													"            pm.expect(pm.response.json()[i].groups[pm.environment.get(\"item_id\")]).to.equal(\"NO_ACCESS\");",
													"        }",
													"        i++;",
													"    }   ",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/access",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "Установить доступ к группе. (Даем доступ в группу (редактор))",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessLevel\": \"EDITOR\",\n    \"userId\": \"{{id_user}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/access",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "проверка (EDITOR?)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"array\",",
													"    \"additionalItems\": true,",
													"    \"items\": {",
													"        \"$id\": \"#/items\",",
													"        \"anyOf\": [",
													"            {",
													"                \"$id\": \"#/items/anyOf/0\",",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"userId\",",
													"                    \"level\",",
													"                    \"surname\",",
													"                    \"name\",",
													"                    \"patronymic\",",
													"                    \"username\",",
													"                    \"role\",",
													"                    \"groups\"",
													"                ],",
													"                \"properties\": {",
													"                    \"userId\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/userId\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"level\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/level\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"surname\": {",
													"",
													"                    },",
													"                    \"name\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/name\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"patronymic\": {",
													"",
													"                    },",
													"                    \"username\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/username\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"role\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/role\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"groups\": {",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        ]",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка наличия и типа поля userId,  также проверка полей userId, groups у пользователя 2\",  () => {",
													"",
													"    var i = 0;",
													"    while(i < pm.response.json().length ){",
													"        pm.expect(pm.response.json()[i]).to.have.property('userId');",
													"        pm.expect(pm.response.json()[i].userId).to.string;",
													"",
													"        if (pm.response.json()[i].name == \"2\" ){",
													"            pm.expect(pm.response.json()[i].userId).to.equal(pm.environment.get(\"id_user\"));",
													"            pm.expect(pm.response.json()[i].groups).to.have.property(pm.environment.get(\"item_id\"));",
													"            pm.expect(pm.response.json()[i].groups[pm.environment.get(\"item_id\")]).to.equal(\"EDITOR\");",
													"        }",
													"        i++;",
													"    }   ",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/access",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаляем  доступ в группу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessLevel\": \"EDITOR\",\n    \"userId\": \"{{id_user}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/access/{{id_user}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"access",
												"{{id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "проверка",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"array\",",
													"    \"additionalItems\": true,",
													"    \"items\": {",
													"        \"$id\": \"#/items\",",
													"        \"anyOf\": [",
													"            {",
													"                \"$id\": \"#/items/anyOf/0\",",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"userId\",",
													"                    \"level\",",
													"                    \"surname\",",
													"                    \"name\",",
													"                    \"patronymic\",",
													"                    \"username\",",
													"                    \"role\",",
													"                    \"groups\"",
													"                ],",
													"                \"properties\": {",
													"                    \"userId\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/userId\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"level\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/level\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"surname\": {",
													"",
													"                    },",
													"                    \"name\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/name\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"patronymic\": {",
													"",
													"                    },",
													"                    \"username\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/username\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"role\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/role\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"groups\": {",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        ]",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка наличия и типа поля userId,  также проверка полей userId, groups у пользователя 2\",  () => {",
													"",
													"    var i = 0;",
													"    while(i < pm.response.json().length ){",
													"        pm.expect(pm.response.json()[i]).to.have.property('userId');",
													"        pm.expect(pm.response.json()[i].userId).to.string;",
													"",
													"        if (pm.response.json()[i].name == \"2\" ){",
													"            pm.expect(pm.response.json()[i].userId).to.equal(pm.environment.get(\"id_user\"));",
													"            pm.expect(pm.response.json()[i].groups).to.not.have.property(pm.environment.get(\"item_id\"));",
													"            pm.expect(pm.response.json()[i].groups.noSuchProperty === undefined).to.be.true;       ",
													"        }",
													"        i++;",
													"    }   ",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/access",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the user user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id_user}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавляем схему",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"setTimeout(function(){}, [50]);",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"imageId\", jsonData.imageId);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"Проверка наличия и типа поля imageId\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('imageId');",
													"    pm.expect(pm.response.json().imageId).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"contentType": "image/png",
													"description": "form-data; name=\"image\"; filename=\"1.png\"",
													"type": "file",
													"src": "q.png"
												}
											]
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"images"
											]
										}
									},
									"response": []
								},
								{
									"name": "Возвращает группу дома по id.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"houseId\",",
													"        \"title\",",
													"        \"parentId\",",
													"        \"plan\",",
													"        \"childList\",",
													"        \"deviceList\",",
													"        \"cameraList\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"$id\": \"#/properties/id\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"houseId\": {",
													"            \"$id\": \"#/properties/houseId\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"title\": {",
													"            \"$id\": \"#/properties/title\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"parentId\": {",
													"            \"$id\": \"#/properties/parentId\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"plan\": {",
													"            \"$id\": \"#/properties/plan\",",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"imageId\",",
													"                \"zones\",",
													"                \"points\"",
													"            ],",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"$id\": \"#/properties/plan/properties/id\",",
													"                    \"type\": \"string\"",
													"                },",
													"                \"imageId\": {",
													"                    \"$id\": \"#/properties/plan/properties/imageId\",",
													"                    \"type\": \"string\"",
													"                },",
													"                \"zones\": {",
													"                    \"$id\": \"#/properties/plan/properties/zones\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [],",
													"                    \"additionalProperties\": true",
													"                },",
													"                \"points\": {",
													"                    \"$id\": \"#/properties/plan/properties/points\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [],",
													"                    \"additionalProperties\": true",
													"                }",
													"            },",
													"            \"additionalProperties\": true",
													"        },",
													"        \"childList\": {",
													"            \"$id\": \"#/properties/childList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/childList/items\"",
													"            }",
													"        },",
													"        \"deviceList\": {",
													"            \"$id\": \"#/properties/deviceList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/deviceList/items\"",
													"            }",
													"        },",
													"        \"cameraList\": {",
													"            \"$id\": \"#/properties/cameraList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/cameraList/items\"",
													"            }",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка полей id, houseId, title и количества элементов в обьекте plan\",  () => {",
													"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"item_id\"));",
													"    pm.expect(pm.response.json().houseId).to.equal(pm.environment.get(\"houseId\"));",
													"    pm.expect(pm.response.json().title).to.equal(\"123\");",
													"    pm.expect(Object.keys(pm.response.json().plan).length === 4).to.be.true; //проверка на пустоту обьекта",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Возвращает ссылку на картинку группы.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"Проверка поля imageId\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('imageId');",
													"    pm.expect(pm.response.json().imageId).to.string;",
													"    pm.expect(pm.response.json().imageId).to.equal(pm.environment.get(\"imageId\"));",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"images"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка девайсов контроллера.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"nodeId\", jsonData[0].nodeId); ",
													"    postman.setEnvironmentVariable (\"deviceId\", jsonData[0].id );",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [2500]); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{ctl_id}}/devices",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{ctl_id}}",
												"devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на обновление локации у группы устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"cameraIds\": [\n  ],\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ],\n  \"locationId\": \"{{item_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Помещает устройство на план.(Добавляем устройство на план)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"   var schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"deviceId\",",
													"        \"color\",",
													"        \"position\"",
													"    ],",
													"    \"properties\": {",
													"        \"deviceId\": {",
													"            \"$id\": \"#/properties/deviceId\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"color\": {",
													"            \"$id\": \"#/properties/color\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"position\": {",
													"            \"$id\": \"#/properties/position\",",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"x\",",
													"                \"y\"",
													"            ],",
													"            \"properties\": {",
													"                \"x\": {",
													"                    \"$id\": \"#/properties/position/properties/x\",",
													"                    \"type\": \"number\"",
													"                },",
													"                \"y\": {",
													"                    \"$id\": \"#/properties/position/properties/y\",",
													"                    \"type\": \"number\"",
													"                }",
													"            },",
													"            \"additionalProperties\": true",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"};",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"    pm.test(\"Проверка полей deviceId, color и объекта position\",  () => {",
													"        pm.expect(pm.response.json().deviceId).to.equal(pm.environment.get(\"deviceId\"));",
													"        pm.expect(pm.response.json().color).to.equal(\"rgb(255, 171, 0)\");",
													"        pm.expect(pm.response.json().position[\"x\"]).to.equal(10.0);",
													"        pm.expect(pm.response.json().position[\"y\"]).to.equal(10.0);",
													"    });",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"deviceId\": \"{{deviceId}}\",\n    \"position\": {\n        \"x\": 10,\n        \"y\": 10\n    },\n    \"color\": \"rgb(255, 171, 0)\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/point/{{deviceId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"point",
												"{{deviceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "проверка добавления",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"houseId\",",
													"        \"title\",",
													"        \"parentId\",",
													"        \"plan\",",
													"        \"childList\",",
													"        \"deviceList\",",
													"        \"cameraList\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"$id\": \"#/properties/id\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"houseId\": {",
													"            \"$id\": \"#/properties/houseId\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"title\": {",
													"            \"$id\": \"#/properties/title\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"parentId\": {",
													"            \"$id\": \"#/properties/parentId\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"plan\": {",
													"            \"$id\": \"#/properties/plan\",",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"imageId\",",
													"                \"zones\",",
													"                \"points\"",
													"            ],",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"$id\": \"#/properties/plan/properties/id\",",
													"                    \"type\": \"string\"",
													"                },",
													"                \"imageId\": {",
													"                    \"$id\": \"#/properties/plan/properties/imageId\",",
													"                    \"type\": \"string\"",
													"                },",
													"                \"zones\": {",
													"                    \"$id\": \"#/properties/plan/properties/zones\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [],",
													"                    \"additionalProperties\": true",
													"                },",
													"                \"points\": {}",
													"            },",
													"            \"additionalProperties\": true",
													"        },",
													"        \"childList\": {",
													"            \"$id\": \"#/properties/childList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/childList/items\"",
													"            }",
													"        },",
													"        \"deviceList\": {",
													"            \"$id\": \"#/properties/deviceList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/deviceList/items\",",
													"                \"anyOf\": [",
													"                    {",
													"                        \"$id\": \"#/properties/deviceList/items/anyOf/0\",",
													"                        \"type\": \"string\"",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"cameraList\": {",
													"            \"$id\": \"#/properties/cameraList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/cameraList/items\"",
													"            }",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка полей imageId и объекта points\",  () => {",
													"    pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
													"    pm.expect(pm.response.json().plan.points).to.have.property(pm.environment.get(\"deviceId\"));",
													"    pm.expect(pm.response.json().plan.points[pm.environment.get(\"deviceId\")].deviceId).to.equal(pm.environment.get(\"deviceId\"));",
													"    pm.expect(pm.response.json().plan.points[pm.environment.get(\"deviceId\")].color).to.equal(\"rgb(255, 171, 0)\");",
													"    pm.expect(pm.response.json().plan.points[pm.environment.get(\"deviceId\")].position[\"x\"]).to.equal(10.0);",
													"    pm.expect(pm.response.json().plan.points[pm.environment.get(\"deviceId\")].position[\"y\"]).to.equal(10.0);",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновляет координаты точки.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"deviceId\": \"{{deviceId}}\",\n    \"position\": {\n        \"x\": 88,\n        \"y\": 8\n    },\n    \"color\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/point/{{deviceId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"point",
												"{{deviceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Возвращает план группы.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"Проверка полей imageId и объекта points\",  () => {",
													"    pm.expect(pm.response.json().imageId).to.equal(pm.environment.get(\"imageId\"));",
													"",
													"    pm.expect(pm.response.json().points[pm.environment.get(\"deviceId\")].color).to.equal(\"rgb(255, 171, 0)\");",
													"    pm.expect(pm.response.json().points[pm.environment.get(\"deviceId\")].position[\"x\"]).to.equal(88.0);",
													"    pm.expect(pm.response.json().points[pm.environment.get(\"deviceId\")].position[\"y\"]).to.equal(8.0);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление устройства с плана",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/point/{{deviceId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"point",
												"{{deviceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "проверка удаления устройства со схемы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"houseId\",",
													"        \"title\",",
													"        \"parentId\",",
													"        \"plan\",",
													"        \"childList\",",
													"        \"deviceList\",",
													"        \"cameraList\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"$id\": \"#/properties/id\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"houseId\": {",
													"            \"$id\": \"#/properties/houseId\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"title\": {",
													"            \"$id\": \"#/properties/title\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"parentId\": {",
													"            \"$id\": \"#/properties/parentId\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"plan\": {",
													"            \"$id\": \"#/properties/plan\",",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"imageId\",",
													"                \"zones\",",
													"                \"points\"",
													"            ],",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"$id\": \"#/properties/plan/properties/id\",",
													"                    \"type\": \"string\"",
													"                },",
													"                \"imageId\": {",
													"                    \"$id\": \"#/properties/plan/properties/imageId\",",
													"                    \"type\": \"string\"",
													"                },",
													"                \"zones\": {",
													"                    \"$id\": \"#/properties/plan/properties/zones\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [],",
													"                    \"additionalProperties\": true",
													"                },",
													"                \"points\": {}",
													"            },",
													"            \"additionalProperties\": true",
													"        },",
													"        \"childList\": {",
													"            \"$id\": \"#/properties/childList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/childList/items\"",
													"            }",
													"        },",
													"        \"deviceList\": {",
													"            \"$id\": \"#/properties/deviceList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/deviceList/items\",",
													"                \"anyOf\": [",
													"                    {",
													"                        \"$id\": \"#/properties/deviceList/items/anyOf/0\",",
													"                        \"type\": \"string\"",
													"                    }",
													"                ]",
													"            }",
													"        },",
													"        \"cameraList\": {",
													"            \"$id\": \"#/properties/cameraList\",",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {",
													"                \"$id\": \"#/properties/cameraList/items\"",
													"            }",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка полей imageId и объекта points\",  () => {",
													"    pm.expect(pm.response.json().plan).to.have.property(\"points\");",
													"    pm.expect(pm.response.json().plan).to.have.property(\"imageId\");",
													"    pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
													"    pm.expect(pm.response.json().plan.points.noSuchProperty === undefined).to.be.true;",
													"    ",
													"",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "заменяет картинку группы.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"setTimeout(function(){}, [50]);",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"imageId\", jsonData.imageId);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"Проверка наличия и типа поля imageId\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('imageId');",
													"    pm.expect(pm.response.json().imageId).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"contentType": "image/jpeg",
													"description": "form-data; name=\"image\"; filename=\"1.jpg\"",
													"type": "file",
													"src": "jpg.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"images"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создаем дочернюю группу",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });    ",
													"    postman.setEnvironmentVariable (\"child_group\", responseBody); ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"child group\",\n    \"parentId\": \"{{item_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Помещает группу на план.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"groupId\",",
													"        \"color\",",
													"        \"upperLeft\",",
													"        \"lowerRight\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"groupId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"color\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"upperLeft\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"x\",",
													"                \"y\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"x\": {",
													"                    \"type\": \"number\"",
													"                },",
													"                \"y\": {",
													"                    \"type\": \"number\"",
													"                }",
													"            }",
													"        },",
													"        \"lowerRight\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"x\",",
													"                \"y\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"x\": {",
													"                    \"type\": \"number\"",
													"                },",
													"                \"y\": {",
													"                    \"type\": \"number\"",
													"                }",
													"            }",
													"        }",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"    pm.test(\"Проверка полей groupId, color, а также объектов upperLeft и lowerRight\",  () => {",
													"        pm.expect(pm.response.json().groupId).to.equal(pm.environment.get(\"child_group\"));",
													"        pm.expect(pm.response.json().color).to.equal(\"rgb(255, 171, 110)\");",
													"        pm.expect(pm.response.json().upperLeft[\"x\"]).to.equal(100.0);",
													"        pm.expect(pm.response.json().upperLeft[\"y\"]).to.equal(100.0);",
													"        pm.expect(pm.response.json().lowerRight[\"x\"]).to.equal(100.0);",
													"        pm.expect(pm.response.json().lowerRight[\"y\"]).to.equal(100.0);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"color\": \"rgb(255, 171, 110)\",\n    \"upperLeft\": {\n        \"x\": 100,\n        \"y\": 100\n    },\n    \"lowerRight\": {\n        \"x\": 100,\n        \"y\": 100\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/zone/{{child_group}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"zone",
												"{{child_group}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "проверка добавления группы (на схему и как дочерней группы) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка объекта plan (поля imageId, points, объект zones (все его поля)) \",  () => {",
													"        pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
													"        pm.expect(pm.response.json().plan.points.noSuchProperty === undefined).to.be.true;",
													"        pm.expect(pm.response.json().plan.zones).to.have.property(pm.environment.get(\"child_group\"));",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].groupId).to.equal(pm.environment.get(\"child_group\"));",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].color).to.equal(\"rgb(255, 171, 110)\");",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].upperLeft.x).to.equal(100.0);",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].upperLeft.y).to.equal(100.0);",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].lowerRight.x).to.equal(100.0);",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].lowerRight.y).to.equal(100.0);",
													"    });",
													"",
													"    pm.test(\"Проверка объекта childList (его длина и поля id, houseId, title, parentId), а также  проверка массива deviceList\",  () => {",
													"        pm.expect(pm.response.json().childList.length).to.equal(1);",
													"        pm.expect(pm.response.json().childList[0].id).to.equal(pm.environment.get(\"child_group\"));",
													"        pm.expect(pm.response.json().childList[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().childList[0].title).to.equal(\"child group\");",
													"        pm.expect(pm.response.json().childList[0].parentId).to.equal(pm.environment.get(\"item_id\"));",
													"        pm.expect(pm.response.json().deviceList[0]).to.equal(pm.environment.get(\"deviceId\"));",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновляет координаты зоны (и цвет)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"color\": \"rgb(11, 22, 33)\",\n  \"upperLeft\": {\n    \"x\": 77,\n    \"y\": 66\n  },\n  \"lowerRight\": {\n    \"x\": 55,\n    \"y\": 44\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/zone/{{child_group}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"zone",
												"{{child_group}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Координаты изменились ?",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка объекта plan (поля imageId, points, объект zones (все его поля)) \",  () => {",
													"        pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
													"        pm.expect(pm.response.json().plan.points.noSuchProperty === undefined).to.be.true;",
													"        pm.expect(pm.response.json().plan.zones).to.have.property(pm.environment.get(\"child_group\"));",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].groupId).to.equal(pm.environment.get(\"child_group\"));",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].color).to.equal(\"rgb(11, 22, 33)\");",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].upperLeft.x).to.equal(77.0);",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].upperLeft.y).to.equal(66.0);",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].lowerRight.x).to.equal(55.0);",
													"        pm.expect(pm.response.json().plan.zones[pm.environment.get(\"child_group\")].lowerRight.y).to.equal(44.0);",
													"    });",
													"",
													"    pm.test(\"Проверка объекта childList (его длина и поля id, houseId, title, parentId), а также  проверка массива deviceList\",  () => {",
													"        pm.expect(pm.response.json().childList.length).to.equal(1);",
													"        pm.expect(pm.response.json().childList[0].id).to.equal(pm.environment.get(\"child_group\"));",
													"        pm.expect(pm.response.json().childList[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().childList[0].title).to.equal(\"child group\");",
													"        pm.expect(pm.response.json().childList[0].parentId).to.equal(pm.environment.get(\"item_id\"));",
													"        pm.expect(pm.response.json().deviceList[0]).to.equal(pm.environment.get(\"deviceId\"));",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаляет группу (зону) с плана.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/zone/{{child_group}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"zone",
												"{{child_group}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "группа (зона) удалена с плана ?",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка объекта plan (поля imageId, объект points, объект zones\",  () => {",
													"        pm.expect(pm.response.json().plan.imageId).to.equal(pm.environment.get(\"imageId\"));",
													"        pm.expect(pm.response.json().plan.points.noSuchProperty === undefined).to.be.true;",
													"        pm.expect(pm.response.json().plan.zones.noSuchProperty === undefined).to.be.true;",
													"",
													"    });",
													"",
													"    pm.test(\"Проверка объекта childList (его длина и поля id, houseId, title, parentId), а также  проверка массива deviceList\",  () => {",
													"        pm.expect(pm.response.json().childList.length).to.equal(1);",
													"        pm.expect(pm.response.json().childList[0].id).to.equal(pm.environment.get(\"child_group\"));",
													"        pm.expect(pm.response.json().childList[0].houseId).to.equal(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().childList[0].title).to.equal(\"child group\");",
													"        pm.expect(pm.response.json().childList[0].parentId).to.equal(pm.environment.get(\"item_id\"));",
													"        pm.expect(pm.response.json().deviceList[0]).to.equal(pm.environment.get(\"deviceId\"));",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Возвращает ссылки на картинки всех групп дома.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"    pm.test(\"Проверка ответа (должен быть imageId)\",  () => {",
													"        pm.expect(pm.response.json()[0]).to.equal(pm.environment.get(\"imageId\"));",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"string\"",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images/all",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"images",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаляем схему",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"images"
											]
										}
									},
									"response": []
								},
								{
									"name": "проверка удаления схемы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"pm.test(\"Проверка поля imageId\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property(\"imageId\");",
													"    pm.expect(pm.response.json().imageId).to.equal(null);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}/plan/images",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}",
												"plan",
												"images"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление группы.  (LOCATION_LIST)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups",
												"{{item_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "проверка удаления LOCATION_LIST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"",
													"pm.test(\"Проверка отсутсвия id группы в houseGroups \",  () => {",
													"    var i = 0;",
													"    while(i < pm.response.json().houseGroups.length){",
													"        pm.expect(pm.response.json().houseGroups[i].id == pm.environment.get(\"item_id\") ).to.be.false;        ",
													"        i++;",
													"    }    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Отключение контроллера",
							"item": [
								{
									"name": "Отключение контроллера от платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/ctl/disconnect",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"ctl",
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика протечки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{zway_ctl_host}}/devices/9",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удалить контроллер",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{ctl_id}}/remove",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{ctl_id}}",
												"remove"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Проверка функционала stories",
					"item": [
						{
							"name": "Получить токены",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Загрузка изображений",
							"item": [
								{
									"name": "Attach Preview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"file1\", responseBody); ",
													"pm.environment.set(\"file_id\", responseBody.split('/')[0]);",
													"pm.environment.set(\"file_name\", responseBody.split('/')[1]);",
													"console.log(responseBody.split('/')[0]);",
													"console.log(responseBody.split('/')[1]);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "q.png"
												}
											]
										},
										"url": {
											"raw": "{{host}}/files/upload",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Preview2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"file2\", responseBody); ",
													"pm.environment.set(\"file_id2\", responseBody.split('/')[0]);",
													"pm.environment.set(\"file_name2\", responseBody.split('/')[1]);",
													"console.log(responseBody.split('/')[0]);",
													"console.log(responseBody.split('/')[1]);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "jpg.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/files/upload",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Preview3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"file3\", responseBody); ",
													"pm.environment.set(\"file_id3\", responseBody.split('/')[0]);",
													"pm.environment.set(\"file_name3\", responseBody.split('/')[1]);",
													"console.log(responseBody.split('/')[0]);",
													"console.log(responseBody.split('/')[1]);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "q.png"
												}
											]
										},
										"url": {
											"raw": "{{host}}/files/upload",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Preview4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"postman.setEnvironmentVariable (\"file4\", responseBody); ",
													"pm.environment.set(\"file_id4\", responseBody.split('/')[0]);",
													"pm.environment.set(\"file_name4\", responseBody.split('/')[1]);",
													"console.log(responseBody.split('/')[0]);",
													"console.log(responseBody.split('/')[1]);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "q.png"
												}
											]
										},
										"url": {
											"raw": "{{host}}/files/upload",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"upload"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "сторисы advanced",
							"item": [
								{
									"name": "Администратор",
									"item": [
										{
											"name": "Создание сториса (2 кнопки)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.environment.set(\"story_id\", pm.response.json().id);",
															"    pm.environment.set(\"stories_one_page\", JSON.stringify(pm.response.json()));",
															"",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей кроме id\", function () {",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"advanced\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\":\"Это сторис и у него 2 кнопки\",\n    \"preview\":\"{{host}}/files/download/{{file1}}\",\n    \"preset\":\"advanced\",\n    \"pages\": [{\n        \"type\":\"IMAGE\",\n        \"title\" : \"Тестовый сторис с 2 кнопками\",\n        \"image\":\"{{host}}/files/download/{{file2}}\",\n        \"body\":\"Тут много текста\",\n        \"comment\":\"Этот текст не видит пользователь\",\n        \"buttons\": [{\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file3}}\",\n            \"title\":\"Первая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n        },\n        {\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file4}}\",\n            \"title\":\"Вторая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n\n        }]\n    }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Пользователь",
									"item": [
										{
											"name": "Создание сториса (проверка доступа)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 403\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    pm.test(\"Проверка текста сообщения\", function () {",
															"        pm.expect(pm.response.json().message).to.eql(\"Access Denied\")",
															"    });",
															"",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\":\"Это сторис его сделал пользоватеть\",\n    \"preview\":\"{{host}}/files/download/{{file}}\",\n    \"preset\":\"advanced\",\n    \"pages\": [{\n        \"type\":\"IMAGE\",\n        \"title\" : \"Тестовый сторис с 2 кнопками\",\n        \"image\":\"{{host}}/files/download/{{file2}}\",\n        \"body\":\"Тут много текста\",\n        \"comment\":\"Этот текст не видит пользователь\",\n        \"buttons\": [{\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file3}}\",\n            \"title\":\"Первая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n        },\n        {\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file4}}\",\n            \"title\":\"Вторая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n\n        }]\n    }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Редактирование сториса (проверка доступа)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 403\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    pm.test(\"Проверка текста сообщения\", function () {",
															"        pm.expect(pm.response.json().message).to.eql(\"Access Denied\")",
															"    });",
															"",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \n    \"id\": \"{{story_id2}}\",\n    \"title\": \"Это сторис его сделал пользоватеть\",\n    \"preview\": \"{{host}}/files/download/{{file4}}\",\n    \"preset\": \"advanced\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Сторис с 2 кнопками, страница 1\",\n            \"image\": \"{{host}}/files/download/{{file1}}\",\n            \"body\": \"Тут стало больше текста\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file1}}\",\n                    \"title\": \"1 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file1}}\",\n                    \"title\": \"2 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тут стало меньше кнопок, страница 2\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут еще больше текста стало\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file2}}\",\n                    \"title\": \"Первая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тут стало больше кнопок, страница 3\",\n            \"image\": \"{{host}}/files/download/{{file3}}\",\n            \"body\": \"Тут много кнопок\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"1 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"2 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"3 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories/{{story_id2}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения сториса (проверка доступа)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей\", function () {",
															"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"story_id\"));",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"advanced\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories/{{story_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения сториса (проверка доступа без авторизации)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей\", function () {",
															"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"story_id\"));",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"advanced\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories/{{story_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения всех сторисов (проверка доступа)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    const stories_one_page= JSON.parse(pm.environment.get(\"stories_one_page\"));",
															"    const stories_three_page= JSON.parse(pm.environment.get(\"stories_three_page\"));",
															"    pm.test(\"Проверка всех возвращемый полей, а также количества строрис\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(1);",
															"        count = 0;",
															"        for(let i in pm.response.json()){",
															"            if (pm.response.json()[i].title === \"Это сторис и у него 2 кнопки\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_one_page);",
															"                count++;",
															"            }",
															"        }",
															"        pm.expect(count).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"title\",",
															"                \"preview\",",
															"                \"preset\",",
															"                \"pages\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"title\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preview\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preset\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"pages\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"title\",",
															"                            \"image\",",
															"                            \"body\",",
															"                            \"comment\",",
															"                            \"buttons\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"title\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"image\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"body\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"comment\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"buttons\": {",
															"                                \"type\": \"array\",",
															"                                \"additionalItems\": true,",
															"                                \"items\": {",
															"                                    \"type\": \"object\",",
															"                                    \"required\": [",
															"                                        \"title\",",
															"                                        \"type\",",
															"                                        \"image\",",
															"                                        \"alt\",",
															"                                        \"link\"",
															"                                    ],",
															"                                    \"additionalProperties\": true,",
															"                                    \"properties\": {",
															"                                        \"title\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"type\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"image\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"alt\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"link\": {",
															"                                            \"type\": \"string\"",
															"                                        }",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories?preset=advanced",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													],
													"query": [
														{
															"key": "preset",
															"value": "advanced"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения всех сторисов (проверка доступа без авторизации)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    const stories_one_page= JSON.parse(pm.environment.get(\"stories_one_page\"));",
															"    const stories_three_page= JSON.parse(pm.environment.get(\"stories_three_page\"));",
															"    pm.test(\"Проверка всех возвращемый полей, а также количества строрис\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(1);",
															"        count = 0;",
															"        for(let i in pm.response.json()){",
															"            if (pm.response.json()[i].title === \"Это сторис и у него 2 кнопки\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_one_page);",
															"                count++;",
															"            }",
															"        }",
															"        pm.expect(count).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"title\",",
															"                \"preview\",",
															"                \"preset\",",
															"                \"pages\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"title\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preview\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preset\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"pages\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"title\",",
															"                            \"image\",",
															"                            \"body\",",
															"                            \"comment\",",
															"                            \"buttons\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"title\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"image\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"body\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"comment\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"buttons\": {",
															"                                \"type\": \"array\",",
															"                                \"additionalItems\": true,",
															"                                \"items\": {",
															"                                    \"type\": \"object\",",
															"                                    \"required\": [",
															"                                        \"title\",",
															"                                        \"type\",",
															"                                        \"image\",",
															"                                        \"alt\",",
															"                                        \"link\"",
															"                                    ],",
															"                                    \"additionalProperties\": true,",
															"                                    \"properties\": {",
															"                                        \"title\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"type\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"image\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"alt\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"link\": {",
															"                                            \"type\": \"string\"",
															"                                        }",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories?preset=advanced",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													],
													"query": [
														{
															"key": "preset",
															"value": "advanced"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{ACCESS_TOKEN}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "сторисы beginner",
							"item": [
								{
									"name": "Администратор",
									"item": [
										{
											"name": "Создание сториса (2 кнопки)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.environment.set(\"story_id\", pm.response.json().id);",
															"    pm.environment.set(\"stories_one_page\", JSON.stringify(pm.response.json()));",
															"",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей кроме id\", function () {",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис beginner и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"beginner\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\":\"Это сторис beginner и у него 2 кнопки\",\n    \"preview\":\"{{host}}/files/download/{{file1}}\",\n    \"preset\":\"beginner\",\n    \"pages\": [{\n        \"type\":\"IMAGE\",\n        \"title\" : \"Тестовый сторис с 2 кнопками\",\n        \"image\":\"{{host}}/files/download/{{file2}}\",\n        \"body\":\"Тут много текста\",\n        \"comment\":\"Этот текст не видит пользователь\",\n        \"buttons\": [{\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file3}}\",\n            \"title\":\"Первая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n        },\n        {\n            \"type\":\"MARKET\",\n            \"image\":\"{{host}}/files/download/{{file4}}\",\n            \"title\":\"Вторая кнопка\",\n            \"alt\":\"yandex\",\n            \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n\n        }]\n    }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Пользователь",
									"item": [
										{
											"name": "Создание сториса (проверка доступа)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 403\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    pm.test(\"Проверка текста сообщения\", function () {",
															"        pm.expect(pm.response.json().message).to.eql(\"Access Denied\")",
															"    });",
															"",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"Это сторис пользователя\",\n    \"preview\": \"{{host}}/files/download/{{file}}\",\n    \"preset\": \"beginner\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тестовый сторис с 2 кнопками, страница 1\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут много текста\",\n            \"comment\": \"Этот текст не видит пользователь\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"Первая кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file4}}\",\n                    \"title\": \"Вторая кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тестовый сторис с 2 кнопками, страница 2\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут еще больше текста\",\n            \"comment\": \"Этот текст не видит пользователь\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"Первая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file4}}\",\n                    \"title\": \"Вторая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Редактирование сториса (проверка доступа)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 403\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    pm.test(\"Проверка текста сообщения\", function () {",
															"        pm.expect(pm.response.json().message).to.eql(\"Access Denied\")",
															"    });",
															"",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \n    \"id\": \"{{story_id2}}\",\n    \"title\": \"Это сторис его сделал пользоватеть\",\n    \"preview\": \"{{host}}/files/download/{{file4}}\",\n    \"preset\": \"advanced\",\n    \"pages\": [\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Сторис с 2 кнопками, страница 1\",\n            \"image\": \"{{host}}/files/download/{{file1}}\",\n            \"body\": \"Тут стало больше текста\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file1}}\",\n                    \"title\": \"1 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file1}}\",\n                    \"title\": \"2 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тут стало меньше кнопок, страница 2\",\n            \"image\": \"{{host}}/files/download/{{file2}}\",\n            \"body\": \"Тут еще больше текста стало\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file2}}\",\n                    \"title\": \"Первая кнопка, стр 2\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        },\n        {\n            \"type\": \"IMAGE\",\n            \"title\": \"Тут стало больше кнопок, страница 3\",\n            \"image\": \"{{host}}/files/download/{{file3}}\",\n            \"body\": \"Тут много кнопок\",\n            \"comment\": \"Этот текст пользователь по прежнему не видит\",\n            \"buttons\": [\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"1 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"2 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                },\n                {\n                    \"type\": \"MARKET\",\n                    \"image\": \"{{host}}/files/download/{{file3}}\",\n                    \"title\": \"3 кнопка\",\n                    \"alt\": \"yandex\",\n                    \"link\": \"http://eltexdoma.ru/cards.html?dev=ctl_5440\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/stories/{{story_id2}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения сториса (проверка доступа)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей\", function () {",
															"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"story_id\"));",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис beginner и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"beginner\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories/{{story_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения сториса (проверка доступа без авторизации)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    pm.test(\"Проверка всех возвращемый полей\", function () {",
															"        pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"story_id\"));",
															"        pm.expect(pm.response.json().title).to.eql(\"Это сторис beginner и у него 2 кнопки\");",
															"        pm.expect(pm.response.json().preview).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file1\"));",
															"        pm.expect(pm.response.json().preset).to.eql(\"beginner\");",
															"        pm.expect(pm.response.json().pages.length).to.eql(1);",
															"        pm.expect(pm.response.json().pages[0].type).to.eql(\"IMAGE\");",
															"        pm.expect(pm.response.json().pages[0].title).to.eql(\"Тестовый сторис с 2 кнопками\");",
															"        pm.expect(pm.response.json().pages[0].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file2\"));",
															"        pm.expect(pm.response.json().pages[0].body).to.eql(\"Тут много текста\");",
															"        pm.expect(pm.response.json().pages[0].comment).to.eql(\"Этот текст не видит пользователь\");",
															"        var number_of_buttons  = {",
															"            \"0\":0,",
															"            \"1\":0,",
															"        };",
															"        for(let i in pm.response.json().pages[0].buttons){",
															"            pm.expect(pm.response.json().pages[0].buttons[i].type).to.eql(\"MARKET\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].alt).to.eql(\"yandex\");",
															"            pm.expect(pm.response.json().pages[0].buttons[i].link).to.eql(\"http://eltexdoma.ru/cards.html?dev=ctl_5440\");",
															"            if(pm.response.json().pages[0].buttons[i].title === \"Первая кнопка\"){",
															"                number_of_buttons[0]++;",
															"                console.log(\"Есть первая кнопка\",number_of_buttons[0] );",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file3\"));",
															"            }",
															"            else if(pm.response.json().pages[0].buttons[i].title === \"Вторая кнопка\"){",
															"                number_of_buttons[1]++;",
															"                console.log(\"Есть вторая кнопка\",number_of_buttons[1]);",
															"                pm.expect(pm.response.json().pages[0].buttons[i].image).to.eql(pm.globals.get(\"host\") + \"/files/download/\" + pm.environment.get(\"file4\"));",
															"            }",
															"        }",
															"        pm.expect(number_of_buttons[0]).to.eql(1);",
															"        pm.expect(number_of_buttons[1]).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"title\",",
															"            \"preview\",",
															"            \"preset\",",
															"            \"pages\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"title\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preview\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"preset\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"pages\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"title\",",
															"                        \"image\",",
															"                        \"body\",",
															"                        \"comment\",",
															"                        \"buttons\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"title\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"image\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"body\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"comment\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"buttons\": {",
															"                            \"type\": \"array\",",
															"                            \"additionalItems\": true,",
															"                            \"items\": {",
															"                                \"type\": \"object\",",
															"                                \"required\": [",
															"                                    \"title\",",
															"                                    \"type\",",
															"                                    \"image\",",
															"                                    \"alt\",",
															"                                    \"link\"",
															"                                ],",
															"                                \"additionalProperties\": true,",
															"                                \"properties\": {",
															"                                    \"title\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"type\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"image\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"alt\": {",
															"                                        \"type\": \"string\"",
															"                                    },",
															"                                    \"link\": {",
															"                                        \"type\": \"string\"",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"            var JsoneData=JSON.parse(responseBody);",
															"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories/{{story_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories",
														"{{story_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения всех сторисов (проверка доступа)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    const stories_one_page= JSON.parse(pm.environment.get(\"stories_one_page\"));",
															"    const stories_three_page= JSON.parse(pm.environment.get(\"stories_three_page\"));",
															"    pm.test(\"Проверка всех возвращемый полей, а также количества строрис\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(1);",
															"        count = 0;",
															"        for(let i in pm.response.json()){",
															"            if (pm.response.json()[i].title === \"Это сторис beginner и у него 2 кнопки\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_one_page);",
															"                count++;",
															"            }",
															"        }",
															"        pm.expect(count).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"title\",",
															"                \"preview\",",
															"                \"preset\",",
															"                \"pages\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"title\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preview\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preset\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"pages\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"title\",",
															"                            \"image\",",
															"                            \"body\",",
															"                            \"comment\",",
															"                            \"buttons\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"title\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"image\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"body\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"comment\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"buttons\": {",
															"                                \"type\": \"array\",",
															"                                \"additionalItems\": true,",
															"                                \"items\": {",
															"                                    \"type\": \"object\",",
															"                                    \"required\": [",
															"                                        \"title\",",
															"                                        \"type\",",
															"                                        \"image\",",
															"                                        \"alt\",",
															"                                        \"link\"",
															"                                    ],",
															"                                    \"additionalProperties\": true,",
															"                                    \"properties\": {",
															"                                        \"title\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"type\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"image\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"alt\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"link\": {",
															"                                            \"type\": \"string\"",
															"                                        }",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories?preset=beginner",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													],
													"query": [
														{
															"key": "preset",
															"value": "beginner"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Запрос для получения всех сторисов (проверка доступа без авторизации)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status is ok, response is json\", function () {",
															"        pm.response.to.be.json; // проверка формата        ",
															"    });",
															"    const stories_one_page= JSON.parse(pm.environment.get(\"stories_one_page\"));",
															"    const stories_three_page= JSON.parse(pm.environment.get(\"stories_three_page\"));",
															"    pm.test(\"Проверка всех возвращемый полей, а также количества строрис\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(1);",
															"        count = 0;",
															"        for(let i in pm.response.json()){",
															"            if (pm.response.json()[i].title === \"Это сторис beginner и у него 2 кнопки\"){",
															"                pm.expect(pm.response.json()[i]).to.eql(stories_one_page);",
															"                count++;",
															"            }",
															"        }",
															"        pm.expect(count).to.eql(1);",
															"    });",
															"",
															"    var schema = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"title\",",
															"                \"preview\",",
															"                \"preset\",",
															"                \"pages\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"title\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preview\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"preset\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"pages\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"title\",",
															"                            \"image\",",
															"                            \"body\",",
															"                            \"comment\",",
															"                            \"buttons\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"title\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"image\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"body\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"comment\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"buttons\": {",
															"                                \"type\": \"array\",",
															"                                \"additionalItems\": true,",
															"                                \"items\": {",
															"                                    \"type\": \"object\",",
															"                                    \"required\": [",
															"                                        \"title\",",
															"                                        \"type\",",
															"                                        \"image\",",
															"                                        \"alt\",",
															"                                        \"link\"",
															"                                    ],",
															"                                    \"additionalProperties\": true,",
															"                                    \"properties\": {",
															"                                        \"title\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"type\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"image\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"alt\": {",
															"                                            \"type\": \"string\"",
															"                                        },",
															"                                        \"link\": {",
															"                                            \"type\": \"string\"",
															"                                        }",
															"                                    }",
															"                                }",
															"                            }",
															"                        }",
															"                    }",
															"                }",
															"            }",
															"        }",
															"    };",
															"        ",
															"    pm.test('Schema is valid', function () {",
															"        var JsoneData=JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
															"    });",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/stories?preset=beginner",
													"host": [
														"{{host}}"
													],
													"path": [
														"stories"
													],
													"query": [
														{
															"key": "preset",
															"value": "beginner"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{ACCESS_TOKEN}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Удаление",
							"item": [
								{
									"name": "Запрос для получения всех сторисов (advanced)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var stories_ids = [];",
													"    for(let i in pm.response.json()){",
													"        stories_ids.push(pm.response.json()[i].id)",
													"    }",
													"    pm.environment.set(\"stories_ids\", JSON.stringify(stories_ids));",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"preview\",",
													"                \"preset\",",
													"                \"pages\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"title\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"preview\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"preset\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"pages\": {",
													"                    \"type\": \"array\",",
													"                    \"additionalItems\": true,",
													"                    \"items\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"type\",",
													"                            \"title\",",
													"                            \"image\",",
													"                            \"body\",",
													"                            \"comment\",",
													"                            \"buttons\"",
													"                        ],",
													"                        \"additionalProperties\": true,",
													"                        \"properties\": {",
													"                            \"type\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"image\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"body\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"comment\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"buttons\": {",
													"                                \"type\": \"array\",",
													"                                \"additionalItems\": true,",
													"                                \"items\": {",
													"                                    \"type\": \"object\",",
													"                                    \"required\": [",
													"                                        \"title\",",
													"                                        \"type\",",
													"                                        \"image\",",
													"                                        \"alt\",",
													"                                        \"link\"",
													"                                    ],",
													"                                    \"additionalProperties\": true,",
													"                                    \"properties\": {",
													"                                        \"title\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"type\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"image\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"alt\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"link\": {",
													"                                            \"type\": \"string\"",
													"                                        }",
													"                                    }",
													"                                }",
													"                            }",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/stories?preset=advanced",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories"
											],
											"query": [
												{
													"key": "preset",
													"value": "advanced"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление сториса (Удалить все advanced)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"    let stories_ids = JSON.parse(pm.environment.get(\"stories_ids\"));",
													"    if (stories_ids.length > 0){",
													"        postman.setNextRequest(pm.info.requestId);        ",
													"    }",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let stories_ids = JSON.parse(pm.environment.get(\"stories_ids\"));",
													"stories_ids.reverse();",
													"let story_id = stories_ids[0]",
													"stories_ids.reverse();",
													"stories_ids.pop();",
													"pm.environment.set(\"stories_ids\", JSON.stringify(stories_ids));",
													"pm.environment.set(\"story_id\", story_id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/stories/{{story_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories",
												"{{story_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос для получения всех сторисов (beginner)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var stories_ids = [];",
													"    for(let i in pm.response.json()){",
													"        stories_ids.push(pm.response.json()[i].id)",
													"    }",
													"    pm.environment.set(\"stories_ids\", JSON.stringify(stories_ids));",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"preview\",",
													"                \"preset\",",
													"                \"pages\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"title\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"preview\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"preset\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"pages\": {",
													"                    \"type\": \"array\",",
													"                    \"additionalItems\": true,",
													"                    \"items\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"type\",",
													"                            \"title\",",
													"                            \"image\",",
													"                            \"body\",",
													"                            \"comment\",",
													"                            \"buttons\"",
													"                        ],",
													"                        \"additionalProperties\": true,",
													"                        \"properties\": {",
													"                            \"type\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"image\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"body\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"comment\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"buttons\": {",
													"                                \"type\": \"array\",",
													"                                \"additionalItems\": true,",
													"                                \"items\": {",
													"                                    \"type\": \"object\",",
													"                                    \"required\": [",
													"                                        \"title\",",
													"                                        \"type\",",
													"                                        \"image\",",
													"                                        \"alt\",",
													"                                        \"link\"",
													"                                    ],",
													"                                    \"additionalProperties\": true,",
													"                                    \"properties\": {",
													"                                        \"title\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"type\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"image\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"alt\": {",
													"                                            \"type\": \"string\"",
													"                                        },",
													"                                        \"link\": {",
													"                                            \"type\": \"string\"",
													"                                        }",
													"                                    }",
													"                                }",
													"                            }",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/stories?preset=beginner",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories"
											],
											"query": [
												{
													"key": "preset",
													"value": "beginner"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление сториса (Удалить все beginner)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"    let stories_ids = JSON.parse(pm.environment.get(\"stories_ids\"));",
													"    if (stories_ids.length > 0){",
													"        postman.setNextRequest(pm.info.requestId);        ",
													"    }",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let stories_ids = JSON.parse(pm.environment.get(\"stories_ids\"));",
													"stories_ids.reverse();",
													"let story_id = stories_ids[0]",
													"stories_ids.reverse();",
													"stories_ids.pop();",
													"pm.environment.set(\"stories_ids\", JSON.stringify(stories_ids));",
													"pm.environment.set(\"story_id\", story_id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/stories/{{story_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories",
												"{{story_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка удаления (beginner)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка удаления\", function () {",
													"        pm.expect(pm.response.json().length).to.eql(0);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/stories?preset=beginner",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories"
											],
											"query": [
												{
													"key": "preset",
													"value": "beginner"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка удаления (advanced)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка удаления\", function () {",
													"        pm.expect(pm.response.json().length).to.eql(0);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/stories?preset=advanced",
											"host": [
												"{{host}}"
											],
											"path": [
												"stories"
											],
											"query": [
												{
													"key": "preset",
													"value": "advanced"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deletes the downloaded file by its id.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var i=pm.collectionVariables.get(\"i\");",
													"if(i != \"0\"){",
													"    var file_name = \"file_id\" + String(Number(i) + 1);",
													"    let file_id = pm.environment.get(file_name);",
													"    pm.environment.set(\"file_id\", file_id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 204\", function () {",
													"        pm.response.to.have.status(204);",
													"    });",
													"    var i=pm.collectionVariables.get(\"i\");",
													"    i++;",
													"    pm.collectionVariables.set(\"i\", i);",
													"",
													"    if (i < 4){",
													"        postman.setNextRequest(pm.info.requestId);        ",
													"    }",
													"    else if (i == 4) {",
													"        pm.collectionVariables.set(\"i\", 0);",
													"    }",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/files/delete?fileId={{file_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"files",
												"delete"
											],
											"query": [
												{
													"key": "fileId",
													"value": "{{file_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}} ",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Проверка работы платформы через интерфейс инженера-техподдержки (WEB)",
			"item": [
				{
					"name": "Тех. поддержка (с чатом)",
					"item": [
						{
							"name": "Подготовка",
							"item": [
								{
									"name": "Получение токена (для админа)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"admin_access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_user_1_id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_1_login', 'test_user_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_user_1_login}}\",\n    \"videoParameters\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для абонента 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"test_user_1_token\", jsonData.access_token);",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_1_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание дома для абонента 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_user_1_house\", jsonData.id);",
													"",
													"   var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Test House\",\n    \"type\": \"HOUSE\",\n    \"address\": \"Test Address\",\n    \"apartment\": \"0101\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание абонента 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_user_2_id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_2_login', 'test_user_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_user_2_login}}\",\n    \"videoParameters\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для абонента 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"test_user_2_token\", jsonData.access_token);",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_user_2_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание инженера ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_support_1_id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_support_1_login', 'test_user_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"support-engineer\",\n    \"roleId\": \"support-engineer\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_support_1_login}}\",\n    \"videoParameters\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для инженера ТП 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"test_support_1_token\", jsonData.access_token);",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_support_1_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание инженера ТП 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_support_2_id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_support_2_login', 'test_user_'+randomString(6));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"support-engineer\",\n    \"roleId\": \"support-engineer\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_support_2_login}}\",\n    \"videoParameters\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для инженера ТП 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"test_support_2_token\", jsonData.access_token);",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_support_2_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{test_user_1_token}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{test_user_1_token}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Создание заявки",
							"item": [
								{
									"name": "Создание заявки абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// time = pm.response.json().creationTimeMillis - 1;",
													"// pm.environment.set(\"current_time\", time);",
													"",
													"pm.environment.set(\"test_user_1_ticket\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"{{test_user_1_id}}\",\n    \"houseId\": \"{{test_user_1_house}}\",\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"usersDescription\": \"{{$randomLoremParagraph}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события создания новой заявки",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_ticketDTO.id={{test_user_1_ticket}}&C_type=SUPPORT_TICKET_CREATE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_ticketDTO.id",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_TICKET_CREATE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание заявки абонентом 2 (без дома)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set(\"test_user_2_ticket\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_2_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"{{test_user_2_id}}\",\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"usersDescription\": \"{{$randomLoremParagraph}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание заявки инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"// time = pm.response.json().creationTimeMillis - 1;",
													"// pm.environment.set(\"current_time\", time);",
													"pm.environment.set(\"test_support_1_ticket\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"{{test_user_1_id}}\",\n    \"houseId\": \"{{test_user_1_house}}\",\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"usersDescription\": \"{{$randomLoremParagraph}}\",\n    \"engineersDescription\": \"{{$randomLoremSentence}}\",\n    \"assignedToId\": \"{{test_support_1_id}}\",\n    \"status\": \"NEW\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события создания новой заявки",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_ticketDTO.id={{test_support_1_ticket}}&C_type=SUPPORT_TICKET_CREATE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_ticketDTO.id",
													"value": "{{test_support_1_ticket}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_TICKET_CREATE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание заявки инженером ТП 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set(\"test_support_2_ticket\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_2_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"{{test_user_2_id}}\",\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"usersDescription\": \"{{$randomLoremParagraph}}\",\n    \"engineersDescription\": \"{{$randomLoremSentence}}\",\n    \"assignedToId\": \"{{test_support_2_id}}\",\n    \"status\": \"IN_PROGRESS\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка создание заявки абонентом 2 на абонента 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"  pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_2_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"{{test_user_1_id}}\",\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"usersDescription\": \"{{$randomLoremParagraph}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка создание заявки на самого себя инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"{{test_support_1_id}}\",\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"usersDescription\": \"{{$randomLoremParagraph}}\",\n    \"engineersDescription\": \"{{$randomLoremSentence}}\",\n    \"assignedToId\": \"{{test_support_1_id}}\",\n    \"status\": \"NEW\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Редактирование заявки",
							"item": [
								{
									"name": "Попытка редактирования заявки абонентом 1 (свойства для инженеров ТП)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_user_1_ticket}}\",\n    \"status\": \"CLOSED\",\n    \"engineersDescription\": \"{{$randomLoremParagraph}}\",\n    \"assignedToId\": \"{{test_support_2_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка редактирование заявки инженером ТП 1 (передача заявки абоненту)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_support_1_ticket}}\",\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"engineersDescription\": \"{{$randomLoremSentence}}\",\n    \"assignedToId\": \"{{test_user_1_id}}\",\n    \"status\": \"IN_PROGRESS\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_support_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_support_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование заявки абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_1_ticket_title', randomString(24));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_user_1_ticket}}\",\n    \"title\": \"{{test_user_1_ticket_title}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события редактирования заявки",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_ticketDTO.id={{test_user_1_ticket}}&C_type=SUPPORT_TICKET_UPDATE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_ticketDTO.id",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_TICKET_UPDATE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование заявки инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_support_1_ticket}}\",\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"engineersDescription\": \"{{$randomLoremSentence}}\",\n    \"assignedToId\": \"{{test_support_1_id}}\",\n    \"status\": \"IN_PROGRESS\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_support_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_support_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события редактирования заявки",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_ticketDTO.id={{test_user_1_ticket}}&C_type=SUPPORT_TICKET_UPDATE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_ticketDTO.id",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_TICKET_UPDATE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Вложения",
							"item": [
								{
									"name": "Попытка загрузки изображения к заявке абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "images",
													"type": "file",
													"src": "/home/andru/repos/test-stand/jpg.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/images",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"images"
											]
										}
									},
									"response": []
								},
								{
									"name": "Загрузка логов к заявке",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"try",
													"{",
													"pm.environment.set(\"test_user_1_log\", pm.response.json().logFileIds[0]);",
													"}",
													"catch(ex)",
													"{",
													"    console.error(\"Unable to set user log ID: \"+ex);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "uiLogFiles",
													"contentType": "",
													"type": "file",
													"src": "log"
												}
											]
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/uiLogs",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"uiLogs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка наличия лога в заявке инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UI log file is present\", function () {",
													"  pm.expect(pm.response.json().uiLogFilesIds).to.have.lengthOf(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_user_1_ticket}}\",\n    \"status\": \"CLOSED\",\n    \"engineersDescription\": \"{{$randomLoremParagraph}}\",\n    \"assignedToId\": \"{{test_support_2_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление лога в заявке инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_user_1_ticket}}\",\n    \"status\": \"CLOSED\",\n    \"engineersDescription\": \"{{$randomLoremParagraph}}\",\n    \"assignedToId\": \"{{test_support_2_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/uiLogs/{{test_user_1_log}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"uiLogs",
												"{{test_user_1_log}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отсутствия лога в заявке инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UI log file is not present\", function () {",
													"  pm.expect(pm.response.json().uiLogFilesIds).to.have.lengthOf(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_user_1_ticket}}\",\n    \"status\": \"CLOSED\",\n    \"engineersDescription\": \"{{$randomLoremParagraph}}\",\n    \"assignedToId\": \"{{test_support_2_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Чат",
							"item": [
								{
									"name": "Новое сообщение от инженера ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set(\"test_support_1_message\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"",
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_support_1_message_text', randomString(24));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"content\": \"{{$randomLoremSentences}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события создания сообщения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_supportMessageDTO.supportTicketId={{test_user_1_ticket}}&C_supportMessageDTO.id={{test_support_1_message}}&C_type=SUPPORT_MESSAGE_CREATE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_supportMessageDTO.supportTicketId",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_supportMessageDTO.id",
													"value": "{{test_support_1_message}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_MESSAGE_CREATE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Новое сообщение от абонента 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set(\"test_user_1_message\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"",
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_1_message_text', randomString(24));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"content\": \"{{$randomLoremSentences}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события создания сообщения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_supportMessageDTO.supportTicketId={{test_user_1_ticket}}&C_supportMessageDTO.id={{test_user_1_message}}&C_type=SUPPORT_MESSAGE_CREATE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_supportMessageDTO.supportTicketId",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_supportMessageDTO.id",
													"value": "{{test_user_1_message}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_MESSAGE_CREATE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение заявки и сообщений абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set(\"test_user_1_ticket_messages\", pm.response.json().messages.total);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}?messageLimit=100",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											],
											"query": [
												{
													"key": "messageLimit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение сообщений в заявке абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of messages using getTicket should be equal to this\", function () {",
													"  pm.expect(pm.response.json().total).to.eq(pm.environment.get(\"test_user_1_ticket_messages\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages?offset=0&limit=100",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка количества непрочитанных сообщений абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Unread counter must be greater than 0\", function () {",
													"  pm.expect(pm.response.json().unreadCounter).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}?messageLimit=100",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											],
											"query": [
												{
													"key": "messageLimit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Сброс счетчика непрочитанных сообщений абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Unread counter must be eqaul to 0\", function () {",
													"  pm.expect(pm.response.json().unreadCounter).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/resetCounter",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"resetCounter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка количества непрочитанных сообщений абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Unread counter must be equal 0\", function () {",
													"  pm.expect(pm.response.json().unreadCounter).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}?messageLimit=100",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											],
											"query": [
												{
													"key": "messageLimit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Новое сообщение от инженера ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"content\": \"{{$randomLoremSentences}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка количества непрочитанных сообщений абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Unread counter must be greater than 0\", function () {",
													"  pm.expect(pm.response.json().unreadCounter).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}?messageLimit=100",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											],
											"query": [
												{
													"key": "messageLimit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение сообщений в заявке абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Unread counter must be equal 0\", function () {",
													"  pm.expect(pm.response.json().unreadCounter).to.be.eq(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageLimit\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/read",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка количества непрочитанных сообщений абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Unread counter must be equal 0\", function () {",
													"  pm.expect(pm.response.json().unreadCounter).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}?messageLimit=100",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											],
											"query": [
												{
													"key": "messageLimit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка редактирования сообщения инженера ТП абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"  pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_support_1_message}}\",\n    \"content\": \"{{$randomLoremSentences}}\",\n    \"authorId\": \"{{test_support_1_id}}\",\n    \"authorName\": \"{{test_support_1_login}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages/{{test_support_1_message}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages",
												"{{test_support_1_message}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка редактирования сообщения абонента инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"  pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{test_user_1_message}}\",\n    \"content\": \"{{$randomLoremSentences}}\",\n    \"authorId\": \"{{test_user_1_id}}\",\n    \"authorName\": \"{{test_user_1_login}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages/{{test_user_1_message}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages",
												"{{test_user_1_message}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование своего сообщения абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"",
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_user_1_message_text', randomString(24));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"content\": \"{{test_user_1_message_text}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages/{{test_user_1_message}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages",
												"{{test_user_1_message}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события редактирования сообщения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_supportMessage.supportTicketId={{test_user_1_ticket}}&C_supportMessage.id={{test_user_1_message}}&C_type=SUPPORT_MESSAGE_UPDATE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_supportMessage.supportTicketId",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_supportMessage.id",
													"value": "{{test_user_1_message}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_MESSAGE_UPDATE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование своего сообщения инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"",
													"function randomString(length=1) {",
													"    let randomString = \"\";",
													"    for (let i = 0; i < length; i++){",
													"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");",
													"    }",
													"    return randomString;",
													"}",
													"",
													"pm.environment.set('test_support_1_message_text', randomString(24));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"content\": \"{{test_support_1_message_text}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages/{{test_support_1_message}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages",
												"{{test_support_1_message}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события редактирования сообщения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_supportMessage.supportTicketId={{test_user_1_ticket}}&C_supportMessage.id={{test_support_1_message}}&C_type=SUPPORT_MESSAGE_UPDATE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_supportMessage.supportTicketId",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_supportMessage.id",
													"value": "{{test_support_1_message}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_MESSAGE_UPDATE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка отредактированных сообщений абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Message text should be equal to edited\", function () {",
													"",
													"  for (var message of pm.response.json().data)",
													"  {",
													"      if(message.id == pm.environment.get(\"test_user_1_message\"))",
													"        pm.expect(message.content).to.eq(pm.environment.get(\"test_user_1_message_text\"));",
													"      else if(message.id == pm.environment.get(\"test_support_1_message\"))",
													"        pm.expect(message.content).to.eq(pm.environment.get(\"test_support_1_message_text\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages?offset=0&limit=100",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка удаление сообщения абонента инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"  pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages/{{test_user_1_message}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages",
												"{{test_user_1_message}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление своего сообщения абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages/{{test_user_1_message}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages",
												"{{test_user_1_message}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события удаления сообщения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_ticketId={{test_user_1_ticket}}&C_messageId={{test_user_1_message}}&C_type=SUPPORT_MESSAGE_DELETE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_ticketId",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_messageId",
													"value": "{{test_user_1_message}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_MESSAGE_DELETE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка удаление сообщения инженера ТП абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"  pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages/{{test_support_1_message}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages",
												"{{test_support_1_message}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление своего сообщения инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}/messages/{{test_support_1_message}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}",
												"messages",
												"{{test_support_1_message}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события удаления сообщения",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_ticketId={{test_user_1_ticket}}&C_messageId={{test_support_1_message}}&C_type=SUPPORT_MESSAGE_DELETE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_ticketId",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_messageId",
													"value": "{{test_support_1_message}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_MESSAGE_DELETE"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Разное",
							"item": [
								{
									"name": "Получение всех возможных статусов заявки инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/statuses",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"statuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение списка выбранных заявок инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"User 1 ticket should be selected by support 1\", function () {",
													"  pm.expect(pm.response.json()[pm.environment.get(\"test_user_1_ticket\")][0]).to.eq(pm.environment.get(\"test_support_1_login\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/selectedBySupport",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"selectedBySupport"
											]
										}
									},
									"response": []
								},
								{
									"name": "Выбор другой заявки инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_2_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_2_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка списка выбранных заявок инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"User 2 ticket should be selected by support 1\", function () {",
													"  pm.expect(pm.response.json()[pm.environment.get(\"test_user_2_ticket\")][0]).to.eq(pm.environment.get(\"test_support_1_login\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/selectedBySupport",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"selectedBySupport"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Фильтры",
							"item": [
								{
									"name": "Заявки",
									"item": [
										{
											"name": "По отдельным фильтрам",
											"item": [
												{
													"name": "Получение списка заявок (без фильтров)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"let tickets = pm.response.json().data;",
																	"pm.environment.set(\"test_sort_min_creationTime\", Math.min(...tickets.map(x => x.creationTimeMillis)));",
																	"pm.environment.set(\"test_sort_max_creationTime\", Math.max(...tickets.map(x => x.creationTimeMillis)));",
																	"pm.environment.set(\"test_sort_min_lastUpdateTime\", Math.min(...tickets.map(x => x.lastUpdateTimeMillis)));",
																	"pm.environment.set(\"test_sort_max_lastUpdateTime\", Math.max(...tickets.map(x => x.lastUpdateTimeMillis)));",
																	"pm.environment.set(\"test_sort_total-1\", pm.response.json().total-1);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=10000",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "10000"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр title)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].title).to.include(pm.environment.get(\"test_user_1_ticket_title\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&title={{test_user_1_ticket_title}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "title",
																	"value": "{{test_user_1_ticket_title}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр userId)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].userId).to.eq(pm.environment.get(\"test_user_1_id\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&userId={{test_user_1_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "userId",
																	"value": "{{test_user_1_id}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр houseId)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].houseId).to.eq(pm.environment.get(\"test_user_1_house\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&houseId={{test_user_1_house}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "houseId",
																	"value": "{{test_user_1_house}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр statuses, 1 статус)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].status).to.eq(\"IN_PROGRESS\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&statuses=IN_PROGRESS",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "statuses",
																	"value": "IN_PROGRESS"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр statuses, 4 статуса)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect([\"IN_PROGRESS\", \"NEW\", \"FEEDBACK\", \"CLOSED\"]).to.include(tickets[i].status);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&statuses=IN_PROGRESS,NEW,FEEDBACK,CLOSED",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "statuses",
																	"value": "IN_PROGRESS,NEW,FEEDBACK,CLOSED"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр createdBy)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].createdBy).to.be.eq(pm.environment.get(\"test_user_1_id\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&createdBy={{test_user_1_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "createdBy",
																	"value": "{{test_user_1_id}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр assignedToId)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].assignedToId).to.be.eq(pm.environment.get(\"test_support_1_id\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&assignedToId={{test_support_1_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "assignedToId",
																	"value": "{{test_support_1_id}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (параметр useLastUpdateTime)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check sort\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length - 1; i++)",
																	"        pm.expect(tickets[i].lastUpdateTimeMillis).to.be.lte(tickets[i+1].lastUpdateTimeMillis);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&useLastUpdateTime=true",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "useLastUpdateTime",
																	"value": "true"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (параметр isAscSort=true)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check sort\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length - 1; i++)",
																	"        pm.expect(tickets[i].creationTimeMillis).to.be.lte(tickets[i+1].creationTimeMillis);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&isAscSort=true",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "isAscSort",
																	"value": "true"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (параметр isAscSort=false)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check sort\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length - 1; i++)",
																	"        pm.expect(tickets[i].creationTimeMillis).to.be.gte(tickets[i+1].creationTimeMillis);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&isAscSort=false",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "isAscSort",
																	"value": "false"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (параметр useLastUpdateTime и isAscSort=false)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check sort\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length - 1; i++)",
																	"        pm.expect(tickets[i].lastUpdateTimeMillis).to.be.gte(tickets[i+1].lastUpdateTimeMillis);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&isAscSort=false&useLastUpdateTime=true",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "isAscSort",
																	"value": "false"
																},
																{
																	"key": "useLastUpdateTime",
																	"value": "true"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр timeMillisBefore)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().total).to.be.eq(1);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].creationTimeMillis).to.be.lte(pm.environment.get(\"test_sort_min_creationTime\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&timeMillisBefore={{test_sort_min_creationTime}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "timeMillisBefore",
																	"value": "{{test_sort_min_creationTime}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр timeMillisAfter)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().total).to.be.eq(1);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].creationTimeMillis).to.be.gte(pm.environment.get(\"test_sort_max_creationTime\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&timeMillisAfter={{test_sort_max_creationTime}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "timeMillisAfter",
																	"value": "{{test_sort_max_creationTime}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр timeMillisBefore, параметр useLastUpdateTime)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().total).to.be.eq(1);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].lastUpdateTimeMillis).to.be.lte(pm.environment.get(\"test_sort_min_lastUpdateTime\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&useLastUpdateTime=true&timeMillisBefore={{test_sort_min_lastUpdateTime}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "useLastUpdateTime",
																	"value": "true"
																},
																{
																	"key": "timeMillisBefore",
																	"value": "{{test_sort_min_lastUpdateTime}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр timeMillisAfter, параметр useLastUpdateTime)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().total).to.be.eq(1);",
																	"});",
																	"",
																	"pm.test(\"Check filter\", function () {",
																	"    let tickets = pm.response.json().data;",
																	"",
																	"    for (let i = 0; i < tickets.length; i++)",
																	"        pm.expect(tickets[i].lastUpdateTimeMillis).to.be.gte(pm.environment.get(\"test_sort_max_lastUpdateTime\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=100&useLastUpdateTime=true&timeMillisAfter={{test_sort_max_lastUpdateTime}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "useLastUpdateTime",
																	"value": "true"
																},
																{
																	"key": "timeMillisAfter",
																	"value": "{{test_sort_max_lastUpdateTime}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр limit)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().total).to.be.eq(1);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset=0&limit=1",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "limit",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр offset)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().total).to.be.eq(1);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets?offset={{test_sort_total-1}}&limit=100000",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "{{test_sort_total-1}}"
																},
																{
																	"key": "limit",
																	"value": "100000"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Получение списка заявок (все фильтры не правильные)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Check number of tickets\", function () {",
															"    pm.expect(pm.response.json().total).to.be.eq(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/support/tickets?offset=0&limit=100000&title={{$randomLoremSentence}}&userId=bbaa&houseId=aabb&statuses=NOPE&createdBy=ffaa&assignedToId=aaff&timeMillisBefore=100&timeMillisAfter=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"support",
														"tickets"
													],
													"query": [
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "limit",
															"value": "100000"
														},
														{
															"key": "title",
															"value": "{{$randomLoremSentence}}"
														},
														{
															"key": "userId",
															"value": "bbaa"
														},
														{
															"key": "houseId",
															"value": "aabb"
														},
														{
															"key": "statuses",
															"value": "NOPE"
														},
														{
															"key": "createdBy",
															"value": "ffaa"
														},
														{
															"key": "assignedToId",
															"value": "aaff"
														},
														{
															"key": "timeMillisBefore",
															"value": "100"
														},
														{
															"key": "timeMillisAfter",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заявок (все фильтры правильные)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Check number of tickets\", function () {",
															"    pm.expect(pm.response.json().total).to.be.eq(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/support/tickets?offset=0&limit=100000&title={{test_user_1_ticket_title}}&userId={{test_user_1_id}}&houseId={{test_user_1_house}}&statuses=NEW,IN_PROGRESS,FEEDBACK&createdBy={{test_user_1_id}}&assignedToId={{test_support_1_id}}&timeMillisBefore={{test_sort_max_creationTime}}&timeMillisAfter={{test_sort_min_creationTime}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"support",
														"tickets"
													],
													"query": [
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "limit",
															"value": "100000"
														},
														{
															"key": "title",
															"value": "{{test_user_1_ticket_title}}"
														},
														{
															"key": "userId",
															"value": "{{test_user_1_id}}"
														},
														{
															"key": "houseId",
															"value": "{{test_user_1_house}}"
														},
														{
															"key": "statuses",
															"value": "NEW,IN_PROGRESS,FEEDBACK"
														},
														{
															"key": "createdBy",
															"value": "{{test_user_1_id}}"
														},
														{
															"key": "assignedToId",
															"value": "{{test_support_1_id}}"
														},
														{
															"key": "timeMillisBefore",
															"value": "{{test_sort_max_creationTime}}"
														},
														{
															"key": "timeMillisAfter",
															"value": "{{test_sort_min_creationTime}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заявок (все фильтры, кроме одного, не правильные)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Check number of tickets\", function () {",
															"    pm.expect(pm.response.json().total).to.be.eq(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/support/tickets?offset=0&limit=100000&title={{test_user_1_ticket_title}}&userId=bbaa&houseId=aabb&statuses=NOPE&createdBy=ffaa&assignedToId=aaff&timeMillisBefore=100&timeMillisAfter=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"support",
														"tickets"
													],
													"query": [
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "limit",
															"value": "100000"
														},
														{
															"key": "title",
															"value": "{{test_user_1_ticket_title}}"
														},
														{
															"key": "userId",
															"value": "bbaa"
														},
														{
															"key": "houseId",
															"value": "aabb"
														},
														{
															"key": "statuses",
															"value": "NOPE"
														},
														{
															"key": "createdBy",
															"value": "ffaa"
														},
														{
															"key": "assignedToId",
															"value": "aaff"
														},
														{
															"key": "timeMillisBefore",
															"value": "100"
														},
														{
															"key": "timeMillisAfter",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Количество заявок",
									"item": [
										{
											"name": "По отдельным фильтрам",
											"item": [
												{
													"name": "Получение списка заявок (без фильтров)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(4);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр title)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(1);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?title={{test_user_1_ticket_title}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "title",
																	"value": "{{test_user_1_ticket_title}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр userId)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(2);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?userId={{test_user_1_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "userId",
																	"value": "{{test_user_1_id}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр houseId)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(2);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?houseId={{test_user_1_house}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "houseId",
																	"value": "{{test_user_1_house}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр statuses, 1 статус)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(2);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?statuses=IN_PROGRESS",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "statuses",
																	"value": "IN_PROGRESS"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр statuses, 4 статуса)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(4);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?statuses=IN_PROGRESS,NEW,FEEDBACK,CLOSED",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "statuses",
																	"value": "IN_PROGRESS,NEW,FEEDBACK,CLOSED"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр createdBy)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(1);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?createdBy={{test_user_1_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "createdBy",
																	"value": "{{test_user_1_id}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр assignedToId)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(2);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?assignedToId={{test_support_1_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "assignedToId",
																	"value": "{{test_support_1_id}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр timeMillisBefore)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(1);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?timeMillisBefore={{test_sort_min_creationTime}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "timeMillisBefore",
																	"value": "{{test_sort_min_creationTime}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр timeMillisAfter)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(1);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?timeMillisAfter={{test_sort_max_creationTime}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "timeMillisAfter",
																	"value": "{{test_sort_max_creationTime}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр timeMillisBefore, параметр useLastUpdateTime)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(1);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?useLastUpdateTime=true&timeMillisBefore={{test_sort_min_lastUpdateTime}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "useLastUpdateTime",
																	"value": "true"
																},
																{
																	"key": "timeMillisBefore",
																	"value": "{{test_sort_min_lastUpdateTime}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Получение списка заявок (фильтр timeMillisBefore, параметр useLastUpdateTime) Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"  pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Check number of tickets\", function () {",
																	"    pm.expect(pm.response.json().totalNumber).to.be.eq(1);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test_support_1_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/support/tickets/count?useLastUpdateTime=true&timeMillisAfter={{test_sort_max_lastUpdateTime}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"support",
																"tickets",
																"count"
															],
															"query": [
																{
																	"key": "useLastUpdateTime",
																	"value": "true"
																},
																{
																	"key": "timeMillisAfter",
																	"value": "{{test_sort_max_lastUpdateTime}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Получение списка заявок (все фильтры не правильные)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Check number of tickets\", function () {",
															"    pm.expect(pm.response.json().totalNumber).to.be.eq(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/support/tickets/count?title={{$randomLoremSentence}}&userId=bbaa&houseId=aabb&statuses=NOPE&createdBy=ffaa&assignedToId=aaff&timeMillisBefore=100&timeMillisAfter=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"support",
														"tickets",
														"count"
													],
													"query": [
														{
															"key": "title",
															"value": "{{$randomLoremSentence}}"
														},
														{
															"key": "userId",
															"value": "bbaa"
														},
														{
															"key": "houseId",
															"value": "aabb"
														},
														{
															"key": "statuses",
															"value": "NOPE"
														},
														{
															"key": "createdBy",
															"value": "ffaa"
														},
														{
															"key": "assignedToId",
															"value": "aaff"
														},
														{
															"key": "timeMillisBefore",
															"value": "100"
														},
														{
															"key": "timeMillisAfter",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заявок (все фильтры правильные)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Check number of tickets\", function () {",
															"    pm.expect(pm.response.json().totalNumber).to.be.eq(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/support/tickets/count?title={{test_user_1_ticket_title}}&userId={{test_user_1_id}}&houseId={{test_user_1_house}}&statuses=NEW,IN_PROGRESS,FEEDBACK&createdBy={{test_user_1_id}}&assignedToId={{test_support_1_id}}&timeMillisBefore={{test_sort_max_creationTime}}&timeMillisAfter={{test_sort_min_creationTime}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"support",
														"tickets",
														"count"
													],
													"query": [
														{
															"key": "title",
															"value": "{{test_user_1_ticket_title}}"
														},
														{
															"key": "userId",
															"value": "{{test_user_1_id}}"
														},
														{
															"key": "houseId",
															"value": "{{test_user_1_house}}"
														},
														{
															"key": "statuses",
															"value": "NEW,IN_PROGRESS,FEEDBACK"
														},
														{
															"key": "createdBy",
															"value": "{{test_user_1_id}}"
														},
														{
															"key": "assignedToId",
															"value": "{{test_support_1_id}}"
														},
														{
															"key": "timeMillisBefore",
															"value": "{{test_sort_max_creationTime}}"
														},
														{
															"key": "timeMillisAfter",
															"value": "{{test_sort_min_creationTime}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заявок (все фильтры, кроме одного, не правильные)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Check number of tickets\", function () {",
															"    pm.expect(pm.response.json().totalNumber).to.be.eq(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/support/tickets/count?title={{test_user_1_ticket_title}}&userId=bbaa&houseId=aabb&statuses=NOPE&createdBy=ffaa&assignedToId=aaff&timeMillisBefore=100&timeMillisAfter=0",
													"host": [
														"{{host}}"
													],
													"path": [
														"support",
														"tickets",
														"count"
													],
													"query": [
														{
															"key": "title",
															"value": "{{test_user_1_ticket_title}}"
														},
														{
															"key": "userId",
															"value": "bbaa"
														},
														{
															"key": "houseId",
															"value": "aabb"
														},
														{
															"key": "statuses",
															"value": "NOPE"
														},
														{
															"key": "createdBy",
															"value": "ffaa"
														},
														{
															"key": "assignedToId",
															"value": "aaff"
														},
														{
															"key": "timeMillisBefore",
															"value": "100"
														},
														{
															"key": "timeMillisAfter",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(241417)Создание нового сообщения в чате от учетной записи пользователя меняет статус заявки",
							"item": [
								{
									"name": "Создание заявки абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// time = pm.response.json().creationTimeMillis - 1;",
													"// pm.environment.set(\"current_time\", time);",
													"",
													"pm.environment.set(\"test_user_1_ticket_status_NEW\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// postman.setEnvironmentVariable (\"current_time\", Date.now());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"{{test_user_1_id}}\",\n    \"houseId\": \"{{test_user_1_house}}\",\n    \"title\": \"status_NEW\",\n    \"usersDescription\": \"{{$randomLoremParagraph}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Второе сообщение от абонента 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"content\": \"status_NEW, 2 messages\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket_status_NEW}}/messages",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket_status_NEW}}",
												"messages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка (status NEW?)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка статуса (должен быть NEW)\", function () {",
													"    pm.expect(pm.response.json().status).to.eq(\"NEW\");",
													"});",
													"pm.test(\"Проверка количества сообщений (должно быть 2)\", function () {",
													"    pm.expect(pm.response.json().messages.data.length).to.eq(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket_status_NEW}}?withMessages=true&messageLimit=10",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket_status_NEW}}"
											],
											"query": [
												{
													"key": "withMessages",
													"value": "true"
												},
												{
													"key": "messageLimit",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление своей заявки абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket_status_NEW}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket_status_NEW}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Удаление заявки",
							"item": [
								{
									"name": "Удаление заявки абонента 2 абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_2_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_2_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление заявки абонента 2 инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_2_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_2_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление заявки абонента 1 инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление заявки абонента 1 созданной инженером ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_support_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_support_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление заявки созданной инженером ТП 2 (от лица инженера ТП 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_support_2_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_support_2_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление своей заявки созданной инженером ТП абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_support_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_support_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события удаления заявки",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_ticketDTO={{test_support_1_ticket}}&C_type=SUPPORT_TICKET_DELETE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_ticketDTO",
													"value": "{{test_support_1_ticket}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_TICKET_DELETE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление своей заявки абонентом 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_1_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_1_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события удаления заявки",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_ticketDTO={{test_user_1_ticket}}&C_type=SUPPORT_TICKET_DELETE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_ticketDTO",
													"value": "{{test_user_1_ticket}}"
												},
												{
													"key": "C_type",
													"value": "SUPPORT_TICKET_DELETE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление своей заявки созданной инженером ТП абонентом 1 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_2_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_support_2_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_support_2_ticket}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление своей заявки абонентом 1 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Пока без тестов, т.к. ожидаемое поведение еще обсуждается"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_2_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/support/tickets/{{test_user_2_ticket}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"support",
												"tickets",
												"{{test_user_2_ticket}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Завершение",
							"item": [
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление абонента 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{test_user_1_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_user_1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление абонента 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{test_user_2_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_user_2_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление инженера ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{test_support_1_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_support_1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление инженера ТП 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{test_support_2_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_support_2_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Проверка MQTT Сервиса",
			"item": [
				{
					"name": "Добавление Wi-Fi устройства",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"    var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Добавление MQTT устройства",
							"item": [
								{
									"name": "Узнать id контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=1&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "1"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить логин и пароль для устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавить mqtt устройство методом сопряжения.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
													"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
													"        pm.expect(pm.response.json().title).to.include(\"SW_RLY01\");",
													"        pm.expect(pm.response.json().muted).to.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.eql(false);",
													"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
													"    });",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"deviceType\",",
													"            \"houseId\",",
													"            \"nodeId\",",
													"            \"controllerId\",",
													"            \"title\",",
													"            \"muted\",",
													"            \"disabled\",",
													"            \"networkAddress\",",
													"            \"password\",",
													"            \"serial\",",
													"            \"status\",",
													"            \"deviceLocation\",",
													"            \"lastActivity\",",
													"            \"version\",",
													"            \"channels\",",
													"            \"actions\",",
													"            \"configs\",",
													"            \"settings\",",
													"            \"classType\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"deviceType\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"houseId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"nodeId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"controllerId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"muted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"disabled\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"networkAddress\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"password\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"serial\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"status\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"deviceLocation\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"lastActivity\": {",
													"                \"type\": \"number\"",
													"            },",
													"            \"version\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"channels\": {",
													"                \"type\": \"object\",",
													"                \"required\": [],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {}",
													"            },",
													"            \"actions\": {",
													"                \"type\": \"object\",",
													"                \"required\": [],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {}",
													"            },",
													"            \"configs\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"settings\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"className\",",
													"                    \"macAddress\",",
													"                    // \"ssid\",",
													"                    \"manufacturerId\",",
													"                    \"productId\",",
													"                    \"productTypeId\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"className\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"macAddress\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    // \"ssid\": {",
													"                    //     \"type\": \"null\"",
													"                    // },",
													"                    \"manufacturerId\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"productId\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"productTypeId\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            },",
													"            \"classType\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"        var jsonData = JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"console.log(Date.now())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"SW_RLY01\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на симулятор (добавление устройства)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/add_node/{{generatedNodeId}}?brokerLogin={{generatedBrokerLogin}}&brokerPassword={{generatedBrokerPassword}}&brokerURL={{brokerURL}}&device_type=SW-RLY01",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"add_node",
												"{{generatedNodeId}}"
											],
											"query": [
												{
													"key": "brokerLogin",
													"value": "{{generatedBrokerLogin}}"
												},
												{
													"key": "brokerPassword",
													"value": "{{generatedBrokerPassword}}"
												},
												{
													"key": "brokerURL",
													"value": "{{brokerURL}}"
												},
												{
													"key": "device_type",
													"value": "SW-RLY01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события добавления устройства Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_deviceInfo.controllerId={{controllerId}}&C_type=DEVICE_ADD&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.controllerId",
													"value": "{{controllerId}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_ADD"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Проверить добавление устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверить добавление датчика\",() => {",
											"  pm.expect(pm.response.json().length).to.eql(1);",
											"  pm.expect(pm.response.json()[0].deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
											"  pm.expect(pm.response.json()[0].controllerId).to.eql(pm.environment.get(\"controllerId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/devices?withCameras=false",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"devices"
									],
									"query": [
										{
											"key": "withCameras",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Включение/Выключение Wi-Fi устройства",
					"item": [
						{
							"name": "Включение устройства (канал 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [9000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"true\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}/props/00250000_0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices",
										"{{generatedNodeId}}",
										"props",
										"00250000_0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Включение устройства (канал 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"true\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}/props/00250000_1",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices",
										"{{generatedNodeId}}",
										"props",
										"00250000_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка включения",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Проверка включения (поле value), а также факта налачия обоих каналов\", function () {",
											"    let channels = 0;",
											"    for(let i in pm.response.json().channels[\"1\"].deviceProperties){",
											"        if(pm.response.json().channels[\"1\"].deviceProperties[i].id === \"00250000_0\") { ",
											"            pm.expect(pm.response.json().channels[\"1\"].deviceProperties[i].value).to.eql(\"true\")",
											"            channels++;",
											"        }",
											"    }",
											"    for(let i in pm.response.json().channels[\"1\"].deviceProperties){",
											"        if(pm.response.json().channels[\"2\"].deviceProperties[i].id === \"00250000_1\") { ",
											"            pm.expect(pm.response.json().channels[\"1\"].deviceProperties[i].value).to.eql(\"true\")",
											"            channels++;",
											"        }",
											"    }",
											"    pm.expect(channels).to.eql(2)",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices",
										"{{generatedNodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Выключение устройства (канал 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"false\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}/props/00250000_0",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices",
										"{{generatedNodeId}}",
										"props",
										"00250000_0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Выключение устройства (канал 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"false\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}/props/00250000_1",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices",
										"{{generatedNodeId}}",
										"props",
										"00250000_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка выключения",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Проверка выключения (поле value), а также факта налачия обоих каналов\", function () {",
											"    let channels = 0;",
											"    for(let i in pm.response.json().channels[\"1\"].deviceProperties){",
											"        if(pm.response.json().channels[\"1\"].deviceProperties[i].id === \"00250000_0\") { ",
											"            pm.expect(pm.response.json().channels[\"1\"].deviceProperties[i].value).to.eql(\"false\")",
											"            channels++;",
											"        }",
											"    }",
											"    for(let i in pm.response.json().channels[\"1\"].deviceProperties){",
											"        if(pm.response.json().channels[\"2\"].deviceProperties[i].id === \"00250000_1\") { ",
											"            pm.expect(pm.response.json().channels[\"1\"].deviceProperties[i].value).to.eql(\"false\")",
											"            channels++;",
											"        }",
											"    }",
											"    pm.expect(channels).to.eql(2)",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices",
										"{{generatedNodeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление Wi-Fi устройства",
					"item": [
						{
							"name": "Удаление Wi-Fi устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"true\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices",
										"{{generatedNodeId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка удаления",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Проверка отсутвия устройств\", function () {",
											"    pm.expect(pm.response.json().length).to.eql(0)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}} ",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Освещение",
			"item": [
				{
					"name": "Тесты для переключателя",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"    var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Добавление MQTT устройства",
							"item": [
								{
									"name": "Узнать id контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=1&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "1"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить логин и пароль для устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавить mqtt устройство методом сопряжения.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
													"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
													"        pm.expect(pm.response.json().title).to.include(\"SW_RLY01\");",
													"        pm.expect(pm.response.json().muted).to.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.eql(false);",
													"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
													"    });",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"deviceType\",",
													"            \"houseId\",",
													"            \"nodeId\",",
													"            \"controllerId\",",
													"            \"title\",",
													"            \"muted\",",
													"            \"disabled\",",
													"            \"networkAddress\",",
													"            \"password\",",
													"            \"serial\",",
													"            \"status\",",
													"            \"deviceLocation\",",
													"            \"lastActivity\",",
													"            \"version\",",
													"            \"channels\",",
													"            \"actions\",",
													"            \"configs\",",
													"            \"settings\",",
													"            \"classType\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"deviceType\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"houseId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"nodeId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"controllerId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"muted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"disabled\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"networkAddress\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"password\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"serial\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"status\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"deviceLocation\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"lastActivity\": {",
													"                \"type\": \"number\"",
													"            },",
													"            \"version\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"channels\": {",
													"                \"type\": \"object\",",
													"                \"required\": [],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {}",
													"            },",
													"            \"actions\": {",
													"                \"type\": \"object\",",
													"                \"required\": [],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {}",
													"            },",
													"            \"configs\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"settings\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"className\",",
													"                    \"macAddress\",",
													"                    // \"ssid\",",
													"                    \"manufacturerId\",",
													"                    \"productId\",",
													"                    \"productTypeId\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"className\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"macAddress\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    // \"ssid\": {",
													"                    //     \"type\": \"null\"",
													"                    // },",
													"                    \"manufacturerId\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"productId\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"productTypeId\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            },",
													"            \"classType\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"        var jsonData = JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"console.log(Date.now())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"SW_RLY01\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на симулятор (добавление устройства)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/add_node/{{generatedNodeId}}?brokerLogin={{generatedBrokerLogin}}&brokerPassword={{generatedBrokerPassword}}&brokerURL={{brokerURL}}&device_type=SW-RLY01",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"add_node",
												"{{generatedNodeId}}"
											],
											"query": [
												{
													"key": "brokerLogin",
													"value": "{{generatedBrokerLogin}}"
												},
												{
													"key": "brokerPassword",
													"value": "{{generatedBrokerPassword}}"
												},
												{
													"key": "brokerURL",
													"value": "{{brokerURL}}"
												},
												{
													"key": "device_type",
													"value": "SW-RLY01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события добавления устройства Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_deviceInfo.controllerId={{controllerId}}&C_type=DEVICE_ADD&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.controllerId",
													"value": "{{controllerId}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_ADD"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Через добавление канала и через перенос в другой LOCATION_LIST",
							"item": [
								{
									"name": "Получение всех секций пользователя.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var i = 0;",
													"while (i < pm.response.json().length){",
													"",
													"    if (jsonData[i].sectionType ==  \"LIGHT\") {",
													"        postman.setEnvironmentVariable (\"LIGHT_id\", jsonData[i].id);",
													"        postman.setEnvironmentVariable (\"nodeId\", jsonData[i].items[0].innerItems[0].info.nodeId);",
													"        postman.setEnvironmentVariable (\"propertyId\", jsonData[i].items[0].innerItems[0].info.propertyId);",
													"",
													"    }",
													"    if (jsonData[i].sectionType ==  \"GUARD\") postman.setEnvironmentVariable (\"GUARD_id\", jsonData[i].id);",
													"    if (jsonData[i].sectionType ==  \"CAMERAS\") postman.setEnvironmentVariable (\"CAMERAS_id\", jsonData[i].id);",
													"    if (jsonData[i].sectionType ==  \"CLIMATE\") postman.setEnvironmentVariable (\"CLIMATE_id\", jsonData[i].id);",
													"        ",
													"    i++;",
													"}",
													"",
													"",
													"var schema = {",
													"    \"type\": \"array\",",
													"    \"additionalItems\": true,",
													"    \"items\": {",
													"        \"$id\": \"#/items\",",
													"        \"anyOf\": [",
													"            {",
													"                \"$id\": \"#/items/anyOf/0\",",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"generalSwitch\",",
													"                    \"hide\",",
													"                    \"id\",",
													"                    \"items\",",
													"                    \"sectionType\",",
													"                    \"title\"",
													"                ],",
													"                \"properties\": {",
													"                    \"generalSwitch\": {",
													"",
													"                    },",
													"                    \"hide\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/hide\",",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"id\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/id\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"items\": {},",
													"                    \"sectionType\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/sectionType\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"title\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/title\",",
													"                        \"type\": \"string\"",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        ]",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Чтобы устройство успело попасть на дашборд",
													"setTimeout(function(){}, [5000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections?includeItems=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создаем LOCATION_LIST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    postman.setEnvironmentVariable (\"item_id\", responseBody);   ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"123\",\n    \"parentId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов доступных для добавления.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка полей type, houseId и location\",  () => {",
													"        var i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info).to.be.a('object');",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                postman.setEnvironmentVariable (\"ID_dashboards\", pm.response.json()[i].id);  ",
													"            }",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                postman.setEnvironmentVariable (\"ID_dashboards_device\", pm.response.json()[i].id); ",
													"                postman.setEnvironmentVariable (\"ID_dashboards_item1\", pm.response.json()[i].innerItems[0].id);",
													"                postman.setEnvironmentVariable (\"ID_dashboards_item2\", pm.response.json()[i].innerItems[1].id);",
													"                postman.setEnvironmentVariable (\"deviceId\", pm.response.json()[i].innerItems[0].info.deviceId);",
													"                postman.setEnvironmentVariable (\"deviceId2\", pm.response.json()[i].innerItems[1].info.deviceId);",
													"            }",
													"            i++;",
													"        }",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение положения общего выключателя секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"setTimeout(function(){}, [500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"position\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "(1) off Выключаем переключатель у первого устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}/props/{{propertyId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"{{generatedNodeId}}",
												"props",
												"{{propertyId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление списка Id внутренних элементов во всех присланных LOCATION_LISTs (удаление одного итема)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Чтобы платформа успела переключить канал",
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка полей houseId, sectionId , sectionType, innerItems.id, innerItems.type и innerItems.defaultSectionType\",  () => {",
													"        for(let i in pm.response.json()){            ",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"            pm.expect(pm.response.json()[i].sectionId).to.equal(pm.environment.get(\"LIGHT_id\"));",
													"            pm.expect(pm.response.json()[i].sectionType).to.equal(\"LIGHT\");",
													"            for(let j in (pm.response.json()[i].innerItems)){",
													"                pm.expect(pm.response.json()[i].innerItems[j].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"                pm.expect(pm.response.json()[i].innerItems[j].type).to.equal(\"PROPERTY\");",
													"                pm.expect(pm.response.json()[i].innerItems[j].defaultSectionType).to.equal(\"LIGHT\");",
													"            }",
													"        }",
													"    });",
													"    pm.test(\"Проверка значения generalSwitch\",  () => {",
													"        for(let i in pm.response.json()){           ",
													"            pm.expect(pm.response.json()[i].generalSwitch.position).to.equal(false);",
													"            pm.expect(pm.response.json()[i].generalSwitchPosition).to.equal(false);",
													"        }",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"info\",",
													"                \"sectionId\",",
													"                \"sectionType\",",
													"                \"innerItems\",",
													"                \"generalSwitch\",",
													"                \"generalSwitchPosition\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"title\": {",
													"                    \"type\": \"null\"",
													"                },",
													"                \"info\": {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"houseId\",",
													"                        \"location\"",
													"                    ],",
													"                    \"additionalProperties\": true,",
													"                    \"properties\": {",
													"                        \"houseId\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"location\": {",
													"                            \"type\": \"string\"",
													"                        }",
													"                    }",
													"                },",
													"                \"sectionId\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"sectionType\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"innerItems\": {",
													"                    \"type\": \"array\",",
													"                    \"additionalItems\": true,",
													"                    \"items\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"id\",",
													"                            \"type\",",
													"                            \"originId\",",
													"                            \"defaultSectionType\",",
													"                            \"title\",",
													"                            \"info\",",
													"                            \"sectionIds\"",
													"                        ],",
													"                        \"additionalProperties\": true,",
													"                        \"properties\": {",
													"                            \"id\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"type\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"originId\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"defaultSectionType\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"title\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"info\": {",
													"                                \"type\": \"object\",",
													"                                \"required\": [",
													"                                    \"deviceId\",",
													"                                    \"propertyId\",",
													"                                    \"nodeId\",",
													"                                    \"controllerId\",",
													"                                    \"houseId\",",
													"                                    \"deviceTitle\"",
													"                                ],",
													"                                \"additionalProperties\": true,",
													"                                \"properties\": {",
													"                                    \"deviceId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"propertyId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"nodeId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"controllerId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"houseId\": {",
													"                                        \"type\": \"string\"",
													"                                    },",
													"                                    \"deviceTitle\": {",
													"                                        \"type\": \"string\"",
													"                                    }",
													"                                }",
													"                            },",
													"                            \"sectionIds\": {",
													"                                \"type\": \"array\",",
													"                                \"additionalItems\": true,",
													"                                \"items\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            }",
													"                        }",
													"                    }",
													"                },",
													"                \"generalSwitch\": {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"position\"",
													"                    ],",
													"                    \"additionalProperties\": true,",
													"                    \"properties\": {",
													"                        \"position\": {",
													"                            \"type\": \"boolean\"",
													"                        }",
													"                    }",
													"                },",
													"                \"generalSwitchPosition\": {",
													"                    \"type\": \"boolean\"",
													"                }",
													"            }",
													"        }",
													"    };",
													"     ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"    setTimeout(function(){}, [1000]);",
													"}",
													"catch(e){",
													"    console.log(e)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"{{ID_dashboards_device}}\",\n        \"innerItemsId\": [\n            \"{{ID_dashboards_item1}}\"\n        ]\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "(общ) Получение текущего положения общего выключателя для секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"    pm.test(\"The position is correct\", function () {",
													"        pm.expect(pm.response.json().position).to.equal(false);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "(LOCATION_LIST)Получение текущего положения общего выключателя для LOCATION_LIST Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The position is correct\", function () {",
													"    pm.expect(pm.response.json().position).to.equal(false);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items/{{ID_dashboards_device}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items",
												"{{ID_dashboards_device}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var schema = {",
													"    \"type\": \"array\",",
													"    \"additionalItems\": true,",
													"    \"items\": {",
													"        \"anyOf\": [",
													"            {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"id\",",
													"                    \"type\",",
													"                    \"title\",",
													"                    \"info\",",
													"                    \"innerItems\",",
													"                    \"generalSwitch\",",
													"                    \"entity\"",
													"                ],",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"type\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"title\": {",
													"                    },",
													"                    \"info\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"houseId\",",
													"                            \"location\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"houseId\": {",
													"                                \"type\": \"string\"",
													"                            },",
													"                            \"location\": {",
													"                                \"type\": \"string\"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    },",
													"                    \"innerItems\": {",
													"                        \"type\": \"array\",",
													"                        \"additionalItems\": true,",
													"                        \"items\": {",
													"                        }",
													"                    },",
													"                    \"generalSwitch\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"position\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"position\": {",
													"                                \"type\": \"boolean\"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    },",
													"                    \"entity\": {",
													"                        \"type\": \"object\",",
													"                        \"required\": [",
													"                            \"locationTitle\"",
													"                        ],",
													"                        \"properties\": {",
													"                            \"locationTitle\": {",
													"                                \"type\": \"string\"",
													"                            }",
													"                        },",
													"                        \"additionalProperties\": true",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        ]",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"    var JsoneData=JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"проверка полей type, houseId, location, id, а также количество элементов локации по умолчанию (innerItems.length) и id элемента\",  () => {",
													"    let i = 0;    ",
													"    while(i < pm.response.json().length ){",
													"        pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"        pm.expect(pm.response.json()[i].info).to.be.a('object');",
													"        pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"        if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"            pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"            pm.expect(pm.response.json()[i].id).to.equal(pm.environment.get(\"ID_dashboards\"));  ",
													"        }",
													"",
													"        if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"            pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);",
													"            pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"        }",
													"        i++;",
													"    }       ",
													"",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение положения общего выключателя секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"position\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на обновление локации у группы устройств",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"setTimeout(function(){}, [1000]); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cameraIds\": [],\n    \"deviceIds\": [\n        \"{{deviceId}}\",\n        \"{{deviceId2}}\"\n    ],\n    \"locationId\": \"{{item_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов доступных для добавления.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"проверка полей type, houseId, location, deviceId, innerItems[0].id, а также проверка количества элементов в локации по умолчанию (innerItems.length)\",  () => {",
													"        var i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                pm.expect(pm.response.json()[i].innerItems[0].info.deviceId).to.equal(pm.environment.get(\"deviceId\"));            ",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"                //pm.expect(pm.response.json()[i].innerItems[1].id).to.equal(pm.environment.get(\"ID_dashboards_item2\"));            ",
													"            };",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(0);            ",
													"            };",
													"            i++;",
													"        };",
													"    });",
													"    pm.test(\"проверка значения generalSwitch\",  () => {",
													"        for(let i in pm.response.json()){",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].generalSwitch.position).to.equal(true);",
													"            }",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].generalSwitch.position).to.equal(false);",
													"            }",
													"        }",
													"",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"} "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "(общ) Получение текущего положения общего выключателя для секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The position is correct\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('position');",
													"    pm.expect(pm.response.json().position).to.be.a('boolean');",
													"    pm.expect(pm.response.json().position).to.equal(true);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "(LOCATION_LIST)Получение текущего положения общего выключателя для LOCATION_LIST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The position is correct\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('position');",
													"    pm.expect(pm.response.json().position).to.be.a('boolean');",
													"    pm.expect(pm.response.json().position).to.equal(true);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items/{{ID_dashboards}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items",
												"{{ID_dashboards}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение положения общего выключателя секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"setTimeout(function () { }, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"position\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов доступных для добавления.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"проверка полей type, houseId, location, deviceId, innerItems[0].id, а также проверка количества элементов в локации по умолчанию (innerItems.length)\",  () => {",
													"        var i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                pm.expect(pm.response.json()[i].innerItems[0].info.deviceId).to.equal(pm.environment.get(\"deviceId\"));            ",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"                //pm.expect(pm.response.json()[i].innerItems[1].id).to.equal(pm.environment.get(\"ID_dashboards_item2\"));            ",
													"            };",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(0);            ",
													"            };",
													"            i++;",
													"        };",
													"    });",
													"    pm.test(\"проверка значения generalSwitch\",  () => {",
													"        for(let i in pm.response.json()){",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].generalSwitch.position).to.equal(true);",
													"            }",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].generalSwitch.position).to.equal(false);",
													"            }",
													"        }",
													"    });",
													"    pm.test(\"проверка значения переключателя на устройстах\",  () => {",
													"        for(let i in pm.response.json()){",
													"            for(let j in pm.response.json()[i].innerItems){",
													"                pm.expect(pm.response.json()[i].innerItems[j].entity.value).to.eql(\"true\");",
													"            }",
													"        }",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"} "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение положения общего выключателя секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"setTimeout(function () { }, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"position\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение положения общего выключателя секции. Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"setTimeout(function () { }, [1000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [1000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"position\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка наличия и корректности событий о переключении в журнале событий",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var time_from = Math.round(Date.now()/1000.0)",
													"console.log(time_from);",
													"pm.environment.set(\"time_from\", time_from);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"        ",
													"",
													"pm.test(\"Проверка наличия и корректности событий о переключении в журнале событий\",  () => {",
													"    var first_device_on_off = \"off\"; //Так как последним действием было включение общего выключателя секции",
													"    var second_device_on_off = \"off\";",
													"",
													"    var i = 0;",
													"    // Проверка заключается в том, что  выключенный переключатель не может выключится, а включенный включится",
													"    while(i < pm.response.json().data.length ){",
													"        if ((pm.response.json().data[i].message.includes(\"на SW_RLY01\") === true )&&(pm.response.json().data[i].message.includes(\"выключил канал 1\") === true ) ){",
													"            pm.expect(first_device_on_off).to.eql(\"on\")",
													"            first_device_on_off = \"off\";                        ",
													"        }",
													"        else if ((pm.response.json().data[i].message.includes(\"на SW_RLY01\") === true )&&(pm.response.json().data[i].message.includes(\"включил канал 1\") === true ) ){",
													"            pm.expect(first_device_on_off).to.eql(\"off\");",
													"            first_device_on_off = \"on\";            ",
													"        }",
													"        else if ((pm.response.json().data[i].message.includes(\"на SW_RLY01\") === true )&&(pm.response.json().data[i].message.includes(\"выключил канал 2\") === true ) ){",
													"            pm.expect(second_device_on_off).to.eql(\"on\");",
													"            second_device_on_off = \"off\";            ",
													"        }",
													"        else if ((pm.response.json().data[i].message.includes(\"на SW_RLY01\") === true )&&(pm.response.json().data[i].message.includes(\"включил канал 2\") === true ) ){",
													"            pm.expect(second_device_on_off).to.eql(\"off\");",
													"            second_device_on_off = \"on\";            ",
													"        }",
													"        i++;",
													"    }",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/events/endless?limit=50&offset=0&from={{time_from}}&language=ru",
											"host": [
												"{{host}}"
											],
											"path": [
												"events",
												"endless"
											],
											"query": [
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "from",
													"value": "{{time_from}}"
												},
												{
													"key": "language",
													"value": "ru"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Добавить ошибку на удаление группы с итемом",
					"item": [
						{
							"name": "Запрос на обновление локации у устройства через карточку устройств",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"setTimeout(function(){}, [1000]); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"{{generatedNodeId}}\",\n    \"title\": \"SW_RLY01_1\",\n    \"deviceLocation\": [],\n    \"disabled\": false,\n    \"muted\": false,\n    \"networkAddress\": \"\",\n    \"password\": \"\",\n    \"serial\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{controllerId}}/devices/{{generatedNodeId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{controllerId}}",
										"devices",
										"{{generatedNodeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление списка Id внутренних элементов во всех присланных LOCATION_LISTs (один итем в созданную локацию)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [50]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"",
											"    var schema = {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"title\",",
											"                \"info\",",
											"                \"sectionId\",",
											"                \"sectionType\",",
											"                \"innerItems\",",
											"                \"generalSwitch\",",
											"                \"generalSwitchPosition\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"title\": {",
											"                    \"type\": \"null\"",
											"                },",
											"                \"info\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"houseId\",",
											"                        \"location\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"houseId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"location\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    }",
											"                },",
											"                \"sectionId\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"sectionType\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"innerItems\": {",
											"                    \"type\": \"array\",",
											"                    \"additionalItems\": true,",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"id\",",
											"                            \"type\",",
											"                            \"originId\",",
											"                            \"defaultSectionType\",",
											"                            \"title\",",
											"                            \"info\",",
											"                            \"sectionIds\"",
											"                        ],",
											"                        \"additionalProperties\": true,",
											"                        \"properties\": {",
											"                            \"id\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"type\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"originId\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"defaultSectionType\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"title\": {",
											"                                \"type\": \"string\"",
											"                            },",
											"                            \"info\": {",
											"                                \"type\": \"object\",",
											"                                \"required\": [",
											"                                    \"deviceId\",",
											"                                    \"propertyId\",",
											"                                    \"nodeId\",",
											"                                    \"controllerId\",",
											"                                    \"houseId\",",
											"                                    \"deviceTitle\"",
											"                                ],",
											"                                \"additionalProperties\": true,",
											"                                \"properties\": {",
											"                                    \"deviceId\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"propertyId\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"nodeId\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"controllerId\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"houseId\": {",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"deviceTitle\": {",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                }",
											"                            },",
											"                            \"sectionIds\": {",
											"                                \"type\": \"array\",",
											"                                \"additionalItems\": true,",
											"                                \"items\": {",
											"                                    \"type\": \"string\"",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                },",
											"                \"generalSwitch\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"position\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"position\": {",
											"                            \"type\": \"boolean\"",
											"                        }",
											"                    }",
											"                },",
											"                \"generalSwitchPosition\": {",
											"                    \"type\": \"boolean\"",
											"                }",
											"            }",
											"        }",
											"    };",
											"     ",
											"    pm.test('Schema is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"    setTimeout(function(){}, [1000]);",
											"}",
											"catch(e){",
											"    console.log(e)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": \"{{ID_dashboards_device}}\",\n        \"innerItemsId\": [\n            \"{{ID_dashboards_item1}}\"\n        ]\n    },\n    {\n        \"id\": \"{{ID_dashboards}}\",\n        \"innerItemsId\": [\n            \"{{ID_dashboards_item2}}\"\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
									"host": [
										"{{host}}"
									],
									"path": [
										"dashboards",
										"{{houseId}}",
										"sections",
										"{{LIGHT_id}}",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление группы. При выставленном checkEmptyGroups = true если у групп ytn устройств и итемов на дашборде, то выдается Exception",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"pm.test(\"The message is correct\",  () => {",
											"    function deepEqual (obj1, obj2){",
											"        return JSON.stringify(obj1) === JSON.stringify(obj2);",
											"    }",
											"    var message = {",
											"    \"message\": \"RemoveEmptyHouseGroupException. HouseGroup has no devices or cameras, but used on dashboard in sections: [LIGHT]\"",
											"};",
											"",
											"pm.expect(deepEqual(message,pm.response.json())).to.be.true;",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/houses/{{houseId}}/groups/{{item_id}}?checkEmptyGroups=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"houses",
										"{{houseId}}",
										"groups",
										"{{item_id}}"
									],
									"query": [
										{
											"key": "checkEmptyGroups",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос итемов секции.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"проверка количества возвращаемых локаций, а также полей type, info, houseId, и количества элементов а массиве innerItems каждой локации\",  () => {",
											"    pm.expect(pm.response.json().length).to.equal(2);",
											"    var i = 0;",
											"    while(i < pm.response.json().length ){",
											"        pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
											"        pm.expect(pm.response.json()[i].info).to.be.a('object');",
											"        pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
											"",
											"        if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
											"            pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);           ",
											"        };",
											"        if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
											"            pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);                         ",
											"        };",
											"        i++;",
											"    };   ",
											"",
											"});",
											"",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
									"host": [
										"{{host}}"
									],
									"path": [
										"dashboards",
										"{{houseId}}",
										"sections",
										"{{LIGHT_id}}",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Освещение",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"    var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Добавление MQTT устройства",
							"item": [
								{
									"name": "Узнать id контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=1&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "1"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получить логин и пароль для устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавить mqtt устройство методом сопряжения.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
													"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
													"        pm.expect(pm.response.json().title).to.include(\"SW_RLY01\");",
													"        pm.expect(pm.response.json().muted).to.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.eql(false);",
													"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
													"    });",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"deviceType\",",
													"            \"houseId\",",
													"            \"nodeId\",",
													"            \"controllerId\",",
													"            \"title\",",
													"            \"muted\",",
													"            \"disabled\",",
													"            \"networkAddress\",",
													"            \"password\",",
													"            \"serial\",",
													"            \"status\",",
													"            \"deviceLocation\",",
													"            \"lastActivity\",",
													"            \"version\",",
													"            \"channels\",",
													"            \"actions\",",
													"            \"configs\",",
													"            \"settings\",",
													"            \"classType\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"deviceType\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"houseId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"nodeId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"controllerId\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"muted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"disabled\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"networkAddress\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"password\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"serial\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"status\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"deviceLocation\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"lastActivity\": {",
													"                \"type\": \"number\"",
													"            },",
													"            \"version\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"channels\": {",
													"                \"type\": \"object\",",
													"                \"required\": [],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {}",
													"            },",
													"            \"actions\": {",
													"                \"type\": \"object\",",
													"                \"required\": [],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {}",
													"            },",
													"            \"configs\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {}",
													"            },",
													"            \"settings\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"className\",",
													"                    \"macAddress\",",
													"                    // \"ssid\",",
													"                    \"manufacturerId\",",
													"                    \"productId\",",
													"                    \"productTypeId\"",
													"                ],",
													"                \"additionalProperties\": true,",
													"                \"properties\": {",
													"                    \"className\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"macAddress\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    // \"ssid\": {",
													"                    //     \"type\": \"null\"",
													"                    // },",
													"                    \"manufacturerId\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"productId\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"productTypeId\": {",
													"                        \"type\": \"string\"",
													"                    }",
													"                }",
													"            },",
													"            \"classType\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"        var jsonData = JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"console.log(Date.now())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"SW_RLY01\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на симулятор (добавление устройства)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{mqtt_sim_host}}/add_node/{{generatedNodeId}}?brokerLogin={{generatedBrokerLogin}}&brokerPassword={{generatedBrokerPassword}}&brokerURL={{brokerURL}}&device_type=SW-RLY01",
											"host": [
												"{{mqtt_sim_host}}"
											],
											"path": [
												"add_node",
												"{{generatedNodeId}}"
											],
											"query": [
												{
													"key": "brokerLogin",
													"value": "{{generatedBrokerLogin}}"
												},
												{
													"key": "brokerPassword",
													"value": "{{generatedBrokerPassword}}"
												},
												{
													"key": "brokerURL",
													"value": "{{brokerURL}}"
												},
												{
													"key": "device_type",
													"value": "SW-RLY01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события добавления устройства Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_deviceInfo.controllerId={{controllerId}}&C_type=DEVICE_ADD&timeout=180000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.controllerId",
													"value": "{{controllerId}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_ADD"
												},
												{
													"key": "timeout",
													"value": "180000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Освещение",
							"item": [
								{
									"name": "Получение всех секций пользователя.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"// var i = 0;",
													"for(let i in jsonData){",
													"    console.log(jsonData[i].sectionType)",
													"    if (jsonData[i].sectionType ==  \"LIGHT\") {",
													"        pm.environment.set(\"LIGHT_id\", jsonData[i].id);",
													"        pm.environment.set(\"nodeId\", jsonData[i].items[0].innerItems[0].info.nodeId);",
													"    };",
													"    if (jsonData[i].sectionType ==  \"GUARD\") {",
													"        pm.environment.set(\"GUARD_id\", jsonData[i].id);",
													"    };",
													"    if (jsonData[i].sectionType ==  \"CAMERAS\") {",
													"        pm.environment.set(\"CAMERAS_id\", jsonData[i].id);",
													"    };",
													"    if (jsonData[i].sectionType ==  \"CLIMATE\"){ ",
													"        pm.environment.set(\"CLIMATE_id\", jsonData[i].id);",
													"        pm.environment.set(\"Climate_list_without_group\", jsonData[i].items[0].id);",
													"    };",
													"    if (jsonData[i].sectionType ==  \"COMFORT\"){",
													"        pm.environment.set(\"COMFORT_id\", jsonData[i].id);",
													"    };",
													"}",
													"",
													"var schema = {",
													"    \"type\": \"array\",",
													"    \"additionalItems\": true,",
													"    \"items\": {",
													"        \"$id\": \"#/items\",",
													"        \"anyOf\": [",
													"            {",
													"                \"$id\": \"#/items/anyOf/0\",",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"generalSwitch\",",
													"                    \"hide\",",
													"                    \"id\",",
													"                    \"items\",",
													"                    \"sectionType\",",
													"                    \"title\"",
													"                ],",
													"                \"properties\": {",
													"                    \"generalSwitch\": {",
													"",
													"                    },",
													"                    \"hide\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/hide\",",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"id\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/id\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"items\": {},",
													"                    \"sectionType\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/sectionType\",",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"title\": {",
													"                        \"$id\": \"#/items/anyOf/0/properties/title\",",
													"                        \"type\": \"string\"",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        ]",
													"    }",
													"};",
													"     ",
													"pm.test('Schema is valid', function () {",
													"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Иначе устройство не успевает попадать на дашборд",
													"setTimeout(function(){}, [3000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections?includeItems=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользовательской секции на дашборд.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"ID_dashboards\", jsonData.id);  ",
													"pm.environment.set(\"sectionType\", jsonData.sectionType);  ",
													"",
													"var schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"generalSwitch\",",
													"        \"hide\",",
													"        \"id\",",
													"        \"itemIds\",",
													"        \"sectionType\",",
													"        \"title\"",
													"    ],",
													"    \"properties\": {",
													"        \"generalSwitch\": {",
													"            \"$id\": \"#/properties/generalSwitch\",",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"position\"",
													"            ],",
													"            \"properties\": {",
													"                \"position\": {",
													"                    \"$id\": \"#/properties/generalSwitch/properties/position\",",
													"                    \"type\": \"boolean\"",
													"                }",
													"            },",
													"            \"additionalProperties\": true",
													"        },",
													"        \"hide\": {",
													"            \"$id\": \"#/properties/hide\",",
													"            \"type\": \"boolean\"",
													"        },",
													"        \"id\": {",
													"            \"$id\": \"#/properties/id\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"itemIds\": {",
													"        },",
													"        \"sectionType\": {",
													"            \"$id\": \"#/properties/sectionType\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"title\": {",
													"            \"$id\": \"#/properties/title\",",
													"            \"type\": \"string\"",
													"        }",
													"    },",
													"    \"additionalProperties\": true",
													"};",
													"     ",
													"",
													"pm.test('Schema is valid', function () {",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"generalSwitch\": {\n    \"position\": true\n  },\n  \"hide\": false,\n  \"id\": \"123stringCUSTOM\",\n  \"itemIds\": [\n    \n  ],\n  \"sectionType\": \"CUSTOM\",\n  \"title\": \"string\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение всех секций пользователя. (includeItems=false)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка добавления пользоваельской секции (количесетво секций и их id)\", function () {",
													"        pm.expect(pm.response.json().length).to.eql(6)",
													"        for(let i in pm.response.json()){",
													"            switch (pm.response.json()[i].sectionType) {",
													"            case \"LIGHT\":",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"LIGHT_id\"));                         ",
													"                break;",
													"            case \"CUSTOM\":",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"ID_dashboards\"));                         ",
													"                break;",
													"            case \"GUARD\":",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"GUARD_id\"));                         ",
													"                break;",
													"            case \"CAMERAS\":",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"CAMERAS_id\"));                         ",
													"                break;",
													"            case \"CLIMATE\":",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"CLIMATE_id\"));                         ",
													"                break;",
													"            case \"COMFORT\":",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"COMFORT_id\"));                         ",
													"                break;",
													"            }",
													"        }",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"sectionType\",",
													"                \"hide\",",
													"                \"generalSwitch\"",
													"            ],",
													"            \"additionalProperties\": true,",
													"            \"properties\": {",
													"                \"id\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"title\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"sectionType\": {",
													"                    \"type\": \"string\"",
													"                },",
													"                \"hide\": {",
													"                    \"type\": \"boolean\"",
													"                },",
													"                \"generalSwitch\": {",
													"                    \"type\": [",
													"                        \"object\",",
													"                        \"null\"",
													"                    ],",
													"                    \"required\": [",
													"                        \"position\"",
													"                    ],",
													"                    \"additionalProperties\": true,",
													"                    \"properties\": {",
													"                        \"position\": {",
													"                            \"type\": \"boolean\"",
													"                        }",
													"                    }",
													"                }",
													"            }",
													"        }",
													"    };",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [1500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"generalSwitch\": {\n    \"position\": true\n  },\n  \"hide\": false,\n  \"id\": \"123stringCUSTOM\",\n  \"itemIds\": [\n    \n  ],\n  \"sectionType\": \"CUSTOM\",\n  \"title\": \"string\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections?includeItems=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление порядка секций.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {    ",
													"    pm.test(\"Проверка количества элементов, проверка поля order и id всех элементов\", function () {",
													"        pm.expect(pm.response.json().length).to.eql(6)",
													"        for(let i in pm.response.json()){",
													"            switch (pm.response.json()[i].order) {",
													"            case 0:",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"ID_dashboards\"));                         ",
													"                break;",
													"            case 1:",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"LIGHT_id\"));                         ",
													"                break;",
													"            case 2:",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"COMFORT_id\"));                         ",
													"                break;",
													"            case 3:",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"GUARD_id\"));                         ",
													"                break;",
													"            case 4:",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"CAMERAS_id\"));                         ",
													"                break;",
													"            case 5:",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.environment.get(\"CLIMATE_id\"));                         ",
													"                break;",
													"            }",
													"        }",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"$id\": \"#/items\",",
													"            \"anyOf\": [",
													"                {",
													"                    \"$id\": \"#/items/anyOf/0\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"generalSwitch\",",
													"                        \"hide\",",
													"                        \"id\",",
													"                        \"itemIds\",",
													"                        \"sectionType\",",
													"                        \"title\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"generalSwitch\": {},",
													"                        \"hide\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/hide\",",
													"                            \"type\": \"boolean\"",
													"                        },",
													"                        \"id\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/id\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"itemIds\": {},",
													"                        \"sectionType\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/sectionType\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/title\",",
													"                            \"type\": \"string\"",
													"                        }",
													"                    },",
													"                    \"additionalProperties\": true",
													"                }",
													"            ]",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"{{ID_dashboards}}\",\n    \"{{LIGHT_id}}\",\n    \"{{COMFORT_id}}\",\n    \"{{GUARD_id}}\",\n    \"{{CAMERAS_id}}\",\n    \"{{CLIMATE_id}}\"\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"The dashboards id is correct\", function () {",
													"        pm.expect(pm.response.json()).to.have.property('id');",
													"        pm.expect(pm.response.json().id).to.be.a('string');",
													"        pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"ID_dashboards\"));",
													"    });",
													"",
													"    pm.test(\"The sectionType is correct\", function () {",
													"        pm.expect(pm.response.json()).to.have.property('sectionType');",
													"        pm.expect(pm.response.json().sectionType).to.be.a('string');",
													"        pm.expect(pm.response.json().sectionType).to.equal(pm.environment.get(\"sectionType\"));",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"sectionType\",",
													"            \"hide\",",
													"            \"items\",",
													"            \"generalSwitch\"",
													"        ],",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"sectionType\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"hide\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"items\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {",
													"                }",
													"            },",
													"            \"generalSwitch\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"position\"",
													"                ],",
													"                \"properties\": {",
													"                    \"position\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        },",
													"        \"additionalProperties\": true",
													"    };",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{ID_dashboards}}?includeItems=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{ID_dashboards}}"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление полей секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"new_title\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{ID_dashboards}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{ID_dashboards}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение секции. (проверка смены имени)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"The data (title) is correct\", function () {",
													"        pm.expect(pm.response.json()).to.have.property('sectionType');",
													"        pm.expect(pm.response.json().sectionType).to.be.a('string');",
													"        pm.expect(pm.response.json().sectionType).to.equal(pm.environment.get(\"sectionType\"));",
													"        pm.expect(pm.response.json().title).to.equal(\"new_title\");",
													"    });",
													"",
													"    var schema =  {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"sectionType\",",
													"            \"hide\",",
													"            \"items\",",
													"            \"generalSwitch\"",
													"        ],",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"title\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"sectionType\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"hide\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"items\": {",
													"                \"type\": \"array\",",
													"                \"additionalItems\": true,",
													"                \"items\": {",
													"                }",
													"            },",
													"            \"generalSwitch\": {",
													"                \"type\": \"object\",",
													"                \"required\": [",
													"                    \"position\"",
													"                ],",
													"                \"properties\": {",
													"                    \"position\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"additionalProperties\": true",
													"            }",
													"        },",
													"        \"additionalProperties\": true",
													"    };",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{ID_dashboards}}?includeItems=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{ID_dashboards}}"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление пользовательской секции",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{ID_dashboards}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{ID_dashboards}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение положения общего выключателя секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"position\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение текущего положения общего выключателя для секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"    pm.test(\"The position is correct\", function () {",
													"        pm.expect(pm.response.json()).to.have.property('position');",
													"        pm.expect(pm.response.json().position).to.be.a('boolean');",
													"        pm.expect(pm.response.json().position).to.equal(true);",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создаем LOCATION_LIST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    postman.setEnvironmentVariable (\"item_id\", responseBody); ",
													"",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"123\",\n    \"parentId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses/{{houseId}}/groups",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses",
												"{{houseId}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов доступных для добавления.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"    pm.test(\"проверка полей type, houseId и location\",  () => {",
													"        var i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                postman.setEnvironmentVariable (\"ID_dashboards\", pm.response.json()[i].id);  ",
													"            }",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                postman.setEnvironmentVariable (\"ID_dashboards_device\", pm.response.json()[i].id); ",
													"                postman.setEnvironmentVariable (\"ID_dashboards_item1\", pm.response.json()[i].innerItems[0].id);",
													"                postman.setEnvironmentVariable (\"ID_dashboards_item2\", pm.response.json()[i].innerItems[1].id);",
													"                postman.setEnvironmentVariable (\"deviceId\", pm.response.json()[i].innerItems[0].info.deviceId);",
													"                postman.setEnvironmentVariable (\"deviceId2\", pm.response.json()[i].innerItems[1].info.deviceId);",
													"            }",
													"            i++",
													"        }",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"suitable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление списка Id внутренних элементов во всех присланных LOCATION_LISTs (удаление одного итема)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [50]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка количества элементов в секции (должно быть 1) и eго id\", function () {",
													"        pm.expect(pm.response.json()[0].innerItems.length).to.equal(1);",
													"        pm.expect(pm.response.json()[0].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"    });",
													"}",
													"catch(e){",
													"    console.log(e)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"{{ID_dashboards_device}}\",\n        \"innerItemsId\": [\n            \"{{ID_dashboards_item1}}\"\n        ]\n    }\n]\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка полей type, houseId, location, а также количесвто и id элементов группы по умолчанию\",  () => {",
													"        let i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                pm.expect(pm.response.json()[i].id).to.equal(pm.environment.get(\"ID_dashboards\"));  ",
													"            };",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"            };",
													"            i++;",
													"        }       ",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"anyOf\": [",
													"                {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"id\",",
													"                        \"type\",",
													"                        \"title\",",
													"                        \"info\",",
													"                        \"innerItems\",",
													"                        \"generalSwitch\",",
													"                        \"entity\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"id\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"type\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                        },",
													"                        \"info\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"houseId\",",
													"                                \"location\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"houseId\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"location\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        },",
													"                        \"innerItems\": {",
													"                            \"type\": \"array\",",
													"                            \"additionalItems\": true,",
													"                            \"items\": {",
													"                            }",
													"                        },",
													"                        \"generalSwitch\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"position\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"position\": {",
													"                                    \"type\": \"boolean\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        },",
													"                        \"entity\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"locationTitle\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"locationTitle\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        }",
													"                    },",
													"                    \"additionalProperties\": true",
													"                }",
													"            ]",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос локаций указанной секции админом или инженером техподдержки.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка полей type, houseId, location, а также количесвто и id элементов группы по умолчанию\",  () => {",
													"        let i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                pm.expect(pm.response.json()[i].id).to.equal(pm.environment.get(\"ID_dashboards\"));  ",
													"            };",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"            };",
													"            i++;",
													"        }       ",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"anyOf\": [",
													"                {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"id\",",
													"                        \"type\",",
													"                        \"title\",",
													"                        \"info\",",
													"                        \"innerItems\",",
													"                        \"generalSwitch\",",
													"                        \"entity\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"id\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"type\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                        },",
													"                        \"info\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"houseId\",",
													"                                \"location\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"houseId\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"location\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        },",
													"                        \"innerItems\": {",
													"                            \"type\": \"array\",",
													"                            \"additionalItems\": true,",
													"                            \"items\": {",
													"                            }",
													"                        },",
													"                        \"generalSwitch\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"position\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"position\": {",
													"                                    \"type\": \"boolean\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        },",
													"                        \"entity\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"locationTitle\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"locationTitle\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        }",
													"                    },",
													"                    \"additionalProperties\": true",
													"                }",
													"            ]",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/user/{{id}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"user",
												"{{id}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление списка Id внутренних элементов во всех присланных LOCATION_LISTs (добавление одного итема)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [50]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Проверка количества элементов в секции (должно быть 1) и eго id\", function () {",
													"        for(let i in pm.response.json()){",
													"            if (pm.response.json()[i].id === pm.environment.get(\"ID_dashboards_device\") ){                ",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item2\"));",
													"            }",
													"            else{",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"            }",
													"        }",
													"    });",
													"}",
													"catch(e){",
													"    console.log(e)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"{{ID_dashboards_device}}\",\n        \"innerItemsId\": [\n            \"{{ID_dashboards_item2}}\"\n        ]\n    },\n    {\n        \"id\": \"{{ID_dashboards}}\",\n        \"innerItemsId\": [\n            \"{{ID_dashboards_item1}}\"\n        ]\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение краткой информации секции по типу.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try{",
													"    pm.test(\"Проверка всех полей ответа\", function () {",
													"        pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"LIGHT_id\"));",
													"        pm.expect(pm.response.json().title).to.equal(\"Освещение\");",
													"        pm.expect(pm.response.json().dashboardLocations.length).to.equal(2); ",
													"        for(let i in pm.response.json().dashboardLocations){",
													"            if(pm.response.json().dashboardLocations[i].title === \"123\"){",
													"                pm.expect(pm.response.json().dashboardLocations[i].id).to.equal(pm.environment.get(\"ID_dashboards\"));    ",
													"            }",
													"            else pm.expect(pm.response.json().dashboardLocations[i].id).to.equal(pm.environment.get(\"ID_dashboards_device\"));    ",
													"        };        ",
													"    });",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sectionType/LIGHT",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sectionType",
												"LIGHT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос между секциями",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"The message is correct\",  () => {",
													"    function deepEqual (obj1, obj2){",
													"        return JSON.stringify(obj1) === JSON.stringify(obj2);",
													"    }",
													"    var message = {",
													"    \"message\": \"[[\\\"Can't move DashboardItems between DashboardSection\\\"]]\",",
													"    \"errors\": [",
													"        {",
													"            \"path\": \"patchedLocations\",",
													"            \"errorCode\": \"UpdateDashboardLocationsValidator\"",
													"        }",
													"    ]",
													"};",
													"",
													"pm.expect(deepEqual(message,pm.response.json())).to.be.true;",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"{{Climate_list_without_group}}\",\n        \"innerItemsId\": [\n            \"{{ID_dashboards_item2}}\"\n        ]\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{CLIMATE_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{CLIMATE_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов секции.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"проверка полей type, houseId, location, id, innerItems[0].id\",  () => {",
													"        let i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                pm.expect(pm.response.json()[i].id).to.equal(pm.environment.get(\"ID_dashboards\"));",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item1\"));",
													"            }",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(1);",
													"                pm.expect(pm.response.json()[i].innerItems[0].id).to.equal(pm.environment.get(\"ID_dashboards_item2\"));",
													"            }",
													"            i++;",
													"        }       ",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"anyOf\": [",
													"                {",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"id\",",
													"                        \"type\",",
													"                        \"title\",",
													"                        \"info\",",
													"                        \"innerItems\",",
													"                        \"generalSwitch\",",
													"                        \"entity\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"id\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"type\": {",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                        },",
													"                        \"info\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"houseId\",",
													"                                \"location\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"houseId\": {",
													"                                    \"type\": \"string\"",
													"                                },",
													"                                \"location\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        },",
													"                        \"innerItems\": {",
													"                            \"type\": \"array\",",
													"                            \"additionalItems\": true,",
													"                            \"items\": {",
													"                            }",
													"                        },",
													"                        \"generalSwitch\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"position\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"position\": {",
													"                                    \"type\": \"boolean\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        },",
													"                        \"entity\": {",
													"                            \"type\": \"object\",",
													"                            \"required\": [",
													"                                \"locationTitle\"",
													"                            ],",
													"                            \"properties\": {",
													"                                \"locationTitle\": {",
													"                                    \"type\": \"string\"",
													"                                }",
													"                            },",
													"                            \"additionalProperties\": true",
													"                        }",
													"                    },",
													"                    \"additionalProperties\": true",
													"                }",
													"            ]",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение положения общего выключателя элемента LOCATION_LIST.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"position\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items/{{ID_dashboards}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items",
												"{{ID_dashboards}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение текущего положения общего выключателя для LOCATION_LIST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The position is correct\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('position');",
													"    pm.expect(pm.response.json().position).to.be.a('boolean');",
													"    pm.expect(pm.response.json().position).to.equal(true);",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [300]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/items/{{ID_dashboards}}/switch",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"items",
												"{{ID_dashboards}}",
												"switch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на обновление локации у группы устройств Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"cameraIds\": [\n  ],\n  \"deviceIds\": [\n    \"{{deviceId}}\",\n    \"{{deviceId2}}\"\n  ],\n  \"locationId\": \"{{item_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/devices/changeLocation",
											"host": [
												"{{host}}"
											],
											"path": [
												"devices",
												"changeLocation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос итемов доступных для добавления.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"        pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    pm.test(\"Проверка полей type, houseId, location и количесвто элеметов\",  () => {",
													"        var i = 0;",
													"        while(i < pm.response.json().length ){",
													"            pm.expect(pm.response.json()[i].type).to.equal(\"LOCATION_LIST\");",
													"            pm.expect(pm.response.json()[i].info.houseId).to.equal(pm.environment.get(\"houseId\"));",
													"",
													"            if (pm.response.json()[i].entity.locationTitle === \"123\" ){",
													"                pm.expect(pm.response.json()[i].info.location).to.equal(pm.environment.get(\"item_id\"));",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(2); ",
													"        ",
													"            };",
													"            if (pm.response.json()[i].entity.locationTitle != \"123\" ){",
													"                pm.expect(pm.response.json()[i].innerItems.length).to.equal(0);            ",
													"            };",
													"            i++;",
													"        };   ",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections/{{LIGHT_id}}/suitable",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections",
												"{{LIGHT_id}}",
												"suitable"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Проверка переключения языка в журнале событий",
					"item": [
						{
							"name": "Журнал событий originType=DEVICE language=en",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var time_from = Math.round(Date.now())",
											"console.log(time_from);",
											"pm.environment.set(\"time_from\", time_from);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status is ok, response is json\", function () {",
											"      pm.response.to.be.json; // проверка формата",
											"});",
											"",
											"pm.test(\"Проверка языка ответа (не должно быть русских букв)\",  () => {  ",
											"    var isKyr = function (str) {",
											"        return /[а-я]/i.test(str);",
											"    }",
											"    i = 0;",
											"    while (i < pm.response.json().data.length) {",
											"        for (var key in pm.response.json().data[i]) {            ",
											"            if (typeof(pm.response.json().data[i][key]) == \"string\") pm.expect(isKyr(pm.response.json().data[i][key])).to.be.false;",
											"        }    ",
											"        i++;",
											"    }",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/events/endless?limit=50&offset=0&fromMillis={{time_from}}&language=en&originType=DEVICE",
									"host": [
										"{{host}}"
									],
									"path": [
										"events",
										"endless"
									],
									"query": [
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "fromMillis",
											"value": "{{time_from}}"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "originType",
											"value": "DEVICE"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление",
					"item": [
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code != 400){",
									"    ",
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"if ( pm.response.code == 401){",
									" var schema = { \"required\": [",
									"        \"error\",",
									"        \"error_description\"",
									"    ],",
									"    \"properties\": {",
									"        \"error\": {",
									"            \"$id\": \"#/properties/error\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The error schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"unauthorized\"",
									"            ]",
									"        },",
									"        \"error_description\": {",
									"            \"$id\": \"#/properties/error_description\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The error_description schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Full authentication is required to access this resource\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"",
									"    pm.test('The response scheme for error (401) is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"",
									"}",
									"",
									"if ( pm.response.code == 404){",
									" var schema = {  ",
									"\"required\": [",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"id '7092a4f6-1944-472e-9178-e63a57cf1f66' not found\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"",
									"    pm.test('The response scheme for error (404) is valid', function () {",
									"        var JsoneData=JSON.parse(responseBody);",
									"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
									"    });",
									"}",
									"}",
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ACCESS_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Мониторинг",
			"item": [
				{
					"name": "Включение/исключение устройств в сервисе",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"    var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Подготовить и добавить контроллер",
							"item": [
								{
									"name": "Подготовка контроллера",
									"item": [
										{
											"name": "Параметры контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Настройки применены\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
															"    if(pm.response.code == 400) {",
															"        pm.expect(pm.response.text()).to.include(\"connected\");",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"mac\": \"{{zway_simulate_mac}}\",\n    \"serial\": \"ZWS0000000\",\n    \"version\": \"1.0.0\",\n    \"model\": \"Z-Wave Simulator\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/info",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение типа платформы",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"let isSL10 = pm.response.json().version.includes(\"-b\");",
															"",
															"pm.environment.set (\"ctl_protocol\", isSL10 ? \"glcp\" : \"o7\")",
															"pm.environment.set (\"platform_type\", isSL10 ? \"local\" : \"cloud\")",
															"pm.environment.set (\"keepAlive_timeout\", isSL10 ? 0 : 10000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/version",
													"host": [
														"{{host}}"
													],
													"path": [
														"version"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение информации о платформе",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var sdk = require('postman-collection');",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set (\"ctl_port\", pm.response.json().ctlGatePort)",
															"pm.environment.set (\"ctl_host\", new sdk.Url(pm.globals.get(\"host\")).getHost())"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/info",
													"host": [
														"{{host}}"
													],
													"path": [
														"info"
													]
												}
											},
											"response": []
										},
										{
											"name": "Подключение контроллера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});",
															"// Чтобы платформа успела принять подключение контроллера",
															"setTimeout(function(){}, [200]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"postman.setEnvironmentVariable (\"current_time\", Date.now());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{zway_ctl_host}}/ctl/connect",
													"host": [
														"{{zway_ctl_host}}"
													],
													"path": [
														"ctl",
														"connect"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Добавить контроллер",
									"item": [
										{
											"name": "Подключение к WebSocket (абонент 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, [5000]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"connect"
													],
													"query": [
														{
															"key": "host",
															"value": "{{host_ws}}/event_ws"
														},
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}"
														},
														{
															"key": "subprotocol",
															"value": "SmartHome"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление контроллера.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"postman.setEnvironmentVariable (\"ctl_id\", responseBody);",
															"setTimeout(function(){}, [2500]); ",
															"}",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"postman.setEnvironmentVariable (\"current_time\", Date.now());",
															"console.log(Date.now())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"houseId\": \"{{houseId}}\",\n    \"typeCtl\": \"Z_WAY\",\n    \"settings\": {\n        \"title\": \"zway_simulate\",\n        \"ctlMac\": \"{{zway_simulate_mac}}\",\n        \"offline\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/ctl",
													"host": [
														"{{host}}"
													],
													"path": [
														"ctl"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ожидание события добавления контроллера",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=CONTROLLER_ADD&timeout=180000",
													"host": [
														"{{websocket_proxy_host}}"
													],
													"path": [
														"await"
													],
													"query": [
														{
															"key": "timeFrom",
															"value": "{{current_time}}"
														},
														{
															"key": "C_controllerId",
															"value": "{{ctl_id}}",
															"disabled": true
														},
														{
															"key": "C_type",
															"value": "CONTROLLER_ADD"
														},
														{
															"key": "C_deviceInfo.nodeId",
															"value": "ZWAVE_ELTEX_9",
															"disabled": true
														},
														{
															"key": "timeout",
															"value": "180000"
														},
														{
															"key": "C_newStatus",
															"value": "ONLINE",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Включение устройств в сервисе",
							"item": [
								{
									"name": "Добавления устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"deviceType\": \"Z_WAY_DEVICE\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{ctl_id}}/devices/add",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{ctl_id}}",
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание датчика sz_air_htq01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"template\": \"sz_air_htq01\",\n    \"nodeId\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{zway_ctl_host}}/devices/add",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ожидание события добавления устройства",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&C_nodeId=ZWAVE_ELTEX_10&timeout=180000&C_newStatus=ONLINE",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_controllerId",
													"value": "{{ctl_id}}"
												},
												{
													"key": "C_type",
													"value": "DEVICE_STATUS_CHANGE"
												},
												{
													"key": "C_nodeId",
													"value": "ZWAVE_ELTEX_10"
												},
												{
													"key": "timeout",
													"value": "180000"
												},
												{
													"key": "C_newStatus",
													"value": "ONLINE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка добавления устройства в секцию",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Чтобы устройство успело попасть на дашборд",
													"setTimeout(function(){}, [9000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка наличия устройств на дашборде, а также корректность их аналитики и пропертей\", function () {",
													"        var jsonData = JSON.parse(responseBody);",
													"        var i = 0;",
													"        while (i < pm.response.json().length){",
													"            if (jsonData[i].sectionType ==  \"CLIMATE\") {",
													"                postman.setEnvironmentVariable (\"CLIMATE_id\", jsonData[i].id);",
													"                pm.expect(jsonData[i].items[0].innerItems.length).to.eql(4)",
													"                var kinds = {",
													"                    \"TEMPERATURE\" : 0,",
													"                    \"HUMIDITY\": 0,",
													"                    \"CO2\": 0,",
													"                    \"VOC\": 0",
													"                }",
													"                for(let j in jsonData[i].items[0].innerItems){",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].type).eql(\"PROPERTY\")                    ",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].info.controllerId).eql(pm.environment.get(\"ctl_id\"))",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].info.houseId).eql(pm.environment.get(\"houseId\"))",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.disabled).eql(false)",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.enabled).eql(true)",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.analyticType).eql(\"COMPARISON\")",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.eventsEnabled).to.eql(false)",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.hidden).to.eql(false)",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.deviceStatus).eql(\"ONLINE\")",
													"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.deviceType).eql(\"Z_WAY_DEVICE\")",
													"                    switch (jsonData[i].items[0].innerItems[j].entity.kind) {",
													"                        case \"TEMPERATURE\":                        ",
													"                        {",
													"                            kinds[\"TEMPERATURE\"]++;",
													"                            pm.expect(jsonData[i].items[0].innerItems[j].title).to.include(\"Температура\")                            ",
													"                            // pm.expect(jsonData[i].items[0].innerItems[j].entity.value).eql(\"0\")",
													"                            for(let g in jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits){",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].houseId).eql(pm.environment.get(\"houseId\"))                       ",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].group).eql(\"ClimateTemp\")",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].limit).to.be.oneOf([18.0,28.0])",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].comparison).to.be.oneOf([\"GT\",\"LT\"])",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].levelAlarm).eql(\"WARNING\")",
													"                            }",
													"                            // pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.status).eql(\"ALARM\")",
													"                            break;",
													"                        }",
													"                        case \"HUMIDITY\":                        ",
													"                        {",
													"                            kinds[\"HUMIDITY\"]++;",
													"                            pm.expect(jsonData[i].items[0].innerItems[j].title).to.include(\"Влажность\")                            ",
													"                            // pm.expect(jsonData[i].items[0].innerItems[j].entity.value).eql(\"0\")",
													"                            for(let g in jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits){",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].houseId).eql(pm.environment.get(\"houseId\"))                       ",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].group).eql(\"ClimateHum\")",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].limit).to.be.oneOf([30.0,60.0])",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].comparison).to.be.oneOf([\"GT\",\"LT\"])",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].levelAlarm).eql(\"WARNING\")",
													"                            }",
													"                            // pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.status).eql(\"ALARM\")",
													"                            break;",
													"                        }",
													"                        case \"CO2\":                        ",
													"                        {",
													"                            kinds[\"CO2\"]++;",
													"                            pm.expect(jsonData[i].items[0].innerItems[j].title).to.include(\"Содержание углекислого газа в воздухе\")                            ",
													"                            pm.expect(jsonData[i].items[0].innerItems[j].entity.value).eql(\"0\")",
													"                            for(let g in jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits){",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].houseId).eql(pm.environment.get(\"houseId\"))                       ",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].group).eql(\"ClimateCO2\")",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].limit).to.be.oneOf([0.0,1000.0])",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].comparison).to.be.oneOf([\"GT\",\"LT\"])",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].levelAlarm).eql(\"WARNING\")",
													"                            }",
													"                            pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.status).eql(\"NORMAL\")",
													"                            break;",
													"                        }",
													"                        case \"VOC\":                        ",
													"                        {",
													"                            kinds[\"VOC\"]++;",
													"                            pm.expect(jsonData[i].items[0].innerItems[j].title).to.include(\"Содержание летучих органических веществ в воздухе\")                            ",
													"                            pm.expect(jsonData[i].items[0].innerItems[j].entity.value).eql(\"0\")",
													"                            for(let g in jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits){",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].houseId).eql(pm.environment.get(\"houseId\"))                       ",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].group).eql(\"ClimateVOC\")",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].limit).to.be.oneOf([0.0,1000.0])",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].comparison).to.be.oneOf([\"GT\",\"LT\"])",
													"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].levelAlarm).eql(\"WARNING\")",
													"                            }",
													"                            pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.status).eql(\"NORMAL\")                            ",
													"                            break;",
													"                        }",
													"                    }",
													"                }",
													"            }                ",
													"            i++;",
													"        }",
													"        for(let i in kinds) pm.expect(kinds[i]).eql(1)",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"$id\": \"#/items\",",
													"            \"anyOf\": [",
													"                {",
													"                    \"$id\": \"#/items/anyOf/0\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"generalSwitch\",",
													"                        \"hide\",",
													"                        \"id\",",
													"                        \"items\",",
													"                        \"sectionType\",",
													"                        \"title\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"generalSwitch\": {",
													"",
													"                        },",
													"                        \"hide\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/hide\",",
													"                            \"type\": \"boolean\"",
													"                        },",
													"                        \"id\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/id\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"items\": {},",
													"                        \"sectionType\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/sectionType\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/title\",",
													"                            \"type\": \"string\"",
													"                        }",
													"                    },",
													"                    \"additionalProperties\": true",
													"                }",
													"            ]",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections?includeItems=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Исключение  устройств в сервисе",
							"item": [
								{
									"name": "Удалить устройство",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{ctl_id}}/devices/ZWAVE_ELTEX_10/remove",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{ctl_id}}",
												"devices",
												"ZWAVE_ELTEX_10",
												"remove"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление датчика sz_air_htq01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Датчик присутствует\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
													"    if(pm.response.code == 400) {",
													"        pm.expect(pm.response.text()).to.include(\"already exists\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{zway_ctl_host}}/devices/10",
											"host": [
												"{{zway_ctl_host}}"
											],
											"path": [
												"devices",
												"10"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка исключения устройства из секции",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Чтобы устройство успело попасть на дашборд",
													"setTimeout(function(){}, [9000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Проверка отсутствия устройств на дашборде\", function () {",
													"        var jsonData = JSON.parse(responseBody);",
													"        var i = 0;",
													"        for(let i in jsonData ){",
													"            if(jsonData[i].sectionType === \"CLIMATE\") pm.expect(jsonData[i].items[0].innerItems.length).to.eql(0)",
													"        }",
													"    });",
													"",
													"    var schema = {",
													"        \"type\": \"array\",",
													"        \"additionalItems\": true,",
													"        \"items\": {",
													"            \"$id\": \"#/items\",",
													"            \"anyOf\": [",
													"                {",
													"                    \"$id\": \"#/items/anyOf/0\",",
													"                    \"type\": \"object\",",
													"                    \"required\": [",
													"                        \"generalSwitch\",",
													"                        \"hide\",",
													"                        \"id\",",
													"                        \"items\",",
													"                        \"sectionType\",",
													"                        \"title\"",
													"                    ],",
													"                    \"properties\": {",
													"                        \"generalSwitch\": {",
													"",
													"                        },",
													"                        \"hide\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/hide\",",
													"                            \"type\": \"boolean\"",
													"                        },",
													"                        \"id\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/id\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"items\": {},",
													"                        \"sectionType\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/sectionType\",",
													"                            \"type\": \"string\"",
													"                        },",
													"                        \"title\": {",
													"                            \"$id\": \"#/items/anyOf/0/properties/title\",",
													"                            \"type\": \"string\"",
													"                        }",
													"                    },",
													"                    \"additionalProperties\": true",
													"                }",
													"            ]",
													"        }",
													"    };",
													"        ",
													"    pm.test('Schema is valid', function () {",
													"            var JsoneData=JSON.parse(responseBody);",
													"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/dashboards/{{houseId}}/sections?includeItems=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"dashboards",
												"{{houseId}}",
												"sections"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Проверка пропертей и устройств попавших в сервис",
					"item": [
						{
							"name": "Подключение к WebSocket (абонент 1) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [5000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"connect"
									],
									"query": [
										{
											"key": "host",
											"value": "{{host_ws}}/event_ws"
										},
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}"
										},
										{
											"key": "subprotocol",
											"value": "SmartHome"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавления устройства",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"deviceType\": \"Z_WAY_DEVICE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/ctl/{{ctl_id}}/devices/add",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{ctl_id}}",
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание датчика sz_air_htq01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template\": \"sz_air_htq01\",\n    \"nodeId\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/add",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ожидание события добавления устройства",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_controllerId={{ctl_id}}&C_type=DEVICE_STATUS_CHANGE&C_nodeId=ZWAVE_ELTEX_10&timeout=180000&C_newStatus=ONLINE",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"await"
									],
									"query": [
										{
											"key": "timeFrom",
											"value": "{{current_time}}"
										},
										{
											"key": "C_controllerId",
											"value": "{{ctl_id}}"
										},
										{
											"key": "C_type",
											"value": "DEVICE_STATUS_CHANGE"
										},
										{
											"key": "C_nodeId",
											"value": "ZWAVE_ELTEX_10"
										},
										{
											"key": "timeout",
											"value": "180000"
										},
										{
											"key": "C_newStatus",
											"value": "ONLINE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение от WebSocket",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{websocket_proxy_host}}/disconnect",
									"host": [
										"{{websocket_proxy_host}}"
									],
									"path": [
										"disconnect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка добавления устройства в секцию",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Чтобы устройство успело попасть на дашборд",
											"setTimeout(function(){}, [9000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка наличия устройств на дашборде, а также корректность их аналитики и пропертей\", function () {",
											"        var jsonData = JSON.parse(responseBody);",
											"        var i = 0;",
											"        while (i < pm.response.json().length){",
											"            if (jsonData[i].sectionType ==  \"CLIMATE\") {",
											"                postman.setEnvironmentVariable (\"CLIMATE_id\", jsonData[i].id);",
											"                pm.expect(jsonData[i].items[0].innerItems.length).to.eql(4)",
											"                var kinds = {",
											"                    \"TEMPERATURE\" : 0,",
											"                    \"HUMIDITY\": 0,",
											"                    \"CO2\": 0,",
											"                    \"VOC\": 0",
											"                }",
											"                for(let j in jsonData[i].items[0].innerItems){",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].type).eql(\"PROPERTY\")                    ",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].info.controllerId).eql(pm.environment.get(\"ctl_id\"))",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].info.houseId).eql(pm.environment.get(\"houseId\"))",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.disabled).eql(false)",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.enabled).eql(true)",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.analyticType).eql(\"COMPARISON\")",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.eventsEnabled).to.eql(false)",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.hidden).to.eql(false)",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.deviceStatus).eql(\"ONLINE\")",
											"                    pm.expect(jsonData[i].items[0].innerItems[j].entity.deviceType).eql(\"Z_WAY_DEVICE\")",
											"                    switch (jsonData[i].items[0].innerItems[j].entity.kind) {",
											"                        case \"TEMPERATURE\":                        ",
											"                        {",
											"                            pm.environment.set(\"propertyId_TEMPERATURE\", jsonData[i].items[0].innerItems[j].info.propertyId);",
											"                            kinds[\"TEMPERATURE\"]++;",
											"                            pm.expect(jsonData[i].items[0].innerItems[j].title).to.include(\"Температура\")                            ",
											"                            // pm.expect(jsonData[i].items[0].innerItems[j].entity.value).eql(\"0\")",
											"                            for(let g in jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits){",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].houseId).eql(pm.environment.get(\"houseId\"))                       ",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].group).eql(\"ClimateTemp\")",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].limit).to.be.oneOf([18.0,28.0])",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].comparison).to.be.oneOf([\"GT\",\"LT\"])",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].levelAlarm).eql(\"WARNING\")",
											"                            }",
											"                            // pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.status).eql(\"ALARM\")",
											"                            break;",
											"                        }",
											"                        case \"HUMIDITY\":                        ",
											"                        {",
											"",
											"                            pm.environment.set(\"propertyId\", jsonData[i].items[0].innerItems[j].info.propertyId);",
											"                            pm.environment.set(\"nodeId\", jsonData[i].items[0].innerItems[j].info.nodeId);",
											"                            kinds[\"HUMIDITY\"]++;",
											"                            pm.expect(jsonData[i].items[0].innerItems[j].title).to.include(\"Влажность\")                            ",
											"                            // pm.expect(jsonData[i].items[0].innerItems[j].entity.value).eql(\"0\")",
											"                            for(let g in jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits){",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].houseId).eql(pm.environment.get(\"houseId\"))                       ",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].group).eql(\"ClimateHum\")",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].limit).to.be.oneOf([30.0,60.0])",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].comparison).to.be.oneOf([\"GT\",\"LT\"])",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].levelAlarm).eql(\"WARNING\")",
											"                            }",
											"                            // pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.status).eql(\"ALARM\")",
											"                            break;",
											"                        }",
											"                        case \"CO2\":                        ",
											"                        {",
											"                            kinds[\"CO2\"]++;",
											"                            pm.expect(jsonData[i].items[0].innerItems[j].title).to.include(\"Содержание углекислого газа в воздухе\")                            ",
											"                            pm.expect(jsonData[i].items[0].innerItems[j].entity.value).eql(\"0\")",
											"                            for(let g in jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits){",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].houseId).eql(pm.environment.get(\"houseId\"))                       ",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].group).eql(\"ClimateCO2\")",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].limit).to.be.oneOf([0.0,1000.0])",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].comparison).to.be.oneOf([\"GT\",\"LT\"])",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].levelAlarm).eql(\"WARNING\")",
											"                            }",
											"                            pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.status).eql(\"NORMAL\")",
											"                            break;",
											"                        }",
											"                        case \"VOC\":                        ",
											"                        {",
											"                            kinds[\"VOC\"]++;",
											"                            pm.expect(jsonData[i].items[0].innerItems[j].title).to.include(\"Содержание летучих органических веществ в воздухе\")                            ",
											"                            pm.expect(jsonData[i].items[0].innerItems[j].entity.value).eql(\"0\")",
											"                            for(let g in jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits){",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].houseId).eql(pm.environment.get(\"houseId\"))                       ",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].group).eql(\"ClimateVOC\")",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].limit).to.be.oneOf([0.0,1000.0])",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].comparison).to.be.oneOf([\"GT\",\"LT\"])",
											"                                pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.limits[g].levelAlarm).eql(\"WARNING\")",
											"                            }",
											"                            pm.expect(jsonData[i].items[0].innerItems[j].entity.analytics.COMPARISON.status).eql(\"NORMAL\")                            ",
											"                            break;",
											"                        }",
											"                    }",
											"                }",
											"            }                ",
											"            i++;",
											"        }",
											"        for(let i in kinds) pm.expect(kinds[i]).eql(1)",
											"    });",
											"",
											"    var schema = {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"$id\": \"#/items\",",
											"            \"anyOf\": [",
											"                {",
											"                    \"$id\": \"#/items/anyOf/0\",",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"generalSwitch\",",
											"                        \"hide\",",
											"                        \"id\",",
											"                        \"items\",",
											"                        \"sectionType\",",
											"                        \"title\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"generalSwitch\": {",
											"",
											"                        },",
											"                        \"hide\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/hide\",",
											"                            \"type\": \"boolean\"",
											"                        },",
											"                        \"id\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/id\",",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"items\": {},",
											"                        \"sectionType\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/sectionType\",",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"title\": {",
											"                            \"$id\": \"#/items/anyOf/0/properties/title\",",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"additionalProperties\": true",
											"                }",
											"            ]",
											"        }",
											"    };",
											"        ",
											"    pm.test('Schema is valid', function () {",
											"            var JsoneData=JSON.parse(responseBody);",
											"            pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/dashboards/{{houseId}}/sections?includeItems=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"dashboards",
										"{{houseId}}",
										"sections"
									],
									"query": [
										{
											"key": "includeItems",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Проверка аналитики и графиков",
					"item": [
						{
							"name": "Изменение значения температуры (запрос на симулятор)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var i=pm.collectionVariables.get(\"i\");",
											"    // pm.environment.set(\"current_time\" +i, pm.response.json().updateTime);",
											"    i++;",
											"    pm.collectionVariables.set(\"i\", i);",
											"",
											"    if (i < 10){",
											"        postman.setNextRequest(pm.info.requestId);",
											"    }",
											"    else if (i == 10) {",
											"        pm.collectionVariables.set(\"i\", 0);",
											"    }",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var i = pm.collectionVariables.get(\"i\");",
											"var temperature = (parseInt(i)*parseInt(i)+ 2)/2",
											"pm.environment.set(\"temperature\", temperature);",
											"setTimeout(function(){}, [3000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": {{temperature}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/devices/10/prop/1/temperature",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"10",
										"prop",
										"1",
										"temperature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверить график температуры",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка значений на графике\",  () => {  ",
											"        var j = 0      ",
											"        for(let i in pm.response.json()) {",
											"            var temperature = (j*j+ 2)/2",
											"            j++;",
											"            pm.expect(pm.response.json()[i]).eql(temperature)",
											"        }",
											"    });",
											"}",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{ctl_id}}/devices/{{nodeId}}/props/{{propertyId_TEMPERATURE}}/history?from=0&to=3700240399&detail=1&mode=last",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{ctl_id}}",
										"devices",
										"{{nodeId}}",
										"props",
										"{{propertyId_TEMPERATURE}}",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "to",
											"value": "3700240399"
										},
										{
											"key": "detail",
											"value": "1"
										},
										{
											"key": "mode",
											"value": "last"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Отключение контроллера",
					"item": [
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Отключение контроллера от платформы",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"postman.setEnvironmentVariable (\"current_time\", Date.now());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{ctl_host}}\",\n    \"port\": {{ctl_port}},\n    \"type\": \"{{ctl_protocol}}\",\n    \"allowMultiple\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{zway_ctl_host}}/ctl/disconnect",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"ctl",
										"disconnect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление датчика sz_air_htq01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Датчик присутствует\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 400])",
											"    if(pm.response.code == 400) {",
											"        pm.expect(pm.response.text()).to.include(\"already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{zway_ctl_host}}/devices/10",
									"host": [
										"{{zway_ctl_host}}"
									],
									"path": [
										"devices",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить контроллер",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/ctl/{{ctl_id}}/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"ctl",
										"{{ctl_id}}",
										"remove"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Эквайринг",
			"item": [
				{
					"name": "Контроллер для работы с тарифами (acquiring)",
					"item": [
						{
							"name": "0. получение токена Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"",
											"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body contains access token\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"access_token\");",
											"});",
											"",
											"var admin_js = {",
											"\"required\": [",
											"        \"access_token\",",
											"        \"token_type\",",
											"        \"refresh_token\",",
											"        \"expires_in\",",
											"    ],",
											"    \"properties\": {",
											"        \"access_token\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"token_type\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"refresh_token\": {",
											"            \"type\": \"string\",",
											"        },",
											"        \"expires_in\": {",
											"            \"type\": \"integer\",",
											"        }",
											"    },",
											"    \"additionalProperties\": true",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, admin_js)).to.be.true;",
											"});",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"boolean\"",
											"    }",
											"};",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Test18plat34Form",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/oauth2/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка всех тарифов.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей description, type, status, eventLabelsSupport, durationUnit, cost, а также наличия базовых тарифов (FREE и DEMO)\", function () {",
											"    var FREE_and_DEMO = 0;",
											"    for( let i in  pm.response.json()){              ",
											"        switch (pm.response.json()[i].name){",
											"            case \"Бесплатный тариф\":",
											"                pm.expect(pm.response.json()[i].description).to.eql(\"Тариф по умолчанию, без оплаты и с ограниченной функциональностью\");",
											"                pm.expect(pm.response.json()[i].type).to.eql(\"FREE\");",
											"                pm.expect(pm.response.json()[i].durationUnit).to.eql(\"ENDLESS\");",
											"                pm.expect(pm.response.json()[i].config.eventLabelsSupport).to.eql(false);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrDepth).to.eql(0);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrSpace).to.eql(0);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrLockDays).to.eql(0);",
											"                pm.expect(pm.response.json()[i].cost).to.eql(0.0);",
											"                pm.expect(pm.response.json()[i].status).to.eql(\"ACTUAL\");",
											"",
											"                FREE_and_DEMO++;",
											"                break;",
											"            case \"Пробный период\":",
											"                pm.expect(pm.response.json()[i].description).to.eql(\"Пробный период в течение трех дней с полной функциональностью\");",
											"                pm.expect(pm.response.json()[i].type).to.eql(\"DEMO\");",
											"                pm.expect(pm.response.json()[i].durationUnit).to.eql(\"THREE_DAYS\");",
											"                pm.expect(pm.response.json()[i].config.eventLabelsSupport).to.eql(true);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrDepth).to.eql(3);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrSpace).to.eql(5);",
											"                pm.expect(pm.response.json()[i].config.dvr.dvrLockDays).to.eql(1);",
											"                pm.expect(pm.response.json()[i].cost).to.eql(0.0);",
											"                pm.expect(pm.response.json()[i].status).to.eql(\"ACTUAL\");",
											"                FREE_and_DEMO++",
											"                break;",
											"        }",
											"",
											"    }",
											"    pm.expect(FREE_and_DEMO).to.eql(2);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"additionalItems\": true,",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"name\",",
											"            \"description\",",
											"            \"type\",",
											"            \"status\",",
											"            \"config\",",
											"            \"durationUnit\",",
											"            \"cost\",",
											"            \"dateOfLastUpdate\"",
											"        ],",
											"        \"additionalProperties\": true,",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"config\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"quality\",",
											"                    \"eventLabelsSupport\",",
											"                    \"dvr\",",
											"                    \"status\"",
											"                ],",
											"                \"additionalProperties\": true,",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"quality\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"eventLabelsSupport\": {",
											"                        \"type\": \"boolean\"",
											"                    },",
											"                    \"dvr\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"dvrDepth\",",
											"                            \"dvrSpace\",",
											"                            \"dvrLockDays\"",
											"                        ],",
											"                        \"additionalProperties\": true,",
											"                        \"properties\": {",
											"                            \"dvrDepth\": {",
											"                                \"type\": [",
											"                                    \"null\",",
											"                                    \"integer\"",
											"                                ]",
											"                            },",
											"                            \"dvrSpace\": {",
											"                                \"type\": [",
											"                                    \"null\",",
											"                                    \"integer\"",
											"                                ]",
											"                            },",
											"                            \"dvrLockDays\": {",
											"                                \"type\": [",
											"                                    \"null\",",
											"                                    \"integer\"",
											"                                ]",
											"                            }",
											"                        }",
											"                    },",
											"                    \"status\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"durationUnit\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"cost\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"dateOfLastUpdate\": {",
											"                \"type\": \"number\"",
											"            }",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание тарифа.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"tariffId\", pm.response.json().id);",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Самый новый тариф\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Хороший тариф\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"Q360P\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(1);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(8);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(1);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(1230);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"name\": \"Самый новый тариф\",\n    \"description\": \"Хороший тариф\",\n    \"type\": \"PAID\",\n    \"status\": \"DRAFT\",\n    \"config\": {\n        \"id\": null,\n        \"quality\": \"Q360P\",\n        \"eventLabelsSupport\": true,\n        \"dvr\": {\n            \"dvrDepth\": 1,\n            \"dvrSpace\": 8,\n            \"dvrLockDays\": 1\n        },\n        \"status\": \"DRAFT\"\n    },\n    \"durationUnit\": \"MONTH\",\n    \"cost\": 1230,\n    \"dateOfLastUpdate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tariffs",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление существующего тарифа",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Самый новый тариф!!!\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Хороший тариф (не дорого)\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"Q360P\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(2);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(7);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(2);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(123);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"name\": \"Самый новый тариф!!!\",\n    \"description\": \"Хороший тариф (не дорого)\",\n    \"type\": \"PAID\",\n    \"status\": \"DRAFT\",\n    \"config\": {\n        \"id\": null,\n        \"quality\": \"Q360P\",\n        \"eventLabelsSupport\": true,\n        \"dvr\": {\n            \"dvrDepth\": 2,\n            \"dvrSpace\": 7,\n            \"dvrLockDays\": 2\n        },\n        \"status\": \"DRAFT\"\n    },\n    \"durationUnit\": \"MONTH\",\n    \"cost\": 123,\n    \"dateOfLastUpdate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение тарифа по его Id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Самый новый тариф!!!\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Хороший тариф (не дорого)\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"Q360P\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(2);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(7);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(2);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(123);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление статуса существующего тарифа ( ACTUAL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Самый новый тариф!!!\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Хороший тариф (не дорого)\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"Q360P\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(2);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(7);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(2);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(123);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId}}/changeStatus?status=ACTUAL",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId}}",
										"changeStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "ACTUAL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление существующего тарифа (попытка удаления тарифа в статусе ACTUAL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Проверка сообщения об ошибке\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Unable to delete tariffs with non-draft status!\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание тарифа который будет удален",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"tariffId2\", pm.response.json().id);",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"name\": \"Удали меня\",\n    \"description\": \"Срочно\",\n    \"type\": \"PAID\",\n    \"status\": \"DRAFT\",\n    \"config\": {\n        \"id\": null,\n        \"quality\": \"Q360P\",\n        \"eventLabelsSupport\": true,\n        \"dvr\": {\n            \"dvrDepth\": 1,\n            \"dvrSpace\": 8,\n            \"dvrLockDays\": 1\n        },\n        \"status\": \"DRAFT\"\n    },\n    \"durationUnit\": \"MONTH\",\n    \"cost\": 1230,\n    \"dateOfLastUpdate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tariffs",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление существующего тарифа (удалениe тарифа в статусе DRAFT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание второго тарифа",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"tariffId2\", pm.response.json().id);",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Второй тариф\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Тариф с хорошим качеством\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"QHIGH\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(5);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"DRAFT\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(2500);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"name\": \"Второй тариф\",\n    \"description\": \"Тариф с хорошим качеством\",\n    \"type\": \"PAID\",\n    \"status\": \"DRAFT\",\n    \"config\": {\n        \"id\": null,\n        \"quality\": \"QHIGH\",\n        \"eventLabelsSupport\": true,\n        \"dvr\": {\n            \"dvrDepth\": 5,\n            \"dvrSpace\": 5,\n            \"dvrLockDays\": 5\n        },\n        \"status\": \"DRAFT\"\n    },\n    \"durationUnit\": \"MONTH\",\n    \"cost\": 2500,\n    \"dateOfLastUpdate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tariffs",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление статуса второго существующего тарифа ( ACTUAL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Второй тариф\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Тариф с хорошим качеством\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"QHIGH\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(5);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(2500);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId2}}/changeStatus?status=ACTUAL",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId2}}",
										"changeStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "ACTUAL"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Контроллер для работы с заказами (acquiring)",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"string\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"123\",\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"ACCESS_TOKEN\", jsonData.access_token); ",
													"pm.globals.set (\"REFRESH_TOKEN\", jsonData.refresh_token); ",
													"pm.globals.set(\"ACCESS_TOKEN_EXPIRY\", jsonData.expires_in); ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "123",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"1\",\n    \"type\": \"HOUSE\",\n    \"address\": \"1\",\n    \"apartment\": \"1\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Добавить несколько камер",
							"item": [
								{
									"name": "Узнать id контроллера",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"controllerId\", jsonData.data[0].id); ",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl?houseTitle=1&includeVirtual=true&limit=20&offset=0&title=MQTT",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl"
											],
											"query": [
												{
													"key": "houseTitle",
													"value": "1"
												},
												{
													"key": "includeVirtual",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "title",
													"value": "MQTT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.Получить_логин_и_пароль_для_устройства",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = JSON.parse(responseBody);",
													"    postman.setEnvironmentVariable (\"brokerURL\", jsonData.brokerURL);",
													"    postman.setEnvironmentVariable (\"generatedBrokerLogin\", jsonData.generatedBrokerLogin);",
													"    postman.setEnvironmentVariable (\"generatedBrokerPassword\", jsonData.generatedBrokerPassword);",
													"    postman.setEnvironmentVariable (\"generatedNodeId\", jsonData.generatedNodeId);",
													"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
													"",
													"    var scheme = {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"brokerURL\",",
													"            \"generatedBrokerLogin\",",
													"            \"generatedBrokerPassword\",",
													"            \"generatedNodeId\"",
													"        ],",
													"        \"additionalProperties\": true,",
													"        \"properties\": {",
													"            \"brokerURL\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerLogin\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedBrokerPassword\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"generatedNodeId\": {",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    };",
													"    pm.test('JSON is valid', function () {",
													"            pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
													"    });",
													"    var i=pm.collectionVariables.get(\"i\");",
													"    if ((i < 3)&&( i != 0 )){",
													"        postman.setNextRequest(\"2.Добавить_mqtt_камеру\");",
													"    }",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [10000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/generateMqttBrokerInfo?deviceType=camera",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"generateMqttBrokerInfo"
											],
											"query": [
												{
													"key": "deviceType",
													"value": "camera"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Подключение к WebSocket (абонент 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [5000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/connect?host={{host_ws}}/event_ws&token={{ACCESS_TOKEN}}&subprotocol=SmartHome",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"connect"
											],
											"query": [
												{
													"key": "host",
													"value": "{{host_ws}}/event_ws"
												},
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}"
												},
												{
													"key": "subprotocol",
													"value": "SmartHome"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2.Добавить_mqtt_камеру",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Проверка полей deviceType, houseId, nodeId, controllerId, title, muted, disabled и status \",() => {",
													"        pm.expect(pm.response.json().deviceType).to.eql(\"ELTEX_MQTT_DEVICE\");",
													"        pm.expect(pm.response.json().houseId).to.eql(pm.environment.get(\"houseId\"));",
													"        pm.expect(pm.response.json().nodeId).to.eql(pm.environment.get(\"generatedNodeId\"));",
													"        pm.expect(pm.response.json().controllerId).to.eql(pm.environment.get(\"controllerId\"));        ",
													"        pm.expect(pm.response.json().title).to.include(\"cam\");",
													"        pm.expect(pm.response.json().muted).to.eql(false);",
													"        pm.expect(pm.response.json().disabled).to.eql(false);",
													"        pm.expect(pm.response.json().status).to.eql(\"VIRTUAL\");",
													"    });",
													"    var i=pm.collectionVariables.get(\"i\");",
													"    if ((i < 3)&&( i != 0 )){",
													"        postman.setNextRequest(\"3.Запрос_на_симулятор_камеры\");",
													"    }",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable (\"current_time\", Date.now());",
													"console.log(Date.now())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brokerLogin\": \"{{generatedBrokerLogin}}\",\n  \"brokerPassword\": \"{{generatedBrokerPassword}}\",\n  \"deviceType\": \"ELTEX_MQTT_DEVICE\",\n  \"mac\": \"{{$randomMACAddress}}\",\n  \"nodeId\": \"{{generatedNodeId}}\",\n  \"title\": \"cam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/ctl/{{controllerId}}/devices/add/mqtt/pairing",
											"host": [
												"{{host}}"
											],
											"path": [
												"ctl",
												"{{controllerId}}",
												"devices",
												"add",
												"mqtt",
												"pairing"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.Запрос_на_симулятор_камеры",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"    var i=pm.collectionVariables.get(\"i\");",
													"    if ((i < 3)&&( i != 0 )){",
													"        postman.setNextRequest(\"4.Ожидание_события_добавления_камеры\");",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{res}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cam_sim}}/add",
											"host": [
												"{{cam_sim}}"
											],
											"path": [
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.Ожидание_события_добавления_камеры",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var i=pm.collectionVariables.get(\"i\");",
													"i++;",
													"pm.collectionVariables.set(\"i\", i);",
													"if (i < 3){",
													"    postman.setNextRequest(\"1.Получить_логин_и_пароль_для_устройства\");",
													"}",
													"else if (i == 3) {",
													"    pm.collectionVariables.set(\"i\", 0);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/await?timeFrom={{current_time}}&C_type=ADD_ELTEX_CAMERA_QR&timeout=300000",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"await"
											],
											"query": [
												{
													"key": "timeFrom",
													"value": "{{current_time}}"
												},
												{
													"key": "C_deviceInfo.controllerId",
													"value": "{{controllerId}}",
													"disabled": true
												},
												{
													"key": "C_type",
													"value": "ADD_ELTEX_CAMERA_QR"
												},
												{
													"key": "timeout",
													"value": "300000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отключение от WebSocket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{websocket_proxy_host}}/disconnect",
											"host": [
												"{{websocket_proxy_host}}"
											],
											"path": [
												"disconnect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос камер пользователя (на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    for(let i in pm.response.json()){",
													"        pm.environment.set(\"kam\" + i, pm.response.json()[i].id);",
													"    }             ",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/video/cameras",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Попытка редактировать камеру, добавить dvr (запрос на платформу)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status code is 400\", function () {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Проверка текста сообщения\", function () {",
													"        pm.expect(pm.response.json().message).to.include(\"Изменение dvr-параметров камеры\");",
													"        pm.expect(pm.response.json().message).to.include(\"запрещено\")",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{kam0}}\",\n    \"title\": \"kam\",\n    \"houseId\": \"{{houseId}}\",\n    \"platformType\": \"ELTEX\",\n    \"videoOnly\": false,\n    \"ptz\": false,\n    \"status\": \"INITIALIZE\",\n    \"deviceLocation\": [],\n    \"enabled\": true,\n    \"dvr\": {\n        \"dvrDepth\": 10,\n        \"dvrSpace\": 10,\n        \"dvrLockDays\": 10\n    },\n    \"motionDetectorEnabled\": null,\n    \"agentId\": null,\n    \"motionDelay\": null\n}\n    ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/video/cameras/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"video",
												"cameras",
												"{{kam0}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Контроллер для работы с заказами (acquiring)",
							"item": [
								{
									"name": "Оплата заказа для одной камеры на несколько месяцев",
									"item": [
										{
											"name": "Создание заказа.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 1,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление существующего заказа.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 204\", function () {",
															"        pm.response.to.have.status(204);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 1,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание заказа. (на 2 месяца)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(246);",
															"        pm.expect(pm.response.json().totalSum).to.eql(246);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 2,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Обновление статуса существующего заказа.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(246);",
															"        pm.expect(pm.response.json().totalSum).to.eql(246);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/changeStatus?status=WAIT_FOR_PAY",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"changeStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "WAIT_FOR_PAY"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(246);",
															"        pm.expect(pm.response.json().totalSum).to.eql(246);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id с полями, необходимыми для формирования счета на оплату",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей url, orderid, clientid, client_email, service_name, sum\", function () {",
															"        pm.expect(pm.response.json().url).to.eql(\"CHANGE_ME/create/\");",
															"        pm.expect(pm.response.json().orderid).to.eql(pm.environment.get(\"orderId\"));",
															"        pm.expect(pm.response.json().clientid).to.eql(\"123\");",
															"        pm.expect(pm.response.json().client_email).to.eql(\"string@mail.ru\");",
															"        pm.expect(pm.response.json().service_name).to.eql(\"Оплата подписки\");",
															"        pm.expect(pm.response.json().sum).to.eql(\"246.00\");",
															"",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"sign\",",
															"            \"url\",",
															"            \"orderid\",",
															"            \"clientid\",",
															"            \"client_email\",",
															"            \"client_phone\",",
															"            \"service_name\",",
															"            \"sum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"sign\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"url\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"orderid\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"clientid\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"client_email\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"client_phone\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"service_name\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"sum\": {",
															"                \"type\": \"string\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/forPay",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"forPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "Оплата существующего заказа или обработка неудачной оплаты.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Входные данные",
															"const id = '12345';",
															"const sum = '246.00';",
															"const clientid = '123';",
															"const orderid = pm.environment.get(\"orderId\");",
															"const PaykeeperSecret = \"PaykeeperSecretChangeMe\";",
															"",
															"// Функция для вычисления MD5-хеша",
															"function calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret) {",
															"    const concatenatedString = id + sum + clientid + orderid + PaykeeperSecret;",
															"    const md5Hash = CryptoJS.MD5(concatenatedString).toString();",
															"    return md5Hash;",
															"}",
															"",
															"// Вызываем функцию и сохраняем результат в переменной",
															"const md5Result = calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret);",
															"pm.environment.set(\"key\", md5Result);",
															"",
															"// Проверяем результат в консоли",
															"console.log(md5Result);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/payment?id=12345&sum=246.00&clientid=123&orderid={{orderId}}&key={{key}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"payment"
													],
													"query": [
														{
															"key": "id",
															"value": "12345"
														},
														{
															"key": "sum",
															"value": "246.00"
														},
														{
															"key": "clientid",
															"value": "123"
														},
														{
															"key": "orderid",
															"value": "{{orderId}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id. (проверка оплаты)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, payment.id, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"PAID\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(246);",
															"        pm.expect(pm.response.json().payment.id).to.eql(\"12345\");",
															"        pm.expect(pm.response.json().totalSum).to.eql(246);",
															"",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Оплата заказа для двух камер на несколько месяцев",
									"item": [
										{
											"name": "Создание заказа. (3 месяца, 2 камеры)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(3);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(7500);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(15000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId2}}\",\n    \"count\": 3,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        },\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam1}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Обновление существующего заказа. (2 месяца, 2 камеры)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId2}}\",\n    \"count\": 2,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam0}}\"\n        },\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam1}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заказов (доступна фильтрация по userId).",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количество заказов, а также полей count, userId, status, tariffId, количества камер, type, entityId и totalSum\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"        for(let i in pm.response.json()){",
															"            pm.expect(pm.response.json()[i].count).to.eql(2);",
															"            pm.expect(pm.response.json()[i].userId).to.eql(pm.environment.get(\"id\"));",
															"            if (pm.response.json()[i].status === \"PAID\"){",
															"                pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                pm.expect(pm.response.json()[i].status).to.eql(\"PAID\");",
															"                pm.expect(pm.response.json()[i].items.length).to.eql(1);",
															"                pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"                pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(246);",
															"                pm.expect(pm.response.json()[i].totalSum).to.eql(246);",
															"            }",
															"            else{",
															"                pm.expect(pm.response.json()[i].status).to.eql(\"DRAFT\");",
															"                pm.expect(pm.response.json()[i].items.length).to.eql(2);",
															"                for(let j in pm.response.json()[i].items){",
															"                    pm.expect(pm.response.json()[i].items[j].type).to.eql(\"CAMERA\");",
															"                    pm.expect(pm.response.json()[i].items[j].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"                    pm.expect(pm.response.json()[i].items[j].totalSum).to.eql(5000);",
															"                }",
															"                pm.expect(pm.response.json()[i].items[0].entityId).to.not.eql(pm.response.json()[i].items[1].entityId);",
															"                pm.expect(pm.response.json()[i].totalSum).to.eql(10000);",
															"            }",
															"        }",
															"",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"array\",",
															"        \"additionalItems\": true,",
															"        \"items\": {",
															"            \"type\": \"object\",",
															"            \"required\": [",
															"                \"id\",",
															"                \"userId\",",
															"                \"tariffId\",",
															"                \"count\",",
															"                \"status\",",
															"                \"items\",",
															"                \"dateOfLastUpdate\",",
															"                \"totalSum\"",
															"            ],",
															"            \"additionalProperties\": true,",
															"            \"properties\": {",
															"                \"id\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"userId\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"tariffId\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"count\": {",
															"                    \"type\": \"integer\"",
															"                },",
															"                \"status\": {",
															"                    \"type\": \"string\"",
															"                },",
															"                \"items\": {",
															"                    \"type\": \"array\",",
															"                    \"additionalItems\": true,",
															"                    \"items\": {",
															"                        \"type\": \"object\",",
															"                        \"required\": [",
															"                            \"type\",",
															"                            \"entityId\",",
															"                            \"startDate\",",
															"                            \"stopDate\",",
															"                            \"totalSum\"",
															"                        ],",
															"                        \"additionalProperties\": true,",
															"                        \"properties\": {",
															"                            \"type\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"entityId\": {",
															"                                \"type\": \"string\"",
															"                            },",
															"                            \"startDate\": {",
															"                                \"type\": \"number\"",
															"                            },",
															"                            \"stopDate\": {",
															"                                \"type\": \"number\"",
															"                            },",
															"                            \"totalSum\": {",
															"                                \"type\": \"integer\"",
															"                            }",
															"                        }",
															"                    }",
															"                },",
															"",
															"                \"dateOfLastUpdate\": {",
															"                    \"type\": \"number\"",
															"                },",
															"                \"totalSum\": {",
															"                    \"type\": \"integer\"",
															"                }",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Обновление статуса существующего заказа. (2 месяца, 2 камеры, status =WAIT_FOR_PAY)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/changeStatus?status=WAIT_FOR_PAY",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"changeStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "WAIT_FOR_PAY"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id с полями, необходимыми для формирования счета на оплату (2 камеры, 2 месяца)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей url, orderid, clientid, client_email, service_name, sum\", function () {",
															"        pm.expect(pm.response.json().url).to.eql(\"CHANGE_ME/create/\");",
															"        pm.expect(pm.response.json().orderid).to.eql(pm.environment.get(\"orderId\"));",
															"        pm.expect(pm.response.json().clientid).to.eql(\"123\");",
															"        pm.expect(pm.response.json().client_email).to.eql(\"string@mail.ru\");",
															"        pm.expect(pm.response.json().service_name).to.eql(\"Оплата подписки\");",
															"        pm.expect(pm.response.json().sum).to.eql(\"10000.00\");",
															"",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"sign\",",
															"            \"url\",",
															"            \"orderid\",",
															"            \"clientid\",",
															"            \"client_email\",",
															"            \"client_phone\",",
															"            \"service_name\",",
															"            \"sum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"sign\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"url\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"orderid\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"clientid\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"client_email\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"client_phone\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"service_name\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"sum\": {",
															"                \"type\": \"string\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/forPay",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"forPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "Оплата существующего заказа или обработка неудачной оплаты. (неудачная оплата, некоректный PaykeeperSecret)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка ответа (должно быть FAIL)\", function () {",
															"        pm.expect(pm.response.text()).to.eql(\"FAIL\");",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Входные данные",
															"const id = '12345';",
															"const sum = '246.00';",
															"const clientid = '123';",
															"const orderid = pm.environment.get(\"orderId\");",
															"const PaykeeperSecret = \"ERROR\";",
															"",
															"// Функция для вычисления MD5-хеша",
															"function calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret) {",
															"    const concatenatedString = id + sum + clientid + orderid + PaykeeperSecret;",
															"    const md5Hash = CryptoJS.MD5(concatenatedString).toString();",
															"    return md5Hash;",
															"}",
															"",
															"// Вызываем функцию и сохраняем результат в переменной",
															"const md5Result = calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret);",
															"pm.environment.set(\"key\", md5Result);",
															"",
															"// Проверяем результат в консоли",
															"console.log(md5Result);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/payment?id=12345&sum=246.00&clientid=123&orderid={{orderId}}&key={{key}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"payment"
													],
													"query": [
														{
															"key": "id",
															"value": "12345"
														},
														{
															"key": "sum",
															"value": "246.00"
														},
														{
															"key": "clientid",
															"value": "123"
														},
														{
															"key": "orderid",
															"value": "{{orderId}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id. (статус   = WAIT_FOR_PAY)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Синхронизация статуса существующего заказа с данными из PayKeeper.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"WAIT_FOR_PAY\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}/synchronizeStatus",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}",
														"synchronizeStatus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Оплата существующего заказа или обработка неудачной оплаты. (успешная оплата)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Входные данные",
															"const id = '12345';",
															"const sum = '10000.00';",
															"const clientid = '123';",
															"const orderid = pm.environment.get(\"orderId\");",
															"const PaykeeperSecret = \"PaykeeperSecretChangeMe\";",
															"",
															"// Функция для вычисления MD5-хеша",
															"function calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret) {",
															"    const concatenatedString = id + sum + clientid + orderid + PaykeeperSecret;",
															"    const md5Hash = CryptoJS.MD5(concatenatedString).toString();",
															"    return md5Hash;",
															"}",
															"",
															"// Вызываем функцию и сохраняем результат в переменной",
															"const md5Result = calculateMD5Hash(id, sum, clientid, orderid, PaykeeperSecret);",
															"pm.environment.set(\"key\", md5Result);",
															"",
															"// Проверяем результат в консоли",
															"console.log(md5Result);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/payment?id=12345&sum=10000.00&clientid=123&orderid={{orderId}}&key={{key}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"payment"
													],
													"query": [
														{
															"key": "id",
															"value": "12345"
														},
														{
															"key": "sum",
															"value": "10000.00"
														},
														{
															"key": "clientid",
															"value": "123"
														},
														{
															"key": "orderid",
															"value": "{{orderId}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id. (статус   = PAID)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"        pm.expect(pm.response.json().count).to.eql(2);",
															"        pm.expect(pm.response.json().status).to.eql(\"PAID\");",
															"        pm.expect(pm.response.json().items.length).to.eql(2);",
															"        for(let i in pm.response.json().items){",
															"            pm.expect(pm.response.json().items[i].type).to.eql(\"CAMERA\");",
															"            pm.expect(pm.response.json().items[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"            pm.expect(pm.response.json().items[i].totalSum).to.eql(5000);",
															"        }",
															"        pm.expect(pm.response.json().items[0].entityId).to.not.eql(pm.response.json().items[1].entityId);",
															"        pm.expect(pm.response.json().totalSum).to.eql(10000);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Контроллер для синхронизации пользователей eltex evi",
					"item": [
						{
							"name": "Запрос пользователя eltex evi по userId.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.environment.set(\"res\", JSON.stringify(pm.response.json()));",
											"    ",
											"    pm.test(\"Проверка полей userId и enabled\", function () {",
											"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));    ",
											"        pm.expect(pm.response.json().enabled).to.eql(true);",
											"    });",
											"",
											"    var schema ={",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"userId\",",
											"            \"eviUserId\",",
											"            \"canEditOrganizations\",",
											"            \"canViewOrganizations\",",
											"            \"canEditSettings\",",
											"            \"enabled\",",
											"            \"canAddAgentCamera\",",
											"            \"cameraLimits\"",
											"        ],",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"userId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"eviUserId\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"canEditOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canViewOrganizations\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canEditSettings\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"enabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"canAddAgentCamera\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"cameraLimits\": {",
											"                \"type\": \"object\",",
											"                \"required\": [",
											"                    \"FLUSSONIC\",",
											"                    \"ELTEX\"",
											"                ],",
											"                \"properties\": {",
											"                    \"FLUSSONIC\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"cameraLimit\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"cameraLimit\": {",
											"                                \"type\": \"integer\"",
											"                            }",
											"                        }",
											"                    },",
											"                    \"ELTEX\": {",
											"                        \"type\": \"object\",",
											"                        \"required\": [",
											"                            \"cameraLimit\"",
											"                        ],",
											"                        \"properties\": {",
											"                            \"cameraLimit\": {",
											"                                \"type\": \"integer\"",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/evi/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"evi",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос пользователя eltex evi по userId. Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Проверка полей userId и enabled\", function () {",
											"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));    ",
											"        pm.expect(pm.response.json().enabled).to.eql(true);",
											"    });",
											"",
											"    // var schema ={",
											"    //     \"type\": \"object\",",
											"    //     \"required\": [",
											"    //         \"id\",",
											"    //         \"userId\",",
											"    //         \"eviUserId\",",
											"    //         \"canEditOrganizations\",",
											"    //         \"canViewOrganizations\",",
											"    //         \"canEditSettings\",",
											"    //         \"enabled\",",
											"    //         \"canAddAgentCamera\",",
											"    //         \"cameraLimits\"",
											"    //     ],",
											"    //     \"properties\": {",
											"    //         \"id\": {",
											"    //             \"type\": \"string\"",
											"    //         },",
											"    //         \"userId\": {",
											"    //             \"type\": \"string\"",
											"    //         },",
											"    //         \"eviUserId\": {",
											"    //             \"type\": \"string\"",
											"    //         },",
											"    //         \"canEditOrganizations\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"canViewOrganizations\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"canEditSettings\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"enabled\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"canAddAgentCamera\": {",
											"    //             \"type\": \"boolean\"",
											"    //         },",
											"    //         \"cameraLimits\": {",
											"    //             \"type\": \"object\",",
											"    //             \"required\": [",
											"    //                 \"FLUSSONIC\",",
											"    //                 \"ELTEX\"",
											"    //             ],",
											"    //             \"properties\": {",
											"    //                 \"FLUSSONIC\": {",
											"    //                     \"type\": \"object\",",
											"    //                     \"required\": [",
											"    //                         \"cameraLimit\"",
											"    //                     ],",
											"    //                     \"properties\": {",
											"    //                         \"cameraLimit\": {",
											"    //                             \"type\": \"integer\"",
											"    //                         }",
											"    //                     }",
											"    //                 },",
											"    //                 \"ELTEX\": {",
											"    //                     \"type\": \"object\",",
											"    //                     \"required\": [",
											"    //                         \"cameraLimit\"",
											"    //                     ],",
											"    //                     \"properties\": {",
											"    //                         \"cameraLimit\": {",
											"    //                             \"type\": \"integer\"",
											"    //                         }",
											"    //                     }",
											"    //                 }",
											"    //             }",
											"    //         }",
											"    //     }",
											"    // }",
											"    // pm.test('JSON is valid', function () {",
											"    //         var JsoneData = JSON.parse(responseBody);",
											"    //         pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    // });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{res}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/evi/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"evi",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Контроллер для работы с заказами (acquiring) для админа и инженера ТП",
					"item": [
						{
							"name": "Создание Инженер ТП",
							"item": [
								{
									"name": "Создание инженера ТП 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"test_support_1_id\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"The data is correct\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalEmail\": [\n        \"{{$randomEmail}}\"\n    ],\n    \"admin\": false,\n    \"email\": \"{{$randomEmail}}\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"houseIds\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"{{$randomFullName}}\",\n    \"ownedHouseIds\": [],\n    \"password\": \"123\",\n    \"patronymic\": \"\",\n    \"permissions\": [],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"role\": \"support-engineer\",\n    \"roleId\": \"support-engineer\",\n    \"roleName\": \"\",\n    \"roleSettings\": {},\n    \"surname\": \"\",\n    \"username\": \"{{test_support_1_login}}\",\n    \"videoParameters\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение токена (для инженера ТП 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"pm.globals.set(\"test_support_1_token\", jsonData.access_token);",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic d2ViLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{test_support_1_login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Контроллер для работы с заказами (acquiring) для админа и инженера ТП",
							"item": [
								{
									"name": "admin",
									"item": [
										{
											"name": "Создание заказа. Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 1,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam2}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заказов по userId админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количества заказов, а также полей userId, status, count, tariffId, type, entityId, totalSum и payment.id\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(3);",
															"        for(let i in pm.response.json()){",
															"           pm.expect(pm.response.json()[i].userId).to.eql(pm.environment.get(\"id\"));",
															"           if  (pm.response.json()[i].count === 2){",
															"               pm.expect(pm.response.json()[i].status).to.eql(\"PAID\");",
															"                //    console.log(pm.response.json()[i].items.length)",
															"               if (pm.response.json()[i].items.length === 1){",
															"                   pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                   pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                   pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"                   pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(246);",
															"                   pm.expect(pm.response.json()[i].totalSum).to.eql(246);",
															"               }",
															"               else{",
															"                   pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"                   for(let j in pm.response.json()[i].items){",
															"                        pm.expect(pm.response.json()[i].items[j].type).to.eql(\"CAMERA\");",
															"                        pm.expect(pm.response.json()[i].items[j].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"                        pm.expect(pm.response.json()[i].items[j].totalSum).to.eql(5000);",
															"                   }",
															"                   pm.expect(pm.response.json()[i].totalSum).to.eql(10000);",
															"               }",
															"               pm.expect(pm.response.json()[i].payment.id).to.eql(\"12345\");",
															"            }",
															"            else{",
															"                pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                pm.expect(pm.response.json()[i].status).to.eql(\"DRAFT\");",
															"                pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"                pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(123);",
															"                pm.expect(pm.response.json()[i].totalSum).to.eql(123);",
															"            }",
															"        }",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, status, count, tariffId, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Синхронизация статуса существующего заказа с данными из PayKeeper.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}/synchronizeStatus",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}",
														"synchronizeStatus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление существующего заказа по его Id админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка удаления",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количества заказов\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{access_token}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Инженер TП",
									"item": [
										{
											"name": "Создание заказа.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    postman.setEnvironmentVariable (\"orderId\", pm.response.json().id); ",
															"    pm.test(\"Проверка полей userId, tariffId, count, status, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items.length).to.eql(1);",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"",
															"    var scheme = {",
															"        \"type\": \"object\",",
															"        \"required\": [",
															"            \"id\",",
															"            \"userId\",",
															"            \"tariffId\",",
															"            \"count\",",
															"            \"status\",",
															"            \"items\",",
															"            \"dateOfLastUpdate\",",
															"            \"totalSum\"",
															"        ],",
															"        \"additionalProperties\": true,",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"userId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"tariffId\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"count\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"status\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"items\": {",
															"                \"type\": \"array\",",
															"                \"additionalItems\": true,",
															"                \"items\": {",
															"                    \"type\": \"object\",",
															"                    \"required\": [",
															"                        \"type\",",
															"                        \"entityId\",",
															"                        \"startDate\",",
															"                        \"stopDate\",",
															"                        \"totalSum\"",
															"                    ],",
															"                    \"additionalProperties\": true,",
															"                    \"properties\": {",
															"                        \"type\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"entityId\": {",
															"                            \"type\": \"string\"",
															"                        },",
															"                        \"startDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"stopDate\": {",
															"                            \"type\": \"number\"",
															"                        },",
															"                        \"totalSum\": {",
															"                            \"type\": \"integer\"",
															"                        }",
															"                    }",
															"                }",
															"            },",
															"            \"dateOfLastUpdate\": {",
															"                \"type\": \"number\"",
															"            },",
															"            \"totalSum\": {",
															"                \"type\": \"integer\"",
															"            }",
															"        }",
															"    };",
															"    pm.test('JSON is valid', function () {",
															"        var jsonData = JSON.parse(responseBody);",
															"        pm.expect(tv4.validate(jsonData, scheme)).to.be.true;",
															"    });",
															"",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"\",\n    \"status\": \"DRAFT\",\n    \"userId\": \"{{id}}\",\n    \"tariffId\": \"{{tariffId}}\",\n    \"count\": 1,\n    \"items\": [\n        {\n            \"type\": \"CAMERA\",\n            \"entityId\": \"{{kam2}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/orders",
													"host": [
														"{{host}}"
													],
													"path": [
														"orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение списка заказов по userId админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количества заказов, а также полей userId, status, count, tariffId, type, entityId, totalSum и payment.id\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(3);",
															"        for(let i in pm.response.json()){",
															"           pm.expect(pm.response.json()[i].userId).to.eql(pm.environment.get(\"id\"));",
															"           if  (pm.response.json()[i].count === 2){",
															"               pm.expect(pm.response.json()[i].status).to.eql(\"PAID\");",
															"                //    console.log(pm.response.json()[i].items.length)",
															"               if (pm.response.json()[i].items.length === 1){",
															"                   pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                   pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                   pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam0\"));",
															"                   pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(246);",
															"                   pm.expect(pm.response.json()[i].totalSum).to.eql(246);",
															"               }",
															"               else{",
															"                   pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId2\"));",
															"                   for(let j in pm.response.json()[i].items){",
															"                        pm.expect(pm.response.json()[i].items[j].type).to.eql(\"CAMERA\");",
															"                        pm.expect(pm.response.json()[i].items[j].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
															"                        pm.expect(pm.response.json()[i].items[j].totalSum).to.eql(5000);",
															"                   }",
															"                   pm.expect(pm.response.json()[i].totalSum).to.eql(10000);",
															"               }",
															"               pm.expect(pm.response.json()[i].payment.id).to.eql(\"12345\");",
															"            }",
															"            else{",
															"                pm.expect(pm.response.json()[i].tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"                pm.expect(pm.response.json()[i].status).to.eql(\"DRAFT\");",
															"                pm.expect(pm.response.json()[i].items[0].type).to.eql(\"CAMERA\");",
															"                pm.expect(pm.response.json()[i].items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"                pm.expect(pm.response.json()[i].items[0].totalSum).to.eql(123);",
															"                pm.expect(pm.response.json()[i].totalSum).to.eql(123);",
															"            }",
															"        }",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Получение заказа по его Id админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка полей userId, status, count, tariffId, type, entityId, totalSum\", function () {",
															"        pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
															"        pm.expect(pm.response.json().count).to.eql(1);",
															"        pm.expect(pm.response.json().tariffId).to.eql(pm.environment.get(\"tariffId\"));",
															"        pm.expect(pm.response.json().status).to.eql(\"DRAFT\");",
															"        pm.expect(pm.response.json().items[0].type).to.eql(\"CAMERA\");",
															"        pm.expect(pm.response.json().items[0].entityId).to.eql(pm.environment.get(\"kam2\"));",
															"        pm.expect(pm.response.json().items[0].totalSum).to.eql(123);",
															"        pm.expect(pm.response.json().totalSum).to.eql(123);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Синхронизация статуса существующего заказа с данными из PayKeeper.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    // pm.test(\"Status code is 429\", function () {",
															"    //     pm.response.to.have.status(429);",
															"    // });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}/synchronizeStatus",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}",
														"synchronizeStatus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление существующего заказа по его Id админом или инженером ТП.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders/{{orderId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders",
														"{{orderId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка удаления",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Проверка количества заказов\", function () {",
															"        pm.expect(pm.response.json().length).to.eql(2);",
															"    });",
															"} ",
															"catch(e) {",
															"    // выводим исключение в консоль",
															"    console.log(e);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test_support_1_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/administration/orders?userId={{id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"administration",
														"orders"
													],
													"query": [
														{
															"key": "userId",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{test_support_1_token}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Контроллер для работы с подписками (acquiring)",
					"item": [
						{
							"name": "Получение списка подписок пользователя.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка количества подписок, а также полей полей type, userId, entityId \", function () {",
											"    // pm.expect(pm.response.json().length).to.eql(4);",
											"    pm.expect(pm.response.json().length).to.eql(3);",
											"    for(let i in pm.response.json()){",
											"        pm.expect(pm.response.json()[i].type).to.eql(\"CAMERA\");",
											"        pm.expect(pm.response.json()[i].userId).to.eql(pm.variables.get(\"id\"));",
											"        if(pm.response.json()[i].entityId === null ){",
											"            pm.environment.set(\"tariffConfigId1\", (pm.response.json()[i].tariffConfigId))",
											"            pm.environment.set(\"subscriptionId1\", pm.response.json()[i].id);",
											"        }",
											"        // С 1.31 демо подписок не существует",
											"        // else if(pm.response.json()[i].tariffConfigId != \"demo_tariff_config_id\"){",
											"        else{",
											"            pm.environment.set(\"tariffConfigId2\", (pm.response.json()[i].tariffConfigId))",
											"            pm.expect(pm.response.json()[i].entityId).to.be.oneOf([pm.environment.get(\"kam0\"), pm.environment.get(\"kam1\")]);",
											"            if (pm.response.json()[i].entityId === pm.environment.get(\"kam0\") ){",
											"                pm.environment.set(\"subscriptionId2\", pm.response.json()[i].id);",
											"            }",
											"            else{",
											"                pm.environment.set(\"subscriptionId3\", pm.response.json()[i].id);",
											"            }",
											"        }",
											"        // С 1.31 демо подписок не существует",
											"        // else{",
											"        //     pm.expect(pm.response.json()[i].entityId).eql(pm.environment.get(\"kam2\"))",
											"        //     pm.environment.set(\"subscriptionId_demo\", pm.response.json()[i].id);",
											"        // }",
											"    }",
											"});",
											"",
											"// entityId не обязательное поле",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"title\": \"A Schema\",",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"            \"id\",",
											"            \"type\",",
											"            \"startDate\",",
											"            \"stopDate\",",
											"            \"userId\",",
											"            \"tariffConfigId\"",
											"        ],",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"title\": \"The id Schema\",",
											"                \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"                \"title\": \"The type Schema\",",
											"                \"type\": \"string\"",
											"            },",
											"            \"startDate\": {",
											"                \"title\": \"The startDate Schema\",",
											"                \"type\": \"number\"",
											"            },",
											"            \"stopDate\": {",
											"                \"title\": \"The stopDate Schema\",",
											"                \"type\": \"number\"",
											"            },",
											"            \"entityId\": {",
											"                \"title\": \"The entityId Schema\",",
											"                \"type\": [",
											"                    \"null\",",
											"                    \"string\"",
											"                ]",
											"            },",
											"            \"userId\": {",
											"                \"title\": \"The userId Schema\",",
											"                \"type\": \"string\"",
											"            },",
											"            \"tariffConfigId\": {",
											"                \"title\": \"The tariffConfigId Schema\",",
											"                \"type\": \"string\"",
											"            }",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/subscriptions",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение подписки по entityId.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
											"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
											"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
											"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
											"});",
											"",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"type\",",
											"        \"startDate\",",
											"        \"stopDate\",",
											"        \"entityId\",",
											"        \"userId\",",
											"        \"tariffConfigId\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"title\": \"The id Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"title\": \"The type Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"startDate\": {",
											"            \"title\": \"The startDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"stopDate\": {",
											"            \"title\": \"The stopDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"entityId\": {",
											"            \"title\": \"The entityId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"title\": \"The userId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"tariffConfigId\": {",
											"            \"title\": \"The tariffConfigId Schema\",",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/subscriptions/byEntityId/{{kam0}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions",
										"byEntityId",
										"{{kam0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Применение подписки к другой сущности (камере)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
											"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
											"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
											"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
											"});",
											"",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"type\",",
											"        \"startDate\",",
											"        \"stopDate\",",
											"        \"entityId\",",
											"        \"userId\",",
											"        \"tariffConfigId\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"title\": \"The id Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"title\": \"The type Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"startDate\": {",
											"            \"title\": \"The startDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"stopDate\": {",
											"            \"title\": \"The stopDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"entityId\": {",
											"            \"title\": \"The entityId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"title\": \"The userId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"tariffConfigId\": {",
											"            \"title\": \"The tariffConfigId Schema\",",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/subscriptions/{{subscriptionId1}}/applyForEntity?entityId={{kam0}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions",
										"{{subscriptionId1}}",
										"applyForEntity"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{kam0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение подписки по entityId. (проверка переноса)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
											"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
											"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
											"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
											"});",
											"",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"type\",",
											"        \"startDate\",",
											"        \"stopDate\",",
											"        \"entityId\",",
											"        \"userId\",",
											"        \"tariffConfigId\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"title\": \"The id Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"title\": \"The type Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"startDate\": {",
											"            \"title\": \"The startDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"stopDate\": {",
											"            \"title\": \"The stopDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"entityId\": {",
											"            \"title\": \"The entityId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"title\": \"The userId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"tariffConfigId\": {",
											"            \"title\": \"The tariffConfigId Schema\",",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/subscriptions/byEntityId/{{kam0}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions",
										"byEntityId",
										"{{kam0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение подписки по ее Id. (проверка переноса)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
											"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
											"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
											"    pm.expect(pm.response.json().entityId).to.eql(null);",
											"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
											"});",
											"",
											"var schema = {",
											"    \"$id\": \"http://example.com/example.json\",",
											"    \"title\": \"Root Schema\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"type\",",
											"        \"startDate\",",
											"        \"stopDate\",",
											"        \"entityId\",",
											"        \"userId\",",
											"        \"tariffConfigId\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"title\": \"The id Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"title\": \"The type Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"startDate\": {",
											"            \"title\": \"The startDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"stopDate\": {",
											"            \"title\": \"The stopDate Schema\",",
											"            \"type\": \"number\"",
											"        },",
											"        \"entityId\": {",
											"            \"title\": \"The entityId Schema\",",
											"            \"type\": \"null\"",
											"        },",
											"        \"userId\": {",
											"            \"title\": \"The userId Schema\",",
											"            \"type\": \"string\"",
											"        },",
											"        \"tariffConfigId\": {",
											"            \"title\": \"The tariffConfigId Schema\",",
											"            \"type\": \"string\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"    var JsoneData = JSON.parse(responseBody);",
											"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/subscriptions/{{subscriptionId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"subscriptions",
										"{{subscriptionId2}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ACCESS_TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Контроллер для работы с подписками (acquiring) для админа и инженера ТП",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "Получение списка подписок по userId админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка количества подписок, а также полей полей id, type, userId, entityId и tariffConfigId\", function () {",
													"    // pm.expect(pm.response.json().length).to.eql(4);",
													"    for(let i in pm.response.json()){",
													"        pm.expect(pm.response.json()[i].type).to.eql(\"CAMERA\");",
													"        pm.expect(pm.response.json()[i].userId).to.eql(pm.variables.get(\"id\"));",
													"        if(pm.response.json()[i].entityId === null ){",
													"            pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId2\"));",
													"            pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId2\"));",
													"        }",
													"        // else if(pm.response.json()[i].tariffConfigId != \"demo_tariff_config_id\"){",
													"        else{",
													"            if (pm.response.json()[i].entityId === pm.environment.get(\"kam0\") ){",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId1\"));",
													"                pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId1\"));",
													"            }",
													"            else{",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId3\"));",
													"                pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId2\"));",
													"            }",
													"        }",
													"        // else{",
													"        //     pm.expect(pm.response.json()[i].entityId).eql(pm.environment.get(\"kam2\"))",
													"        //     pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId_demo\"));",
													"        //     pm.expect(pm.response.json()[i].tariffConfigId).to.eql(\"demo_tariff_config_id\");",
													"        // }",
													"    }",
													"});",
													"",
													"// entityId не обязательное поле",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"array\",",
													"    \"items\": {",
													"        \"title\": \"A Schema\",",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"type\",",
													"            \"startDate\",",
													"            \"stopDate\",",
													"            \"userId\",",
													"            \"tariffConfigId\"",
													"        ],",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"title\": \"The id Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"type\": {",
													"                \"title\": \"The type Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"startDate\": {",
													"                \"title\": \"The startDate Schema\",",
													"                \"type\": \"number\"",
													"            },",
													"            \"stopDate\": {",
													"                \"title\": \"The stopDate Schema\",",
													"                \"type\": \"number\"",
													"            },",
													"            \"entityId\": {",
													"                \"title\": \"The entityId Schema\",",
													"                \"type\": [",
													"                    \"null\",",
													"                    \"string\"",
													"                ]",
													"            },",
													"            \"userId\": {",
													"                \"title\": \"The userId Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"tariffConfigId\": {",
													"                \"title\": \"The tariffConfigId Schema\",",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData = JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions?userId={{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по entityId админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/byEntityId/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"byEntityId",
												"{{kam0}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Применение подписки к другой сущности (камере) админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/{{subscriptionId2}}/applyForEntity?entityId={{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"{{subscriptionId2}}",
												"applyForEntity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{kam0}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по entityId админом или инженером ТП. (проверка переноса)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/byEntityId/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"byEntityId",
												"{{kam0}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по ее Id админом или инженером ТП. (проверка переноса)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(null);",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"null\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/{{subscriptionId1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"{{subscriptionId1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Инженер TП",
							"item": [
								{
									"name": "Получение списка подписок по userId админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка количества подписок, а также полей полей id, type, userId, entityId и tariffConfigId\", function () {",
													"    // pm.expect(pm.response.json().length).to.eql(4);",
													"    for(let i in pm.response.json()){",
													"        pm.expect(pm.response.json()[i].type).to.eql(\"CAMERA\");",
													"        pm.expect(pm.response.json()[i].userId).to.eql(pm.variables.get(\"id\"));",
													"        if(pm.response.json()[i].entityId === null ){",
													"            pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId1\"));",
													"            pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId1\"));",
													"        }",
													"        // else if(pm.response.json()[i].tariffConfigId != \"demo_tariff_config_id\"){",
													"        else{",
													"            if (pm.response.json()[i].entityId === pm.environment.get(\"kam0\") ){",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId2\"));",
													"                pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId2\"));",
													"            }",
													"            else{",
													"                pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId3\"));",
													"                pm.expect(pm.response.json()[i].tariffConfigId).to.eql(pm.variables.get(\"tariffConfigId2\"));",
													"            }",
													"        }",
													"        // else{",
													"        //     pm.expect(pm.response.json()[i].entityId).eql(pm.environment.get(\"kam2\"))",
													"        //     pm.expect(pm.response.json()[i].id).to.eql(pm.variables.get(\"subscriptionId_demo\"));",
													"        //     pm.expect(pm.response.json()[i].tariffConfigId).to.eql(\"demo_tariff_config_id\");",
													"        // }",
													"    }",
													"});",
													"",
													"// entityId не обязательное поле",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"array\",",
													"    \"items\": {",
													"        \"title\": \"A Schema\",",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"            \"id\",",
													"            \"type\",",
													"            \"startDate\",",
													"            \"stopDate\",",
													"            \"userId\",",
													"            \"tariffConfigId\"",
													"        ],",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"title\": \"The id Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"type\": {",
													"                \"title\": \"The type Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"startDate\": {",
													"                \"title\": \"The startDate Schema\",",
													"                \"type\": \"number\"",
													"            },",
													"            \"stopDate\": {",
													"                \"title\": \"The stopDate Schema\",",
													"                \"type\": \"number\"",
													"            },",
													"            \"entityId\": {",
													"                \"title\": \"The entityId Schema\",",
													"                \"type\": [",
													"                    \"null\",",
													"                    \"string\"",
													"                ]",
													"            },",
													"            \"userId\": {",
													"                \"title\": \"The userId Schema\",",
													"                \"type\": \"string\"",
													"            },",
													"            \"tariffConfigId\": {",
													"                \"title\": \"The tariffConfigId Schema\",",
													"                \"type\": \"string\"",
													"            }",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData = JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions?userId={{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по entityId админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/byEntityId/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"byEntityId",
												"{{kam0}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Применение подписки к другой сущности (камере) админом или инженером ТП.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/{{subscriptionId1}}/applyForEntity?entityId={{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"{{subscriptionId1}}",
												"applyForEntity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{kam0}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по entityId админом или инженером ТП. (проверка переноса)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId1\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(pm.environment.get(\"kam0\"));",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId1\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/byEntityId/{{kam0}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"byEntityId",
												"{{kam0}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение подписки по ее Id админом или инженером ТП. (проверка переноса)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Проверка полей id, type, entityId, userId, tariffConfigId\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"subscriptionId2\"));",
													"    pm.expect(pm.response.json().type).to.eql(\"CAMERA\");",
													"    pm.expect(pm.response.json().entityId).to.eql(null);",
													"    pm.expect(pm.response.json().userId).to.eql(pm.environment.get(\"id\"));",
													"    pm.expect(pm.response.json().tariffConfigId).to.eql(pm.environment.get(\"tariffConfigId2\"));",
													"});",
													"",
													"var schema = {",
													"    \"$id\": \"http://example.com/example.json\",",
													"    \"title\": \"Root Schema\",",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"type\",",
													"        \"startDate\",",
													"        \"stopDate\",",
													"        \"entityId\",",
													"        \"userId\",",
													"        \"tariffConfigId\"",
													"    ],",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"title\": \"The id Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"title\": \"The type Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"startDate\": {",
													"            \"title\": \"The startDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"stopDate\": {",
													"            \"title\": \"The stopDate Schema\",",
													"            \"type\": \"number\"",
													"        },",
													"        \"entityId\": {",
													"            \"title\": \"The entityId Schema\",",
													"            \"type\": \"null\"",
													"        },",
													"        \"userId\": {",
													"            \"title\": \"The userId Schema\",",
													"            \"type\": \"string\"",
													"        },",
													"        \"tariffConfigId\": {",
													"            \"title\": \"The tariffConfigId Schema\",",
													"            \"type\": \"string\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"    var JsoneData = JSON.parse(responseBody);",
													"    pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/subscriptions/{{subscriptionId2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"subscriptions",
												"{{subscriptionId2}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Обновление статуса существующего тарифа ( ARCHIVE)",
					"item": [
						{
							"name": "Обновление статуса существующего тарифа ( ARCHIVE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка всех полей\", function () {",
											"    pm.expect(pm.response.json().name).to.eql(\"Второй тариф\");",
											"    pm.expect(pm.response.json().description).to.eql(\"Тариф с хорошим качеством\");",
											"    pm.expect(pm.response.json().type).to.eql(\"PAID\");",
											"    pm.expect(pm.response.json().status).to.eql(\"ARCHIVE\");",
											"    pm.expect(pm.response.json().config.quality).to.eql(\"QHIGH\");",
											"    pm.expect(pm.response.json().config.eventLabelsSupport).to.eql(true);",
											"    pm.expect(pm.response.json().config.dvr.dvrDepth).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrSpace).to.eql(5);",
											"    pm.expect(pm.response.json().config.dvr.dvrLockDays).to.eql(5);",
											"    pm.expect(pm.response.json().config.status).to.eql(\"ACTUAL\");",
											"    pm.expect(pm.response.json().durationUnit).to.eql(\"MONTH\");",
											"    pm.expect(pm.response.json().cost).to.eql(2500);",
											"});",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"description\",",
											"        \"type\",",
											"        \"status\",",
											"        \"config\",",
											"        \"durationUnit\",",
											"        \"cost\",",
											"        \"dateOfLastUpdate\"",
											"    ],",
											"    \"additionalProperties\": true,",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"type\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"config\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"id\",",
											"                \"quality\",",
											"                \"eventLabelsSupport\",",
											"                \"dvr\",",
											"                \"status\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"quality\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"eventLabelsSupport\": {",
											"                    \"type\": \"boolean\"",
											"                },",
											"                \"dvr\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"dvrDepth\",",
											"                        \"dvrSpace\",",
											"                        \"dvrLockDays\"",
											"                    ],",
											"                    \"additionalProperties\": true,",
											"                    \"properties\": {",
											"                        \"dvrDepth\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrSpace\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"dvrLockDays\": {",
											"                            \"type\": \"integer\"",
											"                        }",
											"                    }",
											"                },",
											"                \"status\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"durationUnit\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"cost\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"dateOfLastUpdate\": {",
											"            \"type\": \"number\"",
											"        }",
											"    }",
											"};",
											"pm.test('JSON is valid', function () {",
											"        var JsoneData = JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/tariffs/{{tariffId2}}/changeStatus?status=ARCHIVE",
									"host": [
										"{{host}}"
									],
									"path": [
										"tariffs",
										"{{tariffId2}}",
										"changeStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "ARCHIVE"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Контроллер для работы с плеером",
					"item": [
						{
							"name": "Управление событиями у камер на временной шкале (EVI_Cloud_Home)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// try{",
											"//     pm.test(\"Status code is 200\", function () {",
											"//         pm.response.to.have.status(200);",
											"//     });",
											"//     pm.test(\"Проверка наличия id в ответе\", function () {",
											"//         pm.expect( pm.response.json().length).to.eql(1)",
											"//         pm.expect( typeof(pm.response.json()[0])).to.eql(\"string\")",
											"//     });",
											"// }",
											"// catch(e)",
											"// {",
											"// // выводим исключение в консоль",
											"//     console.log(e);",
											"// }",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var time_to = Math.round(Date.now()/1000.0)",
											"pm.environment.set(\"time_events_start\", time_to);",
											"pm.environment.set(\"time_events_end\", time_to+1);",
											"console.log(time_to)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Vsaas-Api-Key",
										"value": "000000",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"camera_id\":\"{{kam0}}\",\n    \"type\": \"script\",\n    \"start_at\": {{time_events_start}},\n    \"end_at\": {{time_events_end}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EVI_host}}/vsaas/api/v2/events",
									"host": [
										"{{EVI_host}}"
									],
									"path": [
										"vsaas",
										"api",
										"v2",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка событий (на платформу)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка значений полей play_url, record_type и utc_time\", function () {",
											"        // Проверяем в ссылке start_time",
											"        let time = \"start_time=\" + pm.environment.get(\"time_events_start\");        ",
											"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
											"        // Проверяем в ссылке end_time",
											"        time = \"end_time=\" + pm.environment.get(\"time_events_end\");    ",
											"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
											"",
											"        pm.expect( pm.response.json()[0].record_type).to.eql(\"script\");",
											"        time = pm.environment.get(\"time_events_start\") + \"000000\";",
											"        pm.expect( pm.response.json()[0].utc_time).to.eql(Number(time));",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"download_url\",",
											"                \"play_url\",",
											"                \"record_duration\",",
											"                \"record_size\",",
											"                \"record_type\",",
											"                \"utc_time\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"download_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"play_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"record_duration\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"record_size\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"record_type\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"utc_time\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/events/list",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"events",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка событий (на платформу) (с некорректными параметрами)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка размера возращаемого массива (должно быть 0) \", function () {",
											"        pm.expect( pm.response.json().length).to.eql(0);",
											"    });",
											"    ",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);",
											"pm.environment.set(\"incorrect_start_time\", Date.now());",
											"pm.environment.set(\"incorrect_end_time\", Date.now()+1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/events/list?start_time={{incorrect_start_time}}&end_time={{incorrect_end_time}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"events",
										"list"
									],
									"query": [
										{
											"key": "start_time",
											"value": "{{incorrect_start_time}}"
										},
										{
											"key": "end_time",
											"value": "{{incorrect_end_time}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка событий (на платформу) (с корректными параметрами)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Проверка значений полей play_url, record_type и utc_time\", function () {",
											"        // Проверяем в ссылке start_time",
											"        let time = \"start_time=\" + pm.environment.get(\"time_events_start\");        ",
											"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
											"        // Проверяем в ссылке end_time",
											"        time = \"end_time=\" + pm.environment.get(\"time_events_end\");    ",
											"        pm.expect( pm.response.json()[0].play_url).to.include(time);",
											"",
											"        pm.expect( pm.response.json()[0].record_type).to.eql(\"script\");",
											"        time = pm.environment.get(\"time_events_start\") + \"000000\";",
											"        pm.expect( pm.response.json()[0].utc_time).to.eql(Number(time));",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"additionalItems\": true,",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"download_url\",",
											"                \"play_url\",",
											"                \"record_duration\",",
											"                \"record_size\",",
											"                \"record_type\",",
											"                \"utc_time\"",
											"            ],",
											"            \"additionalProperties\": true,",
											"            \"properties\": {",
											"                \"download_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"play_url\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"record_duration\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"record_size\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"record_type\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"utc_time\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/events/list?start_time=0&end_time=33242598802000",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"events",
										"list"
									],
									"query": [
										{
											"key": "start_time",
											"value": "0"
										},
										{
											"key": "end_time",
											"value": "33242598802000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка временных диапазонов записей с evi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"start_time\",",
											"                \"end_time\"",
											"            ],",
											"            \"properties\": {",
											"                \"start_time\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"end_time\": {",
											"                    \"type\": \"integer\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/archive/ranges?source=VIDEOSERVER&start_time=0&end_time=33242598802000",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"archive",
										"ranges"
									],
									"query": [
										{
											"key": "source",
											"value": "VIDEOSERVER"
										},
										{
											"key": "start_time",
											"value": "0"
										},
										{
											"key": "end_time",
											"value": "33242598802000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка временных диапазонов записей с evi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var schema =  {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"time\",",
											"                \"date\"",
											"            ],",
											"            \"properties\": {",
											"                \"time\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"date\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test('Schema is valid', function () {",
											"        var JsoneData=JSON.parse(responseBody);",
											"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
											"    });",
											"",
											"    pm.test(\"Проверка значений поля date\", function () {",
											"        // Получаем текущую дату",
											"        const currentDate = new Date();",
											"",
											"        // Устанавливаем ожидаемую дату ",
											"        const expectedDate = new Date(pm.response.json()[0].date);",
											"        ",
											"        // Сравниваем текущую дату с ожидаемой",
											"        pm.expect(expectedDate.getFullYear()).to.eql(currentDate.getFullYear());",
											"        pm.expect(expectedDate.getMonth()).to.eql(currentDate.getMonth());",
											"        pm.expect(expectedDate.getDate()).to.eql(currentDate.getDate());",
											"    });",
											"",
											"}",
											"catch(e)",
											"{",
											"// выводим исключение в консоль",
											"    console.log(e);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, [500]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/player/{{kam0}}/archive/days?source=VIDEOSERVER&start_time=0&end_time=33242598802000",
									"host": [
										"{{host}}"
									],
									"path": [
										"player",
										"{{kam0}}",
										"archive",
										"days"
									],
									"query": [
										{
											"key": "source",
											"value": "VIDEOSERVER"
										},
										{
											"key": "start_time",
											"value": "0"
										},
										{
											"key": "end_time",
											"value": "33242598802000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Контроллер для работы со всем комплексом сущностей эквайринга для админа и инженера ТП",
					"item": [
						{
							"name": "Создать пользователя и дом",
							"item": [
								{
									"name": "/oauth2/token(admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token\", jsonData.access_token);  //записываем в переменную access_token токен",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Test18plat34Form",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create a user (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"id2\", jsonData.id);",
													"pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"});",
													"pm.test(\"В ответе есть поле id, его тип string\",  () => {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json().id).to.string    ",
													"});",
													"    pm.test(\"Пользователь создан\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access\": {},\n    \"accessMap\": {},\n    \"additionalAccounts\": {},\n    \"additionalEmail\": [\n        \"stri222ng\"\n    ],\n    \"admin\": false,\n    \"dashboardItems\": [],\n    \"email\": \"string2@mail.ru\",\n    \"emailConfirm\": false,\n    \"enabled\": true,\n    \"externalUrl\": \"http://127.0.0.1:8074\",\n    \"houseIds\": [],\n    \"houseIdsWithRefuser\": [],\n    \"id\": \"\",\n    \"language\": \"ru\",\n    \"name\": \"2\",\n    \"password\": \"2\",\n    \"patronymic\": \"\",\n    \"permissions\": [\n        \"view.dashboard\",\n        \"view.houses\",\n        \"view.scripts\",\n        \"view.devices\",\n        \"view.meters\",\n        \"view.events\",\n        \"view.settings\",\n        \"view.calculation\",\n        \"view.cameras\",\n        \"view.plans\",\n        \"needAllMeasures\",\n        \"needHeaderVariablesEditor\",\n        \"needReportByAddresses\",\n        \"minimizeDeviceInfoIfCharts\",\n        \"needPersonalInformation\",\n        \"computeDefaultPage\",\n        \"camera_w\",\n        \"controller_w\",\n        \"device_w\",\n        \"house_w\",\n        \"script_w\"\n    ],\n    \"phone\": \"\",\n    \"phoneConfirm\": false,\n    \"platforms\": [],\n    \"role\": \"user\",\n    \"roleId\": \"user\",\n    \"roleName\": \"Абонент\",\n    \"roleSettings\": {\n        \"defaultPage\": \"view.dashboard\"\n    },\n    \"status\": \"DEFAULT\",\n    \"surname\": \"\",\n    \"username\": \"2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "/oauth2/token (user)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"access_token2\", jsonData.access_token);  //записываем в переменную access_token токен",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.text()).to.include(\"access_token\");",
													"});",
													"",
													"var scheme = {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"access_token\",",
													"        \"refresh_token\",",
													"        \"token_type\",",
													"        \"expires_in\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"access_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"refresh_token\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"token_type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"expires_in\": {",
													"            \"type\": \"integer\"",
													"        }",
													"    }",
													"};",
													"pm.test('JSON is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, scheme)).to.be.true;",
													"});",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YXBpLWNsaWVudDpwYXNzd29yZA==",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "2",
													"type": "text"
												},
												{
													"key": "password",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/oauth2/token",
											"host": [
												"{{host}}"
											],
											"path": [
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a home",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"    pm.test(\"Status is ok, response is json\", function () {",
													"      pm.response.to.be.json; // проверка формата",
													"    });",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"houseId\", jsonData.id);",
													"",
													"   var schema =  {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"        \"id\",",
													"        \"variables\",",
													"        \"dashboardItems\",",
													"        \"houseGroups\",",
													"        \"guards\",",
													"        \"title\",",
													"        \"ownerId\",",
													"        \"address\",",
													"        \"apartment\",",
													"        \"timeZone\",",
													"        \"type\",",
													"        \"startTime\",",
													"        \"guardStatus\",",
													"        \"underGuard\"",
													"    ],",
													"    \"additionalProperties\": true,",
													"    \"properties\": {",
													"        \"id\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"variables\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"dashboardItems\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"houseGroups\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"guards\": {",
													"            \"type\": \"array\",",
													"            \"additionalItems\": true,",
													"            \"items\": {}",
													"        },",
													"        \"title\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"ownerId\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"address\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"apartment\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"timeZone\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"type\": {",
													"            \"type\": \"string\"",
													"        },",
													"        \"startTime\": {",
													"            \"type\": \"integer\"",
													"        },",
													"        \"guardStatus\": {",
													"            \"type\": \"null\"",
													"        },",
													"        \"underGuard\": {",
													"            \"type\": \"boolean\"",
													"        }",
													"    }",
													"}",
													"",
													"",
													"",
													"    pm.test('Schema is valid', function () {",
													"        var JsoneData=JSON.parse(responseBody);",
													"        pm.expect(tv4.validate(JsoneData, schema)).to.be.true;",
													"    });",
													"",
													"",
													"}",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"2\",\n    \"type\": \"HOUSE\",\n    \"address\": \"2\",\n    \"apartment\": \"2\",\n    \"timeZone\": \"Asia/Krasnoyarsk\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/houses",
											"host": [
												"{{host}}"
											],
											"path": [
												"houses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Попытка перенести подписки и ордера с существующего пользователя",
							"item": [
								{
									"name": "Перенос всех сущностей эквайринга (заказов и подписок) от одного пользователя к другому. (инженер ТП, пользователь не удален)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.json().message).to.eql(\"Unable to move orders and subscriptions of existing user to another user\");",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/acquiring/moveOrphanAcquiringEntities?oldUserId={{id}}&newUserId={{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"acquiring",
												"moveOrphanAcquiringEntities"
											],
											"query": [
												{
													"key": "oldUserId",
													"value": "{{id}}"
												},
												{
													"key": "newUserId",
													"value": "{{id2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос всех сущностей эквайринга (заказов и подписок) от одного пользователя к другому. (инженер ТП, пользователь не удален) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.json().message).to.eql(\"Unable to move orders and subscriptions of existing user to another user\");",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_support_1_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/acquiring/moveOrphanAcquiringEntities?oldUserId={{id}}&newUserId={{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"acquiring",
												"moveOrphanAcquiringEntities"
											],
											"query": [
												{
													"key": "oldUserId",
													"value": "{{id}}"
												},
												{
													"key": "newUserId",
													"value": "{{id2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Перенос всех сущностей эквайринга (заказов и подписок) от одного пользователя к другому. (пользователь,  пользователь не удален)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body contains access token\",() => {",
													"  pm.expect(pm.response.json().message).to.eql(\"Access Denied\");",
													"});",
													"",
													"} ",
													"catch(e) {",
													"    // выводим исключение в консоль",
													"    console.log(e);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/administration/acquiring/moveOrphanAcquiringEntities?oldUserId={{id}}&newUserId={{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"administration",
												"acquiring",
												"moveOrphanAcquiringEntities"
											],
											"query": [
												{
													"key": "oldUserId",
													"value": "{{id}}"
												},
												{
													"key": "newUserId",
													"value": "{{id2}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Пользователь удаляет себя сам",
							"item": [
								{
									"name": "Запрос на удаление пользователем своего аккаунта",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/user/deleteyourself/request",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"deleteyourself",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на postman-mongo-proxy (подлкючени к БД)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let host = pm.globals.get(\"host\");",
													"host = host.split(\"/\")[2].split(\":\")[0]",
													"pm.environment.set(\"host_db\", host);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\":\"{{host_db}}\",\n    \"port\":\"{{db_port}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mongo_proxy_host}}/url",
											"host": [
												"{{mongo_proxy_host}}"
											],
											"path": [
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на postman-mongo-proxy вытаскиваем из DB confirmToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"confirmToken\", pm.response.json()[0].token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "db.collection('confirmTokens').find({\"userId\": \"{{id}}\"}).toArray();",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{mongo_proxy_host}}/db/core/search_by_script",
											"host": [
												"{{mongo_proxy_host}}"
											],
											"path": [
												"db",
												"core",
												"search_by_script"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подтверждение удаления пользователем своего аккаунта",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/user/deleteyourself/confirm/{{confirmToken}}/{{id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"deleteyourself",
												"confirm",
												"{{confirmToken}}",
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Перенос всех сущностей эквайринга (заказов и подписок) от одного пользователя к другому.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"} ",
											"catch(e) {",
											"    // выводим исключение в консоль",
											"    console.log(e);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test_support_1_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/administration/acquiring/moveOrphanAcquiringEntities?oldUserId={{id}}&newUserId={{id2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"administration",
										"acquiring",
										"moveOrphanAcquiringEntities"
									],
									"query": [
										{
											"key": "oldUserId",
											"value": "{{id}}"
										},
										{
											"key": "newUserId",
											"value": "{{id2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка переноса orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка смены значения поля userId в БД\", function () {",
											"    for (let i in pm.response.json()){",
											"        if ((pm.response.json()[i].items[0].entityId === pm.environment.get(\"kam0\")) || (pm.response.json()[i].items[0].entityId === pm.environment.get(\"kam1\"))) {",
											"           pm.expect(pm.response.json()[i].userId).to.eql(pm.environment.get(\"id2\"))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dbName\":\"iot-core\",\n    \"collection\":\"orders\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mongo_proxy_host}}/find_all",
									"host": [
										"{{mongo_proxy_host}}"
									],
									"path": [
										"find_all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка переноса subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка смены значения поля userId в БД\", function () {",
											"    for (let i in pm.response.json()){",
											"        pm.expect(pm.response.json()[0].userId).to.eql(pm.environment.get(\"id2\"))        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dbName\":\"iot-core\",\n    \"collection\":\"subscriptions\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mongo_proxy_host}}/find_all",
									"host": [
										"{{mongo_proxy_host}}"
									],
									"path": [
										"find_all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление",
					"item": [
						{
							"name": "Удаление инженера ТП и проверка удаления пользователя",
							"item": [
								{
									"name": "Админ пытается удалить пользователя с активными подписками",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "удалить инженера ТП с платформы",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Пользователь удален (код 204)\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/users/{{test_support_1_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"{{test_support_1_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Пользователь удаляет себя сам",
							"item": [
								{
									"name": "Запрос на удаление пользователем своего аккаунта",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token2}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/user/deleteyourself/request",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"deleteyourself",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на postman-mongo-proxy (подлкючени к БД)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let host = pm.globals.get(\"host\");",
													"host = host.split(\"/\")[2].split(\":\")[0]",
													"pm.environment.set(\"host_db\", host);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\":\"{{host_db}}\",\n    \"port\":\"{{db_port}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mongo_proxy_host}}/url",
											"host": [
												"{{mongo_proxy_host}}"
											],
											"path": [
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос на postman-mongo-proxy вытаскиваем из DB confirmToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"confirmToken\", pm.response.json()[0].token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "db.collection('confirmTokens').find({\"userId\": \"{{id2}}\"}).toArray();",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{mongo_proxy_host}}/db/core/search_by_script",
											"host": [
												"{{mongo_proxy_host}}"
											],
											"path": [
												"db",
												"core",
												"search_by_script"
											]
										}
									},
									"response": []
								},
								{
									"name": "Подтверждение удаления пользователем своего аккаунта",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token2}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/user/deleteyourself/confirm/{{confirmToken}}/{{id2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"deleteyourself",
												"confirm",
												"{{confirmToken}}",
												"{{id2}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "i",
			"value": "0",
			"type": "string"
		}
	]
}